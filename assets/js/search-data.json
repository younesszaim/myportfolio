{
  
    
        "post0": {
            "title": "Title",
            "content": "%matplotlib inline from pathlib import Path import pandas as pd import numpy as np from scipy.stats import trim_mean from statsmodels import robust import wquantiles import seaborn as sns import matplotlib.pylab as plt . pip install wquantiles . Requirement already satisfied: wquantiles in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (0.6) Requirement already satisfied: numpy&gt;=1.18 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from wquantiles) (1.21.2) Note: you may need to restart the kernel to use updated packages. . try: import common DATA = common.dataDirectory() except ImportError: DATA = Path().resolve() / &#39;data&#39; . PATH = &#39;/Users/rmbp/desktop/practical-statistics-for-data-scientists/data/&#39; . AIRLINE_STATS_CSV = f&#39;{PATH}airline_stats.csv&#39; KC_TAX_CSV = f&#39;{PATH}kc_tax.csv.gz&#39; LC_LOANS_CSV = f&#39;{PATH}lc_loans.csv&#39; AIRPORT_DELAYS_CSV = f&#39;{PATH}dfw_airline.csv&#39; SP500_DATA_CSV = f&#39;{PATH}sp500_data.csv.gz&#39; SP500_SECTORS_CSV = f&#39;{PATH}sp500_sectors.csv&#39; STATE_CSV = f&#39;{PATH}state.csv&#39; . state = pd.read_csv(STATE_CSV) print(state.head(8)) . State Population Murder.Rate Abbreviation 0 Alabama 4779736 5.7 AL 1 Alaska 710231 5.6 AK 2 Arizona 6392017 4.7 AZ 3 Arkansas 2915918 5.6 AR 4 California 37253956 4.4 CA 5 Colorado 5029196 2.8 CO 6 Connecticut 3574097 2.4 CT 7 Delaware 897934 5.8 DE . ??pd.value_counts . np.average(state[&#39;Murder.Rate&#39;], weights=state.Population) . 4.445833981123393 . from scipy.stats import trim_mean . trim_mean(state.Population, 0.10) . 4783697.125 . iqr = state.Population.quantile(0.75)-state.Population.quantile(0.25) iqr . 4847308.0 . from statsmodels import robust . ?robust.scale.mad . abs(state.Population - state.Population.median()).median()/ 0.6744897501960817 . 3849876.1459979336 . state[&#39;Murder.Rate&#39;].quantile([0.05,0.25,0.5,0.75,0.95]) . 0.05 1.600 0.25 2.425 0.50 4.000 0.75 5.550 0.95 6.510 Name: Murder.Rate, dtype: float64 . state[&#39;Murder.Rate&#39;].quantile([0.05,0.25,0.5,0.75,0.95]) . 0.05 1.600 0.25 2.425 0.50 4.000 0.75 5.550 0.95 6.510 Name: Murder.Rate, dtype: float64 . percentile = [0.05,0.25,0.5,0.75,0.95] df = pd.DataFrame(state[&#39;Murder.Rate&#39;].quantile(percentile)) df.index = [f&#39;{p * 100}%&#39; for p in percentile] df.T . 5.0% 25.0% 50.0% 75.0% 95.0% . Murder.Rate 1.6 | 2.425 | 4.0 | 5.55 | 6.51 | . import matplotlib.pylab as plt ax = (state[&#39;Population&#39;]/1_000_000).plot.box(figsize=(5,3)) ax.set_ylabel(&#39;Population(millions)&#39;) plt.tight_layout() plt.show() . import matplotlib.pylab as plt ax = (state[&#39;Population&#39;]/1_000_000).plot.box() ax.set_ylabel(&#39;Population(millions)&#39;) plt.tight_layout() plt.show() . from matplotlib.pylab import plt ax = (state[&#39;Population&#39;]/1_000_000).plot.box() ax.set_ylabel(&#39;Population (millions)&#39;) plt.tight_layout() plt.show() . populationbinned = pd.cut(state[&#39;Population&#39;],10) populationbinned.name = &#39;binnedpopulation&#39; df = pd.concat([state, populationbinned],axis = 1).sort_values(&#39;Population&#39;) groups = [] for group, state in df.groupby(&#39;binnedpopulation&#39;): groups.append({ &#39;BinRange&#39; : group , &#39;Count&#39; : len(state) , &#39;States&#39; : &#39;,&#39;.join(state.Abbreviation) }) print(pd.DataFrame(groups)) . BinRange Count 0 (526935.67, 4232659.0] 24 1 (4232659.0, 7901692.0] 14 2 (7901692.0, 11570725.0] 6 3 (11570725.0, 15239758.0] 2 4 (15239758.0, 18908791.0] 1 5 (18908791.0, 22577824.0] 1 6 (22577824.0, 26246857.0] 1 7 (26246857.0, 29915890.0] 0 8 (29915890.0, 33584923.0] 0 9 (33584923.0, 37253956.0] 1 States 0 WY,VT,ND,AK,SD,DE,MT,RI,NH,ME,HI,ID,NE,WV,NM,NV,UT,KS,AR,MS,IA,CT,OK,OR 1 KY,LA,SC,AL,CO,MN,WI,MD,MO,TN,AZ,IN,MA,WA 2 VA,NJ,NC,GA,MI,OH 3 PA,IL 4 FL 5 NY 6 TX 7 8 9 CA . for group, state in df.groupby(&#39;binnedpopulation&#39;): print({1 : state.Population , 2: &#39;,&#39;.join(state.State)}) . {1: 49 563626 44 625741 33 672591 1 710231 40 814180 7 897934 25 989415 38 1052567 28 1316470 18 1328361 10 1360301 11 1567582 26 1826341 47 1852994 30 2059179 27 2700551 43 2763885 15 2853118 3 2915918 23 2967297 14 3046355 6 3574097 35 3751351 36 3831074 Name: Population, dtype: int64, 2: &#39;Wyoming,Vermont,North Dakota,Alaska,South Dakota,Delaware,Montana,Rhode Island,New Hampshire,Maine,Hawaii,Idaho,Nebraska,West Virginia,New Mexico,Nevada,Utah,Kansas,Arkansas,Mississippi,Iowa,Connecticut,Oklahoma,Oregon&#39;} {1: 16 4339367 17 4533372 39 4625364 0 4779736 5 5029196 22 5303925 48 5686986 19 5773552 24 5988927 41 6346105 2 6392017 13 6483802 20 6547629 46 6724540 Name: Population, dtype: int64, 2: &#39;Kentucky,Louisiana,South Carolina,Alabama,Colorado,Minnesota,Wisconsin,Maryland,Missouri,Tennessee,Arizona,Indiana,Massachusetts,Washington&#39;} {1: 45 8001024 29 8791894 32 9535483 9 9687653 21 9883640 34 11536504 Name: Population, dtype: int64, 2: &#39;Virginia,New Jersey,North Carolina,Georgia,Michigan,Ohio&#39;} {1: 37 12702379 12 12830632 Name: Population, dtype: int64, 2: &#39;Pennsylvania,Illinois&#39;} {1: 8 18801310 Name: Population, dtype: int64, 2: &#39;Florida&#39;} {1: 31 19378102 Name: Population, dtype: int64, 2: &#39;New York&#39;} {1: 42 25145561 Name: Population, dtype: int64, 2: &#39;Texas&#39;} {1: Series([], Name: Population, dtype: int64), 2: &#39;&#39;} {1: Series([], Name: Population, dtype: int64), 2: &#39;&#39;} {1: 4 37253956 Name: Population, dtype: int64, 2: &#39;California&#39;} .",
            "url": "https://younesszaim.github.io/myportfolio/2021/10/12/Untitled.html",
            "relUrl": "/2021/10/12/Untitled.html",
            "date": " • Oct 12, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://younesszaim.github.io/myportfolio/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://younesszaim.github.io/myportfolio/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://younesszaim.github.io/myportfolio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://younesszaim.github.io/myportfolio/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}