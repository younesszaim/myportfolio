{
  
    
        "post0": {
            "title": "Uscensus",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “id”: “ad33d434”, “metadata”: {}, “source”: [ “# US cencus income : Ensembles, Bagging and Shap Values n”, “ n”, “ n”, “- toc: true n”, “- badges: true n”, “- comments: true n”, “- categories: [fastpages, jupyter] n”, “- image: images/shap_values.png n” ] }, { “cell_type”: “markdown”, “id”: “27c89666”, “metadata”: {}, “source”: [ “# Problem Framework” ] }, { “cell_type”: “markdown”, “id”: “c70a8be9”, “metadata”: {}, “source”: [ “Our task is to determine the income level for the person represented by the record. Incomes have been binned at the $50K level to present a binary classification problem. n”, “ n”, “The dataset used in this analysis was extracted from the census bureau database found at. The data was split into train/test in approximately 2/3, 1/3 proportions. n”, “ n”, “The following mappings of the data is as follow :” ] }, { “cell_type”: “code”, “execution_count”: 189, “id”: “f908936f”, “metadata”: {}, “outputs”: [], “source”: [ “import pandas as pd n”, “from pandas.api.types import is_string_dtype, is_numeric_dtype, is_categorical_dtype n”, “import numpy as np” ] }, { “cell_type”: “code”, “execution_count”: 190, “id”: “83eaaaad”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;column_name&lt;/th&gt; n”, “ &lt;th&gt;dtype&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;0&lt;/th&gt; n”, “ &lt;td&gt;age&lt;/td&gt; n”, “ &lt;td&gt;continuous&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;1&lt;/th&gt; n”, “ &lt;td&gt;class_of_worker&lt;/td&gt; n”, “ &lt;td&gt;nominal&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2&lt;/th&gt; n”, “ &lt;td&gt;detailed_industry_recode&lt;/td&gt; n”, “ &lt;td&gt;nominal&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;3&lt;/th&gt; n”, “ &lt;td&gt;detailed_occupation_recode&lt;/td&gt; n”, “ &lt;td&gt;nominal&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;4&lt;/th&gt; n”, “ &lt;td&gt;education&lt;/td&gt; n”, “ &lt;td&gt;nominal&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ column_name dtype n”, “0 age continuous n”, “1 class_of_worker nominal n”, “2 detailed_industry_recode nominal n”, “3 detailed_occupation_recode nominal n”, “4 education nominal” ] }, “execution_count”: 190, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “df_labels = pd.read_csv(f’{PATH}/census_income_metadata_column.csv’, sep=’;’) n”, “df_labels.head(5) n” ] }, { “cell_type”: “markdown”, “id”: “681ee235”, “metadata”: {}, “source”: [ “In any sort of data science work, it’s important to look at our data directly to make sure we understand the format, how it’s stored, what types of values it holds, etc. Even if we’ve read a description of the data, the actual data may not be what we expect. We’ll start by reading the training set into a Pandas DataFrame :” ] }, { “cell_type”: “code”, “execution_count”: 191, “id”: “b26aaed6”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(199523, 42)” ] }, “execution_count”: 191, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Loading the train data n”, “df = pd.read_csv(f’{PATH}/census_income_learn.csv’, names = df_labels[‘column_name’]) n”, “df.shape” ] }, { “cell_type”: “markdown”, “id”: “ac62edd5”, “metadata”: {}, “source”: [ “Let’s have a look at the columns, their types defined by Pandas and compared it to their actual mapping types :” ] }, { “cell_type”: “code”, “execution_count”: 192, “id”: “08687e0c”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “{‘age’: (‘int64’, ‘continuous’), n”, “ ‘class_of_worker’: (‘object’, ‘nominal’), n”, “ ‘detailed_industry_recode’: (‘int64’, ‘nominal’), n”, “ ‘detailed_occupation_recode’: (‘int64’, ‘nominal’), n”, “ ‘education’: (‘object’, ‘nominal’), n”, “ ‘wage_per_hour’: (‘int64’, ‘continuous’), n”, “ ‘enroll_in_edu_inst_last_wk’: (‘object’, ‘nominal’), n”, “ ‘marital_stat’: (‘object’, ‘nominal’), n”, “ ‘major_industry_code’: (‘object’, ‘nominal’), n”, “ ‘major_occupation_code’: (‘object’, ‘nominal’), n”, “ ‘race’: (‘object’, ‘nominal’), n”, “ ‘hispanic_origin’: (‘object’, ‘nominal’), n”, “ ‘sex’: (‘object’, ‘nominal’), n”, “ ‘member_of_a_labor_union’: (‘object’, ‘nominal’), n”, “ ‘reason_for_unemployment’: (‘object’, ‘nominal’), n”, “ ‘full_or_part_time_employment_stat’: (‘object’, ‘nominal’), n”, “ ‘capital_gains’: (‘int64’, ‘continuous’), n”, “ ‘capital_losses’: (‘int64’, ‘continuous’), n”, “ ‘dividends_from_stocks’: (‘int64’, ‘continuous’), n”, “ ‘tax_filer_stat’: (‘object’, ‘nominal’), n”, “ ‘region_of_previous_residence’: (‘object’, ‘nominal’), n”, “ ‘state_of_previous_residence’: (‘object’, ‘nominal’), n”, “ ‘detailed_household_and_family_stat’: (‘object’, ‘nominal’), n”, “ ‘detailed_household_summary_in_household’: (‘object’, ‘nominal’), n”, “ ‘ignore’: (‘float64’, ‘continuous’), n”, “ ‘migration_code-change_in_msa’: (‘object’, ‘nominal’), n”, “ ‘migration_code-change_in_reg’: (‘object’, ‘nominal’), n”, “ ‘migration_code-move_within_reg’: (‘object’, ‘nominal’), n”, “ ‘live_in_this_house_1year_ago’: (‘object’, ‘nominal’), n”, “ ‘migration_prev_res_in_sunbelt’: (‘object’, ‘nominal’), n”, “ ‘num_persons_worked_for_employer’: (‘int64’, ‘continuous’), n”, “ ‘family_members_under_18’: (‘object’, ‘nominal’), n”, “ ‘country_of_birth_father’: (‘object’, ‘nominal’), n”, “ ‘country_of_birth_mother’: (‘object’, ‘nominal’), n”, “ ‘country_of_birth_self’: (‘object’, ‘nominal’), n”, “ ‘citizenship’: (‘object’, ‘nominal’), n”, “ ‘own_business_or_self_employed’: (‘int64’, ‘nominal’), n”, “ &quot;fill_inc_questionnaire_for_veteran’s_admin&quot;: (‘object’, ‘nominal’), n”, “ ‘veterans_benefits’: (‘int64’, ‘nominal’), n”, “ ‘weeks_worked_in_year’: (‘int64’, ‘continuous’), n”, “ ‘year’: (‘int64’, ‘nominal’), n”, “ ‘income_level’: (‘object’, ‘nominal’)}” ] }, “execution_count”: 192, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Chekcing the mapping of the data n”, “d1 = df.dtypes.apply(lambda x: x.name).to_dict() n”, “d2 = {c: d for c,d in zip(df_labels[‘column_name’],df_labels[‘dtype’])} n”, “mapping = [d1, d2] n”, “d = {} n”, “for k in d1.keys(): n”, “ d[k] = tuple(d[k] for d in mapping) n”, “d” ] }, { “cell_type”: “markdown”, “id”: “f5264a2b”, “metadata”: {}, “source”: [ “We can see that detailed_industry_recode, detailed_occupation_recode, own_business_or_self_employed, n”, “veterans_benefits and year is set by default as a continuos category. n”, “ n”, “Let’s redifined their types :” ] }, { “cell_type”: “code”, “execution_count”: 193, “id”: “1a7e123e”, “metadata”: {}, “outputs”: [], “source”: [ “# Correcting data types n”, “d1[‘detailed_industry_recode’]=’object’ n”, “d1[‘detailed_occupation_recode’]=’object’ n”, “d1[‘own_business_or_self_employed’]=’object’ n”, “d1[‘veterans_benefits’]=’object’ n”, “d1[‘year’]=’object’” ] }, { “cell_type”: “markdown”, “id”: “7d4e2a8f”, “metadata”: {}, “source”: [ “Let’s reload the data with its correspind feature’s mapping :” ] }, { “cell_type”: “code”, “execution_count”: 194, “id”: “19b961f5”, “metadata”: {}, “outputs”: [], “source”: [ “# reload data with coorexted types n”, “df = pd.read_csv(f’{PATH}/census_income_learn.csv’, names =df_labels[‘column_name’], n”, “ dtype= d1)” ] }, { “cell_type”: “markdown”, “id”: “34720e3b”, “metadata”: {}, “source”: [ “The info() method is useful to get a quick description of the data, in particular the n”, “total number of rows, each attribute’s type, and the number of nonnull values :” ] }, { “cell_type”: “code”, “execution_count”: 195, “id”: “37a86f92”, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “&lt;class ‘pandas.core.frame.DataFrame’&gt; n”, “RangeIndex: 199523 entries, 0 to 199522 n”, “Data columns (total 42 columns): n”, “ # Column Non-Null Count Dtype n”, “— —— ————– —– n”, “ 0 age 199523 non-null int64 n”, “ 1 class_of_worker 199523 non-null object n”, “ 2 detailed_industry_recode 199523 non-null object n”, “ 3 detailed_occupation_recode 199523 non-null object n”, “ 4 education 199523 non-null object n”, “ 5 wage_per_hour 199523 non-null int64 n”, “ 6 enroll_in_edu_inst_last_wk 199523 non-null object n”, “ 7 marital_stat 199523 non-null object n”, “ 8 major_industry_code 199523 non-null object n”, “ 9 major_occupation_code 199523 non-null object n”, “ 10 race 199523 non-null object n”, “ 11 hispanic_origin 199523 non-null object n”, “ 12 sex 199523 non-null object n”, “ 13 member_of_a_labor_union 199523 non-null object n”, “ 14 reason_for_unemployment 199523 non-null object n”, “ 15 full_or_part_time_employment_stat 199523 non-null object n”, “ 16 capital_gains 199523 non-null int64 n”, “ 17 capital_losses 199523 non-null int64 n”, “ 18 dividends_from_stocks 199523 non-null int64 n”, “ 19 tax_filer_stat 199523 non-null object n”, “ 20 region_of_previous_residence 199523 non-null object n”, “ 21 state_of_previous_residence 199523 non-null object n”, “ 22 detailed_household_and_family_stat 199523 non-null object n”, “ 23 detailed_household_summary_in_household 199523 non-null object n”, “ 24 ignore 199523 non-null float64 n”, “ 25 migration_code-change_in_msa 199523 non-null object n”, “ 26 migration_code-change_in_reg 199523 non-null object n”, “ 27 migration_code-move_within_reg 199523 non-null object n”, “ 28 live_in_this_house_1_year_ago 199523 non-null object n”, “ 29 migration_prev_res_in_sunbelt 199523 non-null object n”, “ 30 num_persons_worked_for_employer 199523 non-null int64 n”, “ 31 family_members_under_18 199523 non-null object n”, “ 32 country_of_birth_father 199523 non-null object n”, “ 33 country_of_birth_mother 199523 non-null object n”, “ 34 country_of_birth_self 199523 non-null object n”, “ 35 citizenship 199523 non-null object n”, “ 36 own_business_or_self_employed 199523 non-null object n”, “ 37 fill_inc_questionnaire_for_veteran’s_admin 199523 non-null object n”, “ 38 veterans_benefits 199523 non-null object n”, “ 39 weeks_worked_in_year 199523 non-null int64 n”, “ 40 year 199523 non-null object n”, “ 41 income_level 199523 non-null object n”, “dtypes: float64(1), int64(7), object(34) n”, “memory usage: 63.9+ MB n” ] } ], “source”: [ “df.info()” ] }, { “cell_type”: “code”, “execution_count”: 196, “id”: “5ed9105a”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;age&lt;/th&gt; n”, “ &lt;th&gt;class_of_worker&lt;/th&gt; n”, “ &lt;th&gt;detailed_industry_recode&lt;/th&gt; n”, “ &lt;th&gt;detailed_occupation_recode&lt;/th&gt; n”, “ &lt;th&gt;education&lt;/th&gt; n”, “ &lt;th&gt;wage_per_hour&lt;/th&gt; n”, “ &lt;th&gt;enroll_in_edu_inst_last_wk&lt;/th&gt; n”, “ &lt;th&gt;marital_stat&lt;/th&gt; n”, “ &lt;th&gt;major_industry_code&lt;/th&gt; n”, “ &lt;th&gt;major_occupation_code&lt;/th&gt; n”, “ &lt;th&gt;race&lt;/th&gt; n”, “ &lt;th&gt;hispanic_origin&lt;/th&gt; n”, “ &lt;th&gt;sex&lt;/th&gt; n”, “ &lt;th&gt;member_of_a_labor_union&lt;/th&gt; n”, “ &lt;th&gt;reason_for_unemployment&lt;/th&gt; n”, “ &lt;th&gt;full_or_part_time_employment_stat&lt;/th&gt; n”, “ &lt;th&gt;capital_gains&lt;/th&gt; n”, “ &lt;th&gt;capital_losses&lt;/th&gt; n”, “ &lt;th&gt;dividends_from_stocks&lt;/th&gt; n”, “ &lt;th&gt;tax_filer_stat&lt;/th&gt; n”, “ &lt;th&gt;region_of_previous_residence&lt;/th&gt; n”, “ &lt;th&gt;state_of_previous_residence&lt;/th&gt; n”, “ &lt;th&gt;detailed_household_and_family_stat&lt;/th&gt; n”, “ &lt;th&gt;detailed_household_summary_in_household&lt;/th&gt; n”, “ &lt;th&gt;ignore&lt;/th&gt; n”, “ &lt;th&gt;migration_code-change_in_msa&lt;/th&gt; n”, “ &lt;th&gt;migration_code-change_in_reg&lt;/th&gt; n”, “ &lt;th&gt;migration_code-move_within_reg&lt;/th&gt; n”, “ &lt;th&gt;live_in_this_house_1_year_ago&lt;/th&gt; n”, “ &lt;th&gt;migration_prev_res_in_sunbelt&lt;/th&gt; n”, “ &lt;th&gt;num_persons_worked_for_employer&lt;/th&gt; n”, “ &lt;th&gt;family_members_under_18&lt;/th&gt; n”, “ &lt;th&gt;country_of_birth_father&lt;/th&gt; n”, “ &lt;th&gt;country_of_birth_mother&lt;/th&gt; n”, “ &lt;th&gt;country_of_birth_self&lt;/th&gt; n”, “ &lt;th&gt;citizenship&lt;/th&gt; n”, “ &lt;th&gt;own_business_or_self_employed&lt;/th&gt; n”, “ &lt;th&gt;fill_inc_questionnaire_for_veteran’s_admin&lt;/th&gt; n”, “ &lt;th&gt;veterans_benefits&lt;/th&gt; n”, “ &lt;th&gt;weeks_worked_in_year&lt;/th&gt; n”, “ &lt;th&gt;year&lt;/th&gt; n”, “ &lt;th&gt;income_level&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;0&lt;/th&gt; n”, “ &lt;td&gt;73&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;High school graduate&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Widowed&lt;/td&gt; n”, “ &lt;td&gt;Not in universe or children&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;White&lt;/td&gt; n”, “ &lt;td&gt;All other&lt;/td&gt; n”, “ &lt;td&gt;Female&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in labor force&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Nonfiler&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Other Rel 18+ ever marr not in subfamily&lt;/td&gt; n”, “ &lt;td&gt;Other relative of householder&lt;/td&gt; n”, “ &lt;td&gt;1700.09&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;Not in universe under 1 year old&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;United-States&lt;/td&gt; n”, “ &lt;td&gt;United-States&lt;/td&gt; n”, “ &lt;td&gt;United-States&lt;/td&gt; n”, “ &lt;td&gt;Native- Born in the United States&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;2&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;95&lt;/td&gt; n”, “ &lt;td&gt;- 50000.&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;1&lt;/th&gt; n”, “ &lt;td&gt;58&lt;/td&gt; n”, “ &lt;td&gt;Self-employed-not incorporated&lt;/td&gt; n”, “ &lt;td&gt;4&lt;/td&gt; n”, “ &lt;td&gt;34&lt;/td&gt; n”, “ &lt;td&gt;Some college but no degree&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Divorced&lt;/td&gt; n”, “ &lt;td&gt;Construction&lt;/td&gt; n”, “ &lt;td&gt;Precision production craft &amp; repair&lt;/td&gt; n”, “ &lt;td&gt;White&lt;/td&gt; n”, “ &lt;td&gt;All other&lt;/td&gt; n”, “ &lt;td&gt;Male&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Children or Armed Forces&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Head of household&lt;/td&gt; n”, “ &lt;td&gt;South&lt;/td&gt; n”, “ &lt;td&gt;Arkansas&lt;/td&gt; n”, “ &lt;td&gt;Householder&lt;/td&gt; n”, “ &lt;td&gt;Householder&lt;/td&gt; n”, “ &lt;td&gt;1053.55&lt;/td&gt; n”, “ &lt;td&gt;MSA to MSA&lt;/td&gt; n”, “ &lt;td&gt;Same county&lt;/td&gt; n”, “ &lt;td&gt;Same county&lt;/td&gt; n”, “ &lt;td&gt;No&lt;/td&gt; n”, “ &lt;td&gt;Yes&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;United-States&lt;/td&gt; n”, “ &lt;td&gt;United-States&lt;/td&gt; n”, “ &lt;td&gt;United-States&lt;/td&gt; n”, “ &lt;td&gt;Native- Born in the United States&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;2&lt;/td&gt; n”, “ &lt;td&gt;52&lt;/td&gt; n”, “ &lt;td&gt;94&lt;/td&gt; n”, “ &lt;td&gt;- 50000.&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2&lt;/th&gt; n”, “ &lt;td&gt;18&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;10th grade&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;High school&lt;/td&gt; n”, “ &lt;td&gt;Never married&lt;/td&gt; n”, “ &lt;td&gt;Not in universe or children&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Asian or Pacific Islander&lt;/td&gt; n”, “ &lt;td&gt;All other&lt;/td&gt; n”, “ &lt;td&gt;Female&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in labor force&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Nonfiler&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Child 18+ never marr Not in a subfamily&lt;/td&gt; n”, “ &lt;td&gt;Child 18 or older&lt;/td&gt; n”, “ &lt;td&gt;991.95&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;Not in universe under 1 year old&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Vietnam&lt;/td&gt; n”, “ &lt;td&gt;Vietnam&lt;/td&gt; n”, “ &lt;td&gt;Vietnam&lt;/td&gt; n”, “ &lt;td&gt;Foreign born- Not a citizen of U S&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;2&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;95&lt;/td&gt; n”, “ &lt;td&gt;- 50000.&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ age class_of_worker detailed_industry_recode n”, “0 73 Not in universe 0 n”, “1 58 Self-employed-not incorporated 4 n”, “2 18 Not in universe 0 n”, “ n”, “ detailed_occupation_recode education wage_per_hour n”, “0 0 High school graduate 0 n”, “1 34 Some college but no degree 0 n”, “2 0 10th grade 0 n”, “ n”, “ enroll_in_edu_inst_last_wk marital_stat major_industry_code n”, “0 Not in universe Widowed Not in universe or children n”, “1 Not in universe Divorced Construction n”, “2 High school Never married Not in universe or children n”, “ n”, “ major_occupation_code race n”, “0 Not in universe White n”, “1 Precision production craft &amp; repair White n”, “2 Not in universe Asian or Pacific Islander n”, “ n”, “ hispanic_origin sex member_of_a_labor_union reason_for_unemployment n”, “0 All other Female Not in universe Not in universe n”, “1 All other Male Not in universe Not in universe n”, “2 All other Female Not in universe Not in universe n”, “ n”, “ full_or_part_time_employment_stat capital_gains capital_losses n”, “0 Not in labor force 0 0 n”, “1 Children or Armed Forces 0 0 n”, “2 Not in labor force 0 0 n”, “ n”, “ dividends_from_stocks tax_filer_stat region_of_previous_residence n”, “0 0 Nonfiler Not in universe n”, “1 0 Head of household South n”, “2 0 Nonfiler Not in universe n”, “ n”, “ state_of_previous_residence detailed_household_and_family_stat n”, “0 Not in universe Other Rel 18+ ever marr not in subfamily n”, “1 Arkansas Householder n”, “2 Not in universe Child 18+ never marr Not in a subfamily n”, “ n”, “ detailed_household_summary_in_household ignore n”, “0 Other relative of householder 1700.09 n”, “1 Householder 1053.55 n”, “2 Child 18 or older 991.95 n”, “ n”, “ migration_code-change_in_msa migration_code-change_in_reg n”, “0 ? ? n”, “1 MSA to MSA Same county n”, “2 ? ? n”, “ n”, “ migration_code-move_within_reg live_in_this_house_1_year_ago n”, “0 ? Not in universe under 1 year old n”, “1 Same county No n”, “2 ? Not in universe under 1 year old n”, “ n”, “ migration_prev_res_in_sunbelt num_persons_worked_for_employer n”, “0 ? 0 n”, “1 Yes 1 n”, “2 ? 0 n”, “ n”, “ family_members_under_18 country_of_birth_father country_of_birth_mother n”, “0 Not in universe United-States United-States n”, “1 Not in universe United-States United-States n”, “2 Not in universe Vietnam Vietnam n”, “ n”, “ country_of_birth_self citizenship n”, “0 United-States Native- Born in the United States n”, “1 United-States Native- Born in the United States n”, “2 Vietnam Foreign born- Not a citizen of U S n”, “ n”, “ own_business_or_self_employed fill_inc_questionnaire_for_veteran’s_admin n”, “0 0 Not in universe n”, “1 0 Not in universe n”, “2 0 Not in universe n”, “ n”, “ veterans_benefits weeks_worked_in_year year income_level n”, “0 2 0 95 - 50000. n”, “1 2 52 94 - 50000. n”, “2 2 0 95 - 50000. “ ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “# dispplay first rows n”, “with pd.option_context(‘display.max_rows’, None, ‘display.max_columns’, None): n”, “ display(df.head(3))” ] }, { “cell_type”: “code”, “execution_count”: 197, “id”: “5da39d2c”, “metadata”: {}, “outputs”: [], “source”: [ “# drop ‘ignore’ column n”, “df.drop(‘ignore’, axis=1,inplace=True)” ] }, { “cell_type”: “code”, “execution_count”: 198, “id”: “10b3321c”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “Index([‘age’, ‘class_of_worker’, ‘detailed_industry_recode’, n”, “ ‘detailed_occupation_recode’, ‘education’, ‘wage_per_hour’, n”, “ ‘enroll_in_edu_inst_last_wk’, ‘marital_stat’, ‘major_industry_code’, n”, “ ‘major_occupation_code’, ‘race’, ‘hispanic_origin’, ‘sex’, n”, “ ‘member_of_a_labor_union’, ‘reason_for_unemployment’, n”, “ ‘full_or_part_time_employment_stat’, ‘capital_gains’, ‘capital_losses’, n”, “ ‘dividends_from_stocks’, ‘tax_filer_stat’, n”, “ ‘region_of_previous_residence’, ‘state_of_previous_residence’, n”, “ ‘detailed_household_and_family_stat’, n”, “ ‘detailed_household_summary_in_household’, n”, “ ‘migration_code-change_in_msa’, ‘migration_code-change_in_reg’, n”, “ ‘migration_code-move_within_reg’, ‘live_in_this_house_1_year_ago’, n”, “ ‘migration_prev_res_in_sunbelt’, ‘num_persons_worked_for_employer’, n”, “ ‘family_members_under_18’, ‘country_of_birth_father’, n”, “ ‘country_of_birth_mother’, ‘country_of_birth_self’, ‘citizenship’, n”, “ ‘own_business_or_self_employed’, n”, “ ‘fill_inc_questionnaire_for_veteran’s_admin’, ‘veterans_benefits’, n”, “ ‘weeks_worked_in_year’, ‘year’, ‘income_level’], n”, “ dtype=’object’)” ] }, “execution_count”: 198, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# list columns n”, “df.columns” ] }, { “cell_type”: “markdown”, “id”: “9389976f”, “metadata”: {}, “source”: [ “We load the test set with the same training data types :” ] }, { “cell_type”: “code”, “execution_count”: 199, “id”: “ed72f537”, “metadata”: {}, “outputs”: [], “source”: [ “# loading the test set n”, “test = pd.read_csv(f’{PATH}/census_income_test.csv’, names =df_labels[‘column_name’], dtype= d1 )” ] }, { “cell_type”: “code”, “execution_count”: 200, “id”: “351c08b9”, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “&lt;class ‘pandas.core.frame.DataFrame’&gt; n”, “RangeIndex: 99762 entries, 0 to 99761 n”, “Data columns (total 42 columns): n”, “ # Column Non-Null Count Dtype n”, “— —— ————– —– n”, “ 0 age 99762 non-null int64 n”, “ 1 class_of_worker 99762 non-null object n”, “ 2 detailed_industry_recode 99762 non-null object n”, “ 3 detailed_occupation_recode 99762 non-null object n”, “ 4 education 99762 non-null object n”, “ 5 wage_per_hour 99762 non-null int64 n”, “ 6 enroll_in_edu_inst_last_wk 99762 non-null object n”, “ 7 marital_stat 99762 non-null object n”, “ 8 major_industry_code 99762 non-null object n”, “ 9 major_occupation_code 99762 non-null object n”, “ 10 race 99762 non-null object n”, “ 11 hispanic_origin 99762 non-null object n”, “ 12 sex 99762 non-null object n”, “ 13 member_of_a_labor_union 99762 non-null object n”, “ 14 reason_for_unemployment 99762 non-null object n”, “ 15 full_or_part_time_employment_stat 99762 non-null object n”, “ 16 capital_gains 99762 non-null int64 n”, “ 17 capital_losses 99762 non-null int64 n”, “ 18 dividends_from_stocks 99762 non-null int64 n”, “ 19 tax_filer_stat 99762 non-null object n”, “ 20 region_of_previous_residence 99762 non-null object n”, “ 21 state_of_previous_residence 99762 non-null object n”, “ 22 detailed_household_and_family_stat 99762 non-null object n”, “ 23 detailed_household_summary_in_household 99762 non-null object n”, “ 24 ignore 99762 non-null float64 n”, “ 25 migration_code-change_in_msa 99762 non-null object n”, “ 26 migration_code-change_in_reg 99762 non-null object n”, “ 27 migration_code-move_within_reg 99762 non-null object n”, “ 28 live_in_this_house_1_year_ago 99762 non-null object n”, “ 29 migration_prev_res_in_sunbelt 99762 non-null object n”, “ 30 num_persons_worked_for_employer 99762 non-null int64 n”, “ 31 family_members_under_18 99762 non-null object n”, “ 32 country_of_birth_father 99762 non-null object n”, “ 33 country_of_birth_mother 99762 non-null object n”, “ 34 country_of_birth_self 99762 non-null object n”, “ 35 citizenship 99762 non-null object n”, “ 36 own_business_or_self_employed 99762 non-null object n”, “ 37 fill_inc_questionnaire_for_veteran’s_admin 99762 non-null object n”, “ 38 veterans_benefits 99762 non-null object n”, “ 39 weeks_worked_in_year 99762 non-null int64 n”, “ 40 year 99762 non-null object n”, “ 41 income_level 99762 non-null object n”, “dtypes: float64(1), int64(7), object(34) n”, “memory usage: 32.0+ MB n” ] } ], “source”: [ “test.info()” ] }, { “cell_type”: “markdown”, “id”: “49a71e84”, “metadata”: {}, “source”: [ “We verify if we got the same columns both on the train and the test set :” ] }, { “cell_type”: “code”, “execution_count”: 201, “id”: “ad2dcef6”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “{‘ignore’}” ] }, “execution_count”: 201, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# checking columns on test set which not in train n”, “set(test.columns).difference(set(df.columns))” ] }, { “cell_type”: “code”, “execution_count”: 202, “id”: “99c5f008”, “metadata”: {}, “outputs”: [], “source”: [ “# dropping ‘ignore’ columns n”, “test.drop(‘ignore’, inplace=True, axis=1)” ] }, { “cell_type”: “code”, “execution_count”: 203, “id”: “62418d1f”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “Index([‘age’, ‘class_of_worker’, ‘detailed_industry_recode’, n”, “ ‘detailed_occupation_recode’, ‘education’, ‘wage_per_hour’, n”, “ ‘enroll_in_edu_inst_last_wk’, ‘marital_stat’, ‘major_industry_code’, n”, “ ‘major_occupation_code’, ‘race’, ‘hispanic_origin’, ‘sex’, n”, “ ‘member_of_a_labor_union’, ‘reason_for_unemployment’, n”, “ ‘full_or_part_time_employment_stat’, ‘capital_gains’, ‘capital_losses’, n”, “ ‘dividends_from_stocks’, ‘tax_filer_stat’, n”, “ ‘region_of_previous_residence’, ‘state_of_previous_residence’, n”, “ ‘detailed_household_and_family_stat’, n”, “ ‘detailed_household_summary_in_household’, n”, “ ‘migration_code-change_in_msa’, ‘migration_code-change_in_reg’, n”, “ ‘migration_code-move_within_reg’, ‘live_in_this_house_1_year_ago’, n”, “ ‘migration_prev_res_in_sunbelt’, ‘num_persons_worked_for_employer’, n”, “ ‘family_members_under_18’, ‘country_of_birth_father’, n”, “ ‘country_of_birth_mother’, ‘country_of_birth_self’, ‘citizenship’, n”, “ ‘own_business_or_self_employed’, n”, “ ‘fill_inc_questionnaire_for_veteran’s_admin’, ‘veterans_benefits’, n”, “ ‘weeks_worked_in_year’, ‘year’, ‘income_level’], n”, “ dtype=’object’)” ] }, “execution_count”: 203, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “test.columns” ] }, { “cell_type”: “code”, “execution_count”: 204, “id”: “6fe741c5”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;age&lt;/th&gt; n”, “ &lt;th&gt;class_of_worker&lt;/th&gt; n”, “ &lt;th&gt;detailed_industry_recode&lt;/th&gt; n”, “ &lt;th&gt;detailed_occupation_recode&lt;/th&gt; n”, “ &lt;th&gt;education&lt;/th&gt; n”, “ &lt;th&gt;wage_per_hour&lt;/th&gt; n”, “ &lt;th&gt;enroll_in_edu_inst_last_wk&lt;/th&gt; n”, “ &lt;th&gt;marital_stat&lt;/th&gt; n”, “ &lt;th&gt;major_industry_code&lt;/th&gt; n”, “ &lt;th&gt;major_occupation_code&lt;/th&gt; n”, “ &lt;th&gt;race&lt;/th&gt; n”, “ &lt;th&gt;hispanic_origin&lt;/th&gt; n”, “ &lt;th&gt;sex&lt;/th&gt; n”, “ &lt;th&gt;member_of_a_labor_union&lt;/th&gt; n”, “ &lt;th&gt;reason_for_unemployment&lt;/th&gt; n”, “ &lt;th&gt;full_or_part_time_employment_stat&lt;/th&gt; n”, “ &lt;th&gt;capital_gains&lt;/th&gt; n”, “ &lt;th&gt;capital_losses&lt;/th&gt; n”, “ &lt;th&gt;dividends_from_stocks&lt;/th&gt; n”, “ &lt;th&gt;tax_filer_stat&lt;/th&gt; n”, “ &lt;th&gt;region_of_previous_residence&lt;/th&gt; n”, “ &lt;th&gt;state_of_previous_residence&lt;/th&gt; n”, “ &lt;th&gt;detailed_household_and_family_stat&lt;/th&gt; n”, “ &lt;th&gt;detailed_household_summary_in_household&lt;/th&gt; n”, “ &lt;th&gt;migration_code-change_in_msa&lt;/th&gt; n”, “ &lt;th&gt;migration_code-change_in_reg&lt;/th&gt; n”, “ &lt;th&gt;migration_code-move_within_reg&lt;/th&gt; n”, “ &lt;th&gt;live_in_this_house_1_year_ago&lt;/th&gt; n”, “ &lt;th&gt;migration_prev_res_in_sunbelt&lt;/th&gt; n”, “ &lt;th&gt;num_persons_worked_for_employer&lt;/th&gt; n”, “ &lt;th&gt;family_members_under_18&lt;/th&gt; n”, “ &lt;th&gt;country_of_birth_father&lt;/th&gt; n”, “ &lt;th&gt;country_of_birth_mother&lt;/th&gt; n”, “ &lt;th&gt;country_of_birth_self&lt;/th&gt; n”, “ &lt;th&gt;citizenship&lt;/th&gt; n”, “ &lt;th&gt;own_business_or_self_employed&lt;/th&gt; n”, “ &lt;th&gt;fill_inc_questionnaire_for_veteran’s_admin&lt;/th&gt; n”, “ &lt;th&gt;veterans_benefits&lt;/th&gt; n”, “ &lt;th&gt;weeks_worked_in_year&lt;/th&gt; n”, “ &lt;th&gt;year&lt;/th&gt; n”, “ &lt;th&gt;income_level&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;0&lt;/th&gt; n”, “ &lt;td&gt;38&lt;/td&gt; n”, “ &lt;td&gt;Private&lt;/td&gt; n”, “ &lt;td&gt;6&lt;/td&gt; n”, “ &lt;td&gt;36&lt;/td&gt; n”, “ &lt;td&gt;1st 2nd 3rd or 4th grade&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Married-civilian spouse present&lt;/td&gt; n”, “ &lt;td&gt;Manufacturing-durable goods&lt;/td&gt; n”, “ &lt;td&gt;Machine operators assmblrs &amp; inspctrs&lt;/td&gt; n”, “ &lt;td&gt;White&lt;/td&gt; n”, “ &lt;td&gt;Mexican (Mexicano)&lt;/td&gt; n”, “ &lt;td&gt;Female&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Full-time schedules&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Joint one under 65 &amp; one 65+&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Spouse of householder&lt;/td&gt; n”, “ &lt;td&gt;Spouse of householder&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;Not in universe under 1 year old&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;4&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Mexico&lt;/td&gt; n”, “ &lt;td&gt;Mexico&lt;/td&gt; n”, “ &lt;td&gt;Mexico&lt;/td&gt; n”, “ &lt;td&gt;Foreign born- Not a citizen of U S&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;2&lt;/td&gt; n”, “ &lt;td&gt;12&lt;/td&gt; n”, “ &lt;td&gt;95&lt;/td&gt; n”, “ &lt;td&gt;- 50000.&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;1&lt;/th&gt; n”, “ &lt;td&gt;44&lt;/td&gt; n”, “ &lt;td&gt;Self-employed-not incorporated&lt;/td&gt; n”, “ &lt;td&gt;37&lt;/td&gt; n”, “ &lt;td&gt;12&lt;/td&gt; n”, “ &lt;td&gt;Associates degree-occup /vocational&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Married-civilian spouse present&lt;/td&gt; n”, “ &lt;td&gt;Business and repair services&lt;/td&gt; n”, “ &lt;td&gt;Professional specialty&lt;/td&gt; n”, “ &lt;td&gt;White&lt;/td&gt; n”, “ &lt;td&gt;All other&lt;/td&gt; n”, “ &lt;td&gt;Female&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;PT for econ reasons usually PT&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;2500&lt;/td&gt; n”, “ &lt;td&gt;Joint both under 65&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Spouse of householder&lt;/td&gt; n”, “ &lt;td&gt;Spouse of householder&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;Not in universe under 1 year old&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;1&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;United-States&lt;/td&gt; n”, “ &lt;td&gt;United-States&lt;/td&gt; n”, “ &lt;td&gt;United-States&lt;/td&gt; n”, “ &lt;td&gt;Native- Born in the United States&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;2&lt;/td&gt; n”, “ &lt;td&gt;26&lt;/td&gt; n”, “ &lt;td&gt;95&lt;/td&gt; n”, “ &lt;td&gt;- 50000.&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2&lt;/th&gt; n”, “ &lt;td&gt;2&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Children&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Never married&lt;/td&gt; n”, “ &lt;td&gt;Not in universe or children&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;White&lt;/td&gt; n”, “ &lt;td&gt;Mexican-American&lt;/td&gt; n”, “ &lt;td&gt;Male&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Children or Armed Forces&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Nonfiler&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;Child &lt;18 never marr not in subfamily&lt;/td&gt; n”, “ &lt;td&gt;Child under 18 never married&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;Not in universe under 1 year old&lt;/td&gt; n”, “ &lt;td&gt;?&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Both parents present&lt;/td&gt; n”, “ &lt;td&gt;United-States&lt;/td&gt; n”, “ &lt;td&gt;United-States&lt;/td&gt; n”, “ &lt;td&gt;United-States&lt;/td&gt; n”, “ &lt;td&gt;Native- Born in the United States&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;Not in universe&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;0&lt;/td&gt; n”, “ &lt;td&gt;95&lt;/td&gt; n”, “ &lt;td&gt;- 50000.&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ age class_of_worker detailed_industry_recode n”, “0 38 Private 6 n”, “1 44 Self-employed-not incorporated 37 n”, “2 2 Not in universe 0 n”, “ n”, “ detailed_occupation_recode education n”, “0 36 1st 2nd 3rd or 4th grade n”, “1 12 Associates degree-occup /vocational n”, “2 0 Children n”, “ n”, “ wage_per_hour enroll_in_edu_inst_last_wk marital_stat n”, “0 0 Not in universe Married-civilian spouse present n”, “1 0 Not in universe Married-civilian spouse present n”, “2 0 Not in universe Never married n”, “ n”, “ major_industry_code major_occupation_code n”, “0 Manufacturing-durable goods Machine operators assmblrs &amp; inspctrs n”, “1 Business and repair services Professional specialty n”, “2 Not in universe or children Not in universe n”, “ n”, “ race hispanic_origin sex member_of_a_labor_union n”, “0 White Mexican (Mexicano) Female Not in universe n”, “1 White All other Female Not in universe n”, “2 White Mexican-American Male Not in universe n”, “ n”, “ reason_for_unemployment full_or_part_time_employment_stat capital_gains n”, “0 Not in universe Full-time schedules 0 n”, “1 Not in universe PT for econ reasons usually PT 0 n”, “2 Not in universe Children or Armed Forces 0 n”, “ n”, “ capital_losses dividends_from_stocks tax_filer_stat n”, “0 0 0 Joint one under 65 &amp; one 65+ n”, “1 0 2500 Joint both under 65 n”, “2 0 0 Nonfiler n”, “ n”, “ region_of_previous_residence state_of_previous_residence n”, “0 Not in universe Not in universe n”, “1 Not in universe Not in universe n”, “2 Not in universe Not in universe n”, “ n”, “ detailed_household_and_family_stat n”, “0 Spouse of householder n”, “1 Spouse of householder n”, “2 Child &lt;18 never marr not in subfamily n”, “ n”, “ detailed_household_summary_in_household migration_code-change_in_msa n”, “0 Spouse of householder ? n”, “1 Spouse of householder ? n”, “2 Child under 18 never married ? n”, “ n”, “ migration_code-change_in_reg migration_code-move_within_reg n”, “0 ? ? n”, “1 ? ? n”, “2 ? ? n”, “ n”, “ live_in_this_house_1_year_ago migration_prev_res_in_sunbelt n”, “0 Not in universe under 1 year old ? n”, “1 Not in universe under 1 year old ? n”, “2 Not in universe under 1 year old ? n”, “ n”, “ num_persons_worked_for_employer family_members_under_18 n”, “0 4 Not in universe n”, “1 1 Not in universe n”, “2 0 Both parents present n”, “ n”, “ country_of_birth_father country_of_birth_mother country_of_birth_self n”, “0 Mexico Mexico Mexico n”, “1 United-States United-States United-States n”, “2 United-States United-States United-States n”, “ n”, “ citizenship own_business_or_self_employed n”, “0 Foreign born- Not a citizen of U S 0 n”, “1 Native- Born in the United States 0 n”, “2 Native- Born in the United States 0 n”, “ n”, “ fill_inc_questionnaire_for_veteran’s_admin veterans_benefits n”, “0 Not in universe 2 n”, “1 Not in universe 2 n”, “2 Not in universe 0 n”, “ n”, “ weeks_worked_in_year year income_level n”, “0 12 95 - 50000. n”, “1 26 95 - 50000. n”, “2 0 95 - 50000. “ ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “# display first rows of the test set n”, “with pd.option_context(‘display.max_rows’, None, ‘display.max_columns’, None): n”, “ display(test.head(3))” ] }, { “cell_type”: “code”, “execution_count”: 205, “id”: “91ca77d3”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “((199523, 41), (99762, 41))” ] }, “execution_count”: 205, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “df.shape, test.shape” ] }, { “cell_type”: “markdown”, “id”: “175b711d”, “metadata”: {}, “source”: [ “# Looking at the data” ] }, { “cell_type”: “markdown”, “id”: “a043dacb”, “metadata”: {}, “source”: [ “The most important data column is the dependent variable—that is, the one we want to predict which is income_level :” ] }, { “cell_type”: “code”, “execution_count”: 206, “id”: “889ecb4d”, “metadata”: {}, “outputs”: [], “source”: [ “dep_var = ‘income_level’” ] }, { “cell_type”: “markdown”, “id”: “f7587814”, “metadata”: {}, “source”: [ “Let’s see its distribution :” ] }, { “cell_type”: “code”, “execution_count”: 207, “id”: “ad282948”, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “ - 50000. 0.937942 n”, “ 50000+. 0.062058 n”, “Name: income_level, dtype: float64 n” ] }, { “data”: { “text/plain”: [ “&lt;matplotlib.axes._subplots.AxesSubplot at 0x13edbb6d0&gt;” ] }, “execution_count”: 207, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “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 n”, “text/plain”: [ “&lt;Figure size 432x288 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “print(df[dep_var].value_counts(normalize = True)) n”, “df[dep_var].value_counts(normalize = True).plot(kind=’bar’, n”, “ edgecolor=’black’, n”, “ color=’blue’, n”, “ title=’income_level’)” ] }, { “cell_type”: “markdown”, “id”: “e4820092”, “metadata”: {}, “source”: [ “We have an imbalanced dataset where the income level of -50k is representing more than 93% of the total records.” ] }, { “cell_type”: “markdown”, “id”: “db80053f”, “metadata”: {}, “source”: [ “Next, we automatically handle which columns are continuous and which are categorical : n”, “ n” ] }, { “cell_type”: “code”, “execution_count”: 208, “id”: “88665c34”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “([‘age’, n”, “ ‘wage_per_hour’, n”, “ ‘capital_gains’, n”, “ ‘capital_losses’, n”, “ ‘dividends_from_stocks’, n”, “ ‘num_persons_worked_for_employer’, n”, “ ‘weeks_worked_in_year’], n”, “ [‘class_of_worker’, n”, “ ‘detailed_industry_recode’, n”, “ ‘detailed_occupation_recode’, n”, “ ‘education’, n”, “ ‘enroll_in_edu_inst_last_wk’, n”, “ ‘marital_stat’, n”, “ ‘major_industry_code’, n”, “ ‘major_occupation_code’, n”, “ ‘race’, n”, “ ‘hispanic_origin’, n”, “ ‘sex’, n”, “ ‘member_of_a_labor_union’, n”, “ ‘reason_for_unemployment’, n”, “ ‘full_or_part_time_employment_stat’, n”, “ ‘tax_filer_stat’, n”, “ ‘region_of_previous_residence’, n”, “ ‘state_of_previous_residence’, n”, “ ‘detailed_household_and_family_stat’, n”, “ ‘detailed_household_summary_in_household’, n”, “ ‘migration_code-change_in_msa’, n”, “ ‘migration_code-change_in_reg’, n”, “ ‘migration_code-move_within_reg’, n”, “ ‘live_in_this_house_1_year_ago’, n”, “ ‘migration_prev_res_in_sunbelt’, n”, “ ‘family_members_under_18’, n”, “ ‘country_of_birth_father’, n”, “ ‘country_of_birth_mother’, n”, “ ‘country_of_birth_self’, n”, “ ‘citizenship’, n”, “ ‘own_business_or_self_employed’, n”, “ &quot;fill_inc_questionnaire_for_veteran’s_admin&quot;, n”, “ ‘veterans_benefits’, n”, “ ‘year’])” ] }, “execution_count”: 208, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# get categorical and numerical variables n”, “def cont_cat_split(df, dep_var=None): n”, “ &quot;Helper function that returns column names of cont and cat variables from given df.&quot; n”, “ cont_names, cat_names = [], [] n”, “ for label in df: n”, “ if label in [dep_var]: continue n”, “ if (pd.api.types.is_integer_dtype(df[label].dtype) or n”, “ pd.api.types.is_float_dtype(df[label].dtype)): n”, “ cont_names.append(label) n”, “ else: cat_names.append(label) n”, “ return cont_names, cat_names n”, “ n”, “cont, cat = cont_cat_split(df, dep_var= dep_var) n”, “cont , cat” ] }, { “cell_type”: “markdown”, “id”: “ca058693”, “metadata”: {}, “source”: [ “Let’s start by checking the modalties of our categorical variables :” ] }, { “cell_type”: “markdown”, “id”: “ad8af32f”, “metadata”: {}, “source”: [ “Some categorical features are purely nominal-having multiple modalities (with modality ? for nan values) and n”, “others are ordinal columns like education and year:” ] }, { “cell_type”: “code”, “execution_count”: 210, “id”: “b48e2755”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(array([’ High school graduate’, ‘ Some college but no degree’, n”, “ ‘ 10th grade’, ‘ Children’, ‘ Bachelors degree(BA AB BS)’, n”, “ ‘ Masters degree(MA MS MEng MEd MSW MBA)’, ‘ Less than 1st grade’, n”, “ ‘ Associates degree-academic program’, ‘ 7th and 8th grade’, n”, “ ‘ 12th grade no diploma’, ‘ Associates degree-occup /vocational’, n”, “ ‘ Prof school degree (MD DDS DVM LLB JD)’, ‘ 5th or 6th grade’, n”, “ ‘ 11th grade’, ‘ Doctorate degree(PhD EdD)’, ‘ 9th grade’, n”, “ ‘ 1st 2nd 3rd or 4th grade’], dtype=object), n”, “ 17)” ] }, “execution_count”: 210, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Ediucation modalities n”, “df[‘education’].unique(), df[‘education’].nunique()” ] }, { “cell_type”: “code”, “execution_count”: 211, “id”: “47f69489”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(array([’ 95’, ‘ 94’], dtype=object), 2)” ] }, “execution_count”: 211, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Year modalities n”, “df[‘year’].unique(), df[‘year’].nunique()” ] }, { “cell_type”: “markdown”, “id”: “5e4284df”, “metadata”: {}, “source”: [ “We can tell Pandas about a suitable ordering of these levels like so:” ] }, { “cell_type”: “code”, “execution_count”: 212, “id”: “36f81153”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “17” ] }, “execution_count”: 212, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Setting the order of education variable n”, “education = ‘ Children’,’ Less than 1st grade’,’ 1st 2nd 3rd or 4th grade’,’ 5th or 6th grade’, n”, “’ 7th and 8th grade’,’ 9th grade’,’ 10th grade’,’ 11th grade’, ‘ 12th grade no diploma’, n”, “’ High school graduate’, ‘ Associates degree-academic program’,’ Associates degree-occup /vocational’, n”, “’ Prof school degree (MD DDS DVM LLB JD)’,’ Some college but no degree’,’ Bachelors degree(BA AB BS)’, n”, “’ Masters degree(MA MS MEng MEd MSW MBA)’,’ Doctorate degree(PhD EdD)’ n”, “len(education)” ] }, { “cell_type”: “code”, “execution_count”: 213, “id”: “5a9a26b2”, “metadata”: {}, “outputs”: [], “source”: [ “# Setting the order of year variaable n”, “year = ‘94’, ‘95’” ] }, { “cell_type”: “code”, “execution_count”: 214, “id”: “4e09cb41”, “metadata”: {}, “outputs”: [ { “name”: “stderr”, “output_type”: “stream”, “text”: [ “/Users/rmbp/opt/anaconda3/lib/python3.7/site-packages/pandas/core/arrays/categorical.py:2631: FutureWarning: The inplace parameter in pandas.Categorical.set_categories is deprecated and will be removed in a future version. Removing unused categories will always return a new Categorical object. n”, “ res = method(*args, kwargs) n” ] } ], “source”: [ “# apply the defined ordering fot our data : n”, “df[‘education’] = df[‘education’].astype(‘category’) n”, “df[‘education’].cat.set_categories(education, ordered=True, inplace=True) n”, “ n”, “df[‘year’] = df[‘year’].astype(‘category’) n”, “df[‘year’].cat.set_categories(year, ordered=True, inplace=True) n”, “ n”, “#Same for test set : n”, “test[‘education’] = test[‘education’].astype(‘category’) n”, “test[‘education’].cat.set_categories(education, ordered=True, inplace=True) n”, “ n”, “test[‘year’] = test[‘year’].astype(‘category’) n”, “test[‘year’].cat.set_categories(year, ordered=True, inplace=True)” ] }, { “cell_type”: “markdown”, “id”: “0665fa72”, “metadata”: {}, “source”: [ “Lets check our continous features: n”, “The **describe() method shows a summary of the numerical attributes” ] }, { “cell_type”: “code”, “execution_count”: 215, “id”: “9ed133bb”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;age&lt;/th&gt; n”, “ &lt;th&gt;wage_per_hour&lt;/th&gt; n”, “ &lt;th&gt;capital_gains&lt;/th&gt; n”, “ &lt;th&gt;capital_losses&lt;/th&gt; n”, “ &lt;th&gt;dividends_from_stocks&lt;/th&gt; n”, “ &lt;th&gt;num_persons_worked_for_employer&lt;/th&gt; n”, “ &lt;th&gt;weeks_worked_in_year&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;count&lt;/th&gt; n”, “ &lt;td&gt;199523.000000&lt;/td&gt; n”, “ &lt;td&gt;199523.000000&lt;/td&gt; n”, “ &lt;td&gt;199523.00000&lt;/td&gt; n”, “ &lt;td&gt;199523.000000&lt;/td&gt; n”, “ &lt;td&gt;199523.000000&lt;/td&gt; n”, “ &lt;td&gt;199523.000000&lt;/td&gt; n”, “ &lt;td&gt;199523.000000&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;mean&lt;/th&gt; n”, “ &lt;td&gt;34.494199&lt;/td&gt; n”, “ &lt;td&gt;55.426908&lt;/td&gt; n”, “ &lt;td&gt;434.71899&lt;/td&gt; n”, “ &lt;td&gt;37.313788&lt;/td&gt; n”, “ &lt;td&gt;197.529533&lt;/td&gt; n”, “ &lt;td&gt;1.956180&lt;/td&gt; n”, “ &lt;td&gt;23.174897&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;std&lt;/th&gt; n”, “ &lt;td&gt;22.310895&lt;/td&gt; n”, “ &lt;td&gt;274.896454&lt;/td&gt; n”, “ &lt;td&gt;4697.53128&lt;/td&gt; n”, “ &lt;td&gt;271.896428&lt;/td&gt; n”, “ &lt;td&gt;1984.163658&lt;/td&gt; n”, “ &lt;td&gt;2.365126&lt;/td&gt; n”, “ &lt;td&gt;24.411488&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;min&lt;/th&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.00000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;25%&lt;/th&gt; n”, “ &lt;td&gt;15.000000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.00000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;50%&lt;/th&gt; n”, “ &lt;td&gt;33.000000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.00000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;1.000000&lt;/td&gt; n”, “ &lt;td&gt;8.000000&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;75%&lt;/th&gt; n”, “ &lt;td&gt;50.000000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.00000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;0.000000&lt;/td&gt; n”, “ &lt;td&gt;4.000000&lt;/td&gt; n”, “ &lt;td&gt;52.000000&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;max&lt;/th&gt; n”, “ &lt;td&gt;90.000000&lt;/td&gt; n”, “ &lt;td&gt;9999.000000&lt;/td&gt; n”, “ &lt;td&gt;99999.00000&lt;/td&gt; n”, “ &lt;td&gt;4608.000000&lt;/td&gt; n”, “ &lt;td&gt;99999.000000&lt;/td&gt; n”, “ &lt;td&gt;6.000000&lt;/td&gt; n”, “ &lt;td&gt;52.000000&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ age wage_per_hour capital_gains capital_losses n”, “count 199523.000000 199523.000000 199523.00000 199523.000000 n”, “mean 34.494199 55.426908 434.71899 37.313788 n”, “std 22.310895 274.896454 4697.53128 271.896428 n”, “min 0.000000 0.000000 0.00000 0.000000 n”, “25% 15.000000 0.000000 0.00000 0.000000 n”, “50% 33.000000 0.000000 0.00000 0.000000 n”, “75% 50.000000 0.000000 0.00000 0.000000 n”, “max 90.000000 9999.000000 99999.00000 4608.000000 n”, “ n”, “ dividends_from_stocks num_persons_worked_for_employer n”, “count 199523.000000 199523.000000 n”, “mean 197.529533 1.956180 n”, “std 1984.163658 2.365126 n”, “min 0.000000 0.000000 n”, “25% 0.000000 0.000000 n”, “50% 0.000000 1.000000 n”, “75% 0.000000 4.000000 n”, “max 99999.000000 6.000000 n”, “ n”, “ weeks_worked_in_year n”, “count 199523.000000 n”, “mean 23.174897 n”, “std 24.411488 n”, “min 0.000000 n”, “25% 0.000000 n”, “50% 8.000000 n”, “75% 52.000000 n”, “max 52.000000 “ ] }, “execution_count”: 215, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “df[cont].describe()” ] }, { “cell_type”: “markdown”, “id”: “3eaef32c”, “metadata”: {}, “source”: [ “The count, mean, min, and max rows are self-explanatory.The std row shows the standard deviation, which measures how dispersed the values are. The 25%, 50%, and 75% rows show the corresponding percentiles. n”, “ n”, “We plot a histogram for each numerical attribute :” ] }, { “cell_type”: “code”, “execution_count”: 216, “id”: “d5e64c88”, “metadata”: {}, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 1440x1080 with 9 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “%matplotlib inline n”, “import matplotlib.pyplot as plt n”, “df[cont].hist(bins=50, figsize=(20,15)) n”, “plt.show()” ] }, { “cell_type”: “markdown”, “id”: “87670eb2”, “metadata”: {}, “source”: [ “- We can see that these attributes have very different scales. n”, “ n”, “- Some numerical varaibles are countinous like age and others are discrete and finite like weeks_worked_in_year or infinete num_persons_worked_for_employer. n”, “ n”, “- Some features as wage_per_hour,capital_gains,capital_losses,dividends_from_stocks are tail-heavy: they extend much farther to the median right with high coefficient of variation : n” ] }, { “cell_type”: “code”, “execution_count”: 217, “id”: “4152563e”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “&lt;matplotlib.axes._subplots.AxesSubplot at 0x12737f910&gt;” ] }, “execution_count”: 217, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 720x360 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “df[cont].boxplot(column=[‘wage_per_hour’,’capital_gains’,’capital_losses’,’dividends_from_stocks’], n”, “ figsize=(10,5))” ] }, { “cell_type”: “markdown”, “id”: “04d92c04”, “metadata”: {}, “source”: [ “We can see the presence of extreme values for those features. n”, “ n”, “Using the skewness value, which explains the extent to which the data is normally distributed, in order to confirm that. n”, “Ideally, the skewness value should be between -1 and +1, and any major deviation from this range indicates the presence of extreme values. n”, “ n”, “We can calculate the skwenss value :” ] }, { “cell_type”: “code”, “execution_count”: 218, “id”: “e38b02e2”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “wage_per_hour 8.935097 n”, “capital_gains 18.990822 n”, “capital_losses 7.632565 n”, “dividends_from_stocks 27.786502 n”, “dtype: float64” ] }, “execution_count”: 218, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# skewness value n”, “df[[‘wage_per_hour’,’capital_gains’,’capital_losses’,’dividends_from_stocks’]].skew()” ] }, { “cell_type”: “markdown”, “id”: “4ea8eca4”, “metadata”: {}, “source”: [ “Using the IQR score, let’s see the number of obseravtions that are not in the (Q1 - 1.5 IQR) and (Q3 + 1.5 IQR) range :” ] }, { “cell_type”: “code”, “execution_count”: 219, “id”: “bee28508”, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “wage_per_hour 0.0 n”, “capital_gains 0.0 n”, “capital_losses 0.0 n”, “dividends_from_stocks 0.0 n”, “dtype: float64 n” ] } ], “source”: [ “# IQR score n”, “Q1 = df[[‘wage_per_hour’,’capital_gains’,’capital_losses’,’dividends_from_stocks’]].quantile(0.25) n”, “Q3 = df[[‘wage_per_hour’,’capital_gains’,’capital_losses’,’dividends_from_stocks’]].quantile(0.75) n”, “IQR = Q3 - Q1 n”, “print(IQR)” ] }, { “cell_type”: “code”, “execution_count”: 220, “id”: “6151f2e8”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “((199523, 4), (38859, 4), 0.1947595014108649)” ] }, “execution_count”: 220, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# number of observation out of the definied range n”, “out = df[[‘wage_per_hour’,’capital_gains’,’capital_losses’,’dividends_from_stocks’]] n”, “df_out = out[((out &lt; (Q1 - 1.5 * IQR)) |(out &gt; (Q3 + 1.5 * IQR))).any(axis=1)] n”, “ n”, “out.shape, df_out.shape, df_out.shape[0]/out.shape[0]” ] }, { “cell_type”: “markdown”, “id”: “561d52ac”, “metadata”: {}, “source”: [ “From 199.523 observation of the selcted features, 38.859 records (19%) represent extrem values.” ] }, { “cell_type”: “markdown”, “id”: “955b8bcb”, “metadata”: {}, “source”: [ “For weeks_worked_in_year :” ] }, { “cell_type”: “code”, “execution_count”: 221, “id”: “525f0c73”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “&lt;matplotlib.axes._subplots.AxesSubplot at 0x133075f50&gt;” ] }, “execution_count”: 221, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 720x360 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “df[‘weeks_worked_in_year’].plot( kind=’hist’, n”, “ bins=53, n”, “ edgecolor=’black’, n”, “ color=’blue’, n”, “ title=’weeks worked in a year’, n”, “ figsize=(10,5))” ] }, { “cell_type”: “markdown”, “id”: “849c1c1b”, “metadata”: {}, “source”: [ “For num_persons_worked_for_employer :” ] }, { “cell_type”: “code”, “execution_count”: 222, “id”: “a727d335”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “&lt;matplotlib.axes._subplots.AxesSubplot at 0x133b37cd0&gt;” ] }, “execution_count”: 222, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 504x360 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “df[‘num_persons_worked_for_employer’].plot( kind=’hist’, n”, “ n”, “ edgecolor=’black’, n”, “ color=’blue’, n”, “ title=’num_persons_worked_for_employer’, n”, “ figsize=(7,5)) n” ] }, { “cell_type”: “markdown”, “id”: “b6ccf2a1”, “metadata”: {}, “source”: [ “We notice an increase in the 7th bins num_persons_worked_for_employer=6. Check if this variable is capped ?” ] }, { “cell_type”: “markdown”, “id”: “f204a951”, “metadata”: {}, “source”: [ “# Exploratory data analysis” ] }, { “cell_type”: “markdown”, “id”: “05884b2b”, “metadata”: {}, “source”: [ “- Starting with numerical variables :” ] }, { “cell_type”: “code”, “execution_count”: 223, “id”: “c4b6ac5c”, “metadata”: {}, “outputs”: [], “source”: [ “import seaborn as sns” ] }, { “cell_type”: “code”, “execution_count”: 224, “id”: “c19120b5”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(array([0]), &lt;a list of 1 Text xticklabel objects&gt;)” ] }, “execution_count”: 224, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 432x360 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “data_dia = df[dep_var] n”, “data = df[[‘age’]] n”, “data = pd.concat([data_dia,data],axis=1) n”, “data = pd.melt(data,id_vars=&quot;income_level&quot;, n”, “ var_name=&quot;features&quot;, n”, “ value_name=’value’) n”, “plt.figure(figsize=(6,5)) n”, “sns.violinplot(x=&quot;features&quot;, y=&quot;value&quot;, hue=&quot;income_level&quot;, data=data,split=True, inner=&quot;quartile&quot;) n”, “plt.xticks(rotation=90)” ] }, { “cell_type”: “markdown”, “id”: “5ccb10ab”, “metadata”: {}, “source”: [ “For the age feature, we can see that the medians of the income levels +/- 50k look separated. n”, “The income level of +50k with a median of 50 years old has a lower interquntile range (IQR) with value spread of 10 years. Whereas The income level of -50k has a median of 30 years old has and interquantile range (IQR) of 40 years. n”, “So, age can be good for classification.” ] }, { “cell_type”: “markdown”, “id”: “29bdcdad”, “metadata”: {}, “source”: [ “Let’s look at the weeks_worked_in_year feature :” ] }, { “cell_type”: “code”, “execution_count”: 225, “id”: “d20805d3”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;income_level&lt;/th&gt; n”, “ &lt;th&gt;- 50000.&lt;/th&gt; n”, “ &lt;th&gt;50000+.&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;weeks_worked_in_year&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;0&lt;/th&gt; n”, “ &lt;td&gt;99.379057&lt;/td&gt; n”, “ &lt;td&gt;0.620943&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;1&lt;/th&gt; n”, “ &lt;td&gt;98.275862&lt;/td&gt; n”, “ &lt;td&gt;1.724138&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2&lt;/th&gt; n”, “ &lt;td&gt;98.908297&lt;/td&gt; n”, “ &lt;td&gt;1.091703&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;50&lt;/th&gt; n”, “ &lt;td&gt;89.279514&lt;/td&gt; n”, “ &lt;td&gt;10.720486&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;51&lt;/th&gt; n”, “ &lt;td&gt;89.010989&lt;/td&gt; n”, “ &lt;td&gt;10.989011&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;52&lt;/th&gt; n”, “ &lt;td&gt;85.199249&lt;/td&gt; n”, “ &lt;td&gt;14.800751&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “income_level - 50000. 50000+. n”, “weeks_worked_in_year n”, “0 99.379057 0.620943 n”, “1 98.275862 1.724138 n”, “2 98.908297 1.091703 n”, “50 89.279514 10.720486 n”, “51 89.010989 10.989011 n”, “52 85.199249 14.800751” ] }, “execution_count”: 225, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# get the number of income class in each week n”, “weeks_worked_in_year = df.groupby([&quot;weeks_worked_in_year&quot;, &quot;income_level&quot;]) n”, “ .size() n”, “ .groupby(level=0).apply(lambda x: 100*x/x.sum()).unstack() n”, “ n”, “# print the percentage class for the first and last weeks n”, “weeks_worked_in_year.iloc[[0,1,2, -3,-2,-1]]” ] }, { “cell_type”: “code”, “execution_count”: 226, “id”: “838a458d”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “&lt;matplotlib.axes._subplots.AxesSubplot at 0x131088ad0&gt;” ] }, “execution_count”: 226, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 864x360 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “weeks_worked_in_year.plot(kind=’bar’, n”, “ stacked=True, n”, “ edgecolor=’black’, n”, “ figsize=(12,5))” ] }, { “cell_type”: “markdown”, “id”: “fa2d1f38”, “metadata”: {}, “source”: [ “We can see that the propotion of people making more than 50k a year is increasing with the number of working weeks in a given year where it can reach more than 14% for those working 52 weeks . n”, “However, the -50k level of income is representing the higher propotion regardless of the number of working weeks. n”, “We notice that among those how don’t work at all, 0.6% still make more than 50k a year.” ] }, { “cell_type”: “markdown”, “id”: “634da7c4”, “metadata”: {}, “source”: [ “Let’s look at num_persons_worked_for_employer :” ] }, { “cell_type”: “code”, “execution_count”: 227, “id”: “790ef8bb”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;income_level&lt;/th&gt; n”, “ &lt;th&gt;- 50000.&lt;/th&gt; n”, “ &lt;th&gt;50000+.&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;num_persons_worked_for_employer&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;0&lt;/th&gt; n”, “ &lt;td&gt;99.379057&lt;/td&gt; n”, “ &lt;td&gt;0.620943&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;1&lt;/th&gt; n”, “ &lt;td&gt;90.942923&lt;/td&gt; n”, “ &lt;td&gt;9.057077&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2&lt;/th&gt; n”, “ &lt;td&gt;91.687333&lt;/td&gt; n”, “ &lt;td&gt;8.312667&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;3&lt;/th&gt; n”, “ &lt;td&gt;90.763501&lt;/td&gt; n”, “ &lt;td&gt;9.236499&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;4&lt;/th&gt; n”, “ &lt;td&gt;89.776758&lt;/td&gt; n”, “ &lt;td&gt;10.223242&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;5&lt;/th&gt; n”, “ &lt;td&gt;88.980944&lt;/td&gt; n”, “ &lt;td&gt;11.019056&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;6&lt;/th&gt; n”, “ &lt;td&gt;84.990825&lt;/td&gt; n”, “ &lt;td&gt;15.009175&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “income_level - 50000. 50000+. n”, “num_persons_worked_for_employer n”, “0 99.379057 0.620943 n”, “1 90.942923 9.057077 n”, “2 91.687333 8.312667 n”, “3 90.763501 9.236499 n”, “4 89.776758 10.223242 n”, “5 88.980944 11.019056 n”, “6 84.990825 15.009175” ] }, “execution_count”: 227, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “num_persons_worked_for_employer = df.groupby([&quot;num_persons_worked_for_employer&quot;, &quot;income_level&quot;]) n”, “ .size() n”, “ .groupby(level=0).apply(lambda x: 100*x/x.sum()).unstack() n”, “ n”, “num_persons_worked_for_employer” ] }, { “cell_type”: “code”, “execution_count”: 228, “id”: “4578dde9”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “&lt;matplotlib.axes._subplots.AxesSubplot at 0x1397c9990&gt;” ] }, “execution_count”: 228, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 864x360 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “num_persons_worked_for_employer.plot(kind=’bar’, n”, “ stacked=True, n”, “ edgecolor=’black’, n”, “ figsize=(12,5))” ] }, { “cell_type”: “markdown”, “id”: “623b636f”, “metadata”: {}, “source”: [ “The proportion of +50k income level increases with the number of the num_preson_worked_for_employer where it reaches 16% for num_preson_worked_for_employer= 6.” ] }, { “cell_type”: “markdown”, “id”: “7a9a7e78”, “metadata”: {}, “source”: [ “Let’s see the average of wage_per_hour,capital_gains,capital_losses,dividends_from_stocks across the income levels :” ] }, { “cell_type”: “code”, “execution_count”: 229, “id”: “f5ffb2d0”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;wage_per_hour&lt;/th&gt; n”, “ &lt;th&gt;capital_gains&lt;/th&gt; n”, “ &lt;th&gt;capital_losses&lt;/th&gt; n”, “ &lt;th&gt;dividends_from_stocks&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;income_level&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;- 50000.&lt;/th&gt; n”, “ &lt;td&gt;53.692526&lt;/td&gt; n”, “ &lt;td&gt;143.848013&lt;/td&gt; n”, “ &lt;td&gt;27.003730&lt;/td&gt; n”, “ &lt;td&gt;107.816518&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;50000+.&lt;/th&gt; n”, “ &lt;td&gt;81.640284&lt;/td&gt; n”, “ &lt;td&gt;4830.930060&lt;/td&gt; n”, “ &lt;td&gt;193.139557&lt;/td&gt; n”, “ &lt;td&gt;1553.448070&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ wage_per_hour capital_gains capital_losses n”, “income_level n”, “ - 50000. 53.692526 143.848013 27.003730 n”, “ 50000+. 81.640284 4830.930060 193.139557 n”, “ n”, “ dividends_from_stocks n”, “income_level n”, “ - 50000. 107.816518 n”, “ 50000+. 1553.448070 “ ] }, “execution_count”: 229, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 720x360 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “avg = df[[‘wage_per_hour’,’capital_gains’,’capital_losses’,’dividends_from_stocks’,’income_level’]] n”, “.groupby(‘income_level’) n”, “.mean() n”, “ n”, “avg.plot(kind=’bar’, title = ‘average across income levels’, figsize=(10,5)) n”, “ n”, “avg” ] }, { “cell_type”: “markdown”, “id”: “c0a0124d”, “metadata”: {}, “source”: [ “We can see that people making more than 50k a year, have on average, higher wage per hour,higher return on capital asset and dividends from stock options.” ] }, { “cell_type”: “markdown”, “id”: “f2934140”, “metadata”: {}, “source”: [ “- Next, let’s analyse some categorical variables :” ] }, { “cell_type”: “code”, “execution_count”: 230, “id”: “25e36a69”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;style type=&quot;text/css&quot;&gt; n”, “&lt;/style&gt; n”, “&lt;table id=&quot;T_422b8&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr&gt; n”, “ &lt;th class=&quot;index_name level0&quot; &gt;education&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col0&quot; &gt; Children&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col1&quot; &gt; Less than 1st grade&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col2&quot; &gt; 1st 2nd 3rd or 4th grade&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col3&quot; &gt; 5th or 6th grade&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col4&quot; &gt; 7th and 8th grade&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col5&quot; &gt; 9th grade&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col6&quot; &gt; 10th grade&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col7&quot; &gt; 11th grade&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col8&quot; &gt; 12th grade no diploma&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col9&quot; &gt; High school graduate&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col10&quot; &gt; Associates degree-academic program&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col11&quot; &gt; Associates degree-occup /vocational&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col12&quot; &gt; Prof school degree (MD DDS DVM LLB JD)&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col13&quot; &gt; Some college but no degree&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col14&quot; &gt; Bachelors degree(BA AB BS)&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col15&quot; &gt; Masters degree(MA MS MEng MEd MSW MBA)&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col16&quot; &gt; Doctorate degree(PhD EdD)&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col17&quot; &gt;All&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th class=&quot;index_name level0&quot; &gt;income_level&lt;/th&gt; n”, “ &lt;th class=&quot;blank col0&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col1&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col2&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col3&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col4&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col5&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col6&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col7&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col8&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col9&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col10&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col11&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col12&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col13&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col14&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col15&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col16&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col17&quot; &gt; &lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th id=&quot;T_422b8level0_row0&quot; class=&quot;row_heading level0 row0&quot; &gt; - 50000.&lt;/th&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col0&quot; class=&quot;data row0 col0&quot; &gt;100.00%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col1&quot; class=&quot;data row0 col1&quot; &gt;99.88%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col2&quot; class=&quot;data row0 col2&quot; &gt;99.28%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col3&quot; class=&quot;data row0 col3&quot; &gt;99.33%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col4&quot; class=&quot;data row0 col4&quot; &gt;99.10%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col5&quot; class=&quot;data row0 col5&quot; &gt;99.39%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col6&quot; class=&quot;data row0 col6&quot; &gt;99.18%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col7&quot; class=&quot;data row0 col7&quot; &gt;98.98%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col8&quot; class=&quot;data row0 col8&quot; &gt;98.40%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col9&quot; class=&quot;data row0 col9&quot; &gt;96.12%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col10&quot; class=&quot;data row0 col10&quot; &gt;90.56%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col11&quot; class=&quot;data row0 col11&quot; &gt;92.29%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col12&quot; class=&quot;data row0 col12&quot; &gt;45.96%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col13&quot; class=&quot;data row0 col13&quot; &gt;93.58%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col14&quot; class=&quot;data row0 col14&quot; &gt;80.29%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col15&quot; class=&quot;data row0 col15&quot; &gt;68.84%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col16&quot; class=&quot;data row0 col16&quot; &gt;47.98%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row0_col17&quot; class=&quot;data row0 col17&quot; &gt;93.79%&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th id=&quot;T_422b8_level0_row1&quot; class=&quot;row_heading level0 row1&quot; &gt; 50000+.&lt;/th&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col0&quot; class=&quot;data row1 col0&quot; &gt;0.00%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col1&quot; class=&quot;data row1 col1&quot; &gt;0.12%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col2&quot; class=&quot;data row1 col2&quot; &gt;0.72%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col3&quot; class=&quot;data row1 col3&quot; &gt;0.67%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col4&quot; class=&quot;data row1 col4&quot; &gt;0.90%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col5&quot; class=&quot;data row1 col5&quot; &gt;0.61%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col6&quot; class=&quot;data row1 col6&quot; &gt;0.82%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col7&quot; class=&quot;data row1 col7&quot; &gt;1.02%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col8&quot; class=&quot;data row1 col8&quot; &gt;1.60%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col9&quot; class=&quot;data row1 col9&quot; &gt;3.88%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col10&quot; class=&quot;data row1 col10&quot; &gt;9.44%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col11&quot; class=&quot;data row1 col11&quot; &gt;7.71%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col12&quot; class=&quot;data row1 col12&quot; &gt;54.04%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col13&quot; class=&quot;data row1 col13&quot; &gt;6.42%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col14&quot; class=&quot;data row1 col14&quot; &gt;19.71%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col15&quot; class=&quot;data row1 col15&quot; &gt;31.16%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col16&quot; class=&quot;data row1 col16&quot; &gt;52.02%&lt;/td&gt; n”, “ &lt;td id=&quot;T_422b8_row1_col17&quot; class=&quot;data row1 col17&quot; &gt;6.21%&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n” ], “text/plain”: [ “&lt;pandas.io.formats.style.Styler at 0x1398e1090&gt;” ] }, “execution_count”: 230, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Education variable n”, “pd.crosstab(df[‘income_level’], n”, “ df[‘education’], n”, “ margins = True, n”, “ normalize = ‘columns’).style.format(‘’)” ] }, { “cell_type”: “code”, “execution_count”: 231, “id”: “a71b7a15”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “&lt;matplotlib.legend.Legend at 0x13421fd50&gt;” ] }, “execution_count”: 231, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 864x720 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “pd.crosstab(df[‘income_level’], n”, “ df[‘education’], n”, “ margins = True, n”, “ normalize = ‘columns’).plot(kind=’bar’,stacked=True, edgecolor=’black’, n”, “ figsize=(12,10)) n”, “ n”, “plt.legend(bbox_to_anchor=(1.5, 1.0))” ] }, { “cell_type”: “markdown”, “id”: “3cd99901”, “metadata”: {}, “source”: [ “We can see the effect of education on income level where more than 50% of Prof school degree and Doctorate degree earn more than 50k a year. On the other hand, the majority of people (more than 90%) with no degree earn less than 50k a year.” ] }, { “cell_type”: “markdown”, “id”: “2cee3956”, “metadata”: {}, “source”: [ “Let’s further this analysis and see the effect of education and the number of working weeks :” ] }, { “cell_type”: “code”, “execution_count”: 232, “id”: “70f6eef2”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;education&lt;/th&gt; n”, “ &lt;th&gt;Children&lt;/th&gt; n”, “ &lt;th&gt;Less than 1st grade&lt;/th&gt; n”, “ &lt;th&gt;1st 2nd 3rd or 4th grade&lt;/th&gt; n”, “ &lt;th&gt;5th or 6th grade&lt;/th&gt; n”, “ &lt;th&gt;7th and 8th grade&lt;/th&gt; n”, “ &lt;th&gt;9th grade&lt;/th&gt; n”, “ &lt;th&gt;10th grade&lt;/th&gt; n”, “ &lt;th&gt;11th grade&lt;/th&gt; n”, “ &lt;th&gt;12th grade no diploma&lt;/th&gt; n”, “ &lt;th&gt;High school graduate&lt;/th&gt; n”, “ &lt;th&gt;Associates degree-academic program&lt;/th&gt; n”, “ &lt;th&gt;Associates degree-occup /vocational&lt;/th&gt; n”, “ &lt;th&gt;Prof school degree (MD DDS DVM LLB JD)&lt;/th&gt; n”, “ &lt;th&gt;Some college but no degree&lt;/th&gt; n”, “ &lt;th&gt;Bachelors degree(BA AB BS)&lt;/th&gt; n”, “ &lt;th&gt;Masters degree(MA MS MEng MEd MSW MBA)&lt;/th&gt; n”, “ &lt;th&gt;Doctorate degree(PhD EdD)&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;income_level&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;- 50000.&lt;/th&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;12.69&lt;/td&gt; n”, “ &lt;td&gt;15.93&lt;/td&gt; n”, “ &lt;td&gt;18.56&lt;/td&gt; n”, “ &lt;td&gt;11.12&lt;/td&gt; n”, “ &lt;td&gt;13.01&lt;/td&gt; n”, “ &lt;td&gt;16.23&lt;/td&gt; n”, “ &lt;td&gt;20.42&lt;/td&gt; n”, “ &lt;td&gt;21.59&lt;/td&gt; n”, “ &lt;td&gt;30.88&lt;/td&gt; n”, “ &lt;td&gt;38.48&lt;/td&gt; n”, “ &lt;td&gt;37.99&lt;/td&gt; n”, “ &lt;td&gt;34.55&lt;/td&gt; n”, “ &lt;td&gt;33.35&lt;/td&gt; n”, “ &lt;td&gt;37.24&lt;/td&gt; n”, “ &lt;td&gt;36.94&lt;/td&gt; n”, “ &lt;td&gt;34.51&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;50000+.&lt;/th&gt; n”, “ &lt;td&gt;NaN&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;35.00&lt;/td&gt; n”, “ &lt;td&gt;39.64&lt;/td&gt; n”, “ &lt;td&gt;39.00&lt;/td&gt; n”, “ &lt;td&gt;43.47&lt;/td&gt; n”, “ &lt;td&gt;42.29&lt;/td&gt; n”, “ &lt;td&gt;46.59&lt;/td&gt; n”, “ &lt;td&gt;47.71&lt;/td&gt; n”, “ &lt;td&gt;46.53&lt;/td&gt; n”, “ &lt;td&gt;49.63&lt;/td&gt; n”, “ &lt;td&gt;49.46&lt;/td&gt; n”, “ &lt;td&gt;49.88&lt;/td&gt; n”, “ &lt;td&gt;47.17&lt;/td&gt; n”, “ &lt;td&gt;48.66&lt;/td&gt; n”, “ &lt;td&gt;48.47&lt;/td&gt; n”, “ &lt;td&gt;48.23&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “education Children Less than 1st grade 1st 2nd 3rd or 4th grade n”, “income_level n”, “ - 50000. 0.0 12.69 15.93 n”, “ 50000+. NaN 0.00 35.00 n”, “ n”, “education 5th or 6th grade 7th and 8th grade 9th grade 10th grade n”, “income_level n”, “ - 50000. 18.56 11.12 13.01 16.23 n”, “ 50000+. 39.64 39.00 43.47 42.29 n”, “ n”, “education 11th grade 12th grade no diploma High school graduate n”, “income_level n”, “ - 50000. 20.42 21.59 30.88 n”, “ 50000+. 46.59 47.71 46.53 n”, “ n”, “education Associates degree-academic program n”, “income_level n”, “ - 50000. 38.48 n”, “ 50000+. 49.63 n”, “ n”, “education Associates degree-occup /vocational n”, “income_level n”, “ - 50000. 37.99 n”, “ 50000+. 49.46 n”, “ n”, “education Prof school degree (MD DDS DVM LLB JD) n”, “income_level n”, “ - 50000. 34.55 n”, “ 50000+. 49.88 n”, “ n”, “education Some college but no degree Bachelors degree(BA AB BS) n”, “income_level n”, “ - 50000. 33.35 37.24 n”, “ 50000+. 47.17 48.66 n”, “ n”, “education Masters degree(MA MS MEng MEd MSW MBA) n”, “income_level n”, “ - 50000. 36.94 n”, “ 50000+. 48.47 n”, “ n”, “education Doctorate degree(PhD EdD) n”, “income_level n”, “ - 50000. 34.51 n”, “ 50000+. 48.23 “ ] }, “execution_count”: 232, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “pd.crosstab(df[‘income_level’], n”, “ df[‘education’], n”, “ values = df[‘weeks_worked_in_year’], n”, “ aggfunc = ‘mean’).round(2)” ] }, { “cell_type”: “code”, “execution_count”: 233, “id”: “1eabe5a8”, “metadata”: {}, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 1440x288 with 2 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “import pandas as pd n”, “import numpy as np n”, “import matplotlib.pyplot as plt n”, “import seaborn as sns n”, “plt.figure(figsize=(20, 4)) n”, “sns.heatmap( n”, “ pd.crosstab(df[‘income_level’], n”, “ df[‘education’], n”, “ values = df[‘weeks_worked_in_year’], n”, “ aggfunc = ‘mean’).round(1) n”, “ ,annot = True n”, “ ,linewidths=.5 n”, “ ,cmap=&quot;YlGnBu&quot; n”, “ n”, “) n”, “plt.show()” ] }, { “cell_type”: “markdown”, “id”: “fff0d99c”, “metadata”: {}, “source”: [ “We can see that earning more than 50k a year demands high level of education but also lot of hard work !” ] }, { “cell_type”: “markdown”, “id”: “7cb5cb52”, “metadata”: {}, “source”: [ “Let’s analyse the effect of sex and marital_stat on income level : “ ] }, { “cell_type”: “code”, “execution_count”: 234, “id”: “5f3615ff”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;style type=&quot;text/css&quot;&gt; n”, “&lt;/style&gt; n”, “&lt;table id=&quot;T_0e9a6&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr&gt; n”, “ &lt;th class=&quot;index_name level0&quot; &gt;sex&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col0&quot; colspan=&quot;7&quot;&gt; Female&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col7&quot; colspan=&quot;7&quot;&gt; Male&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level0 col14&quot; &gt;All&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th class=&quot;index_name level1&quot; &gt;marital_stat&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col0&quot; &gt; Divorced&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col1&quot; &gt; Married-A F spouse present&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col2&quot; &gt; Married-civilian spouse present&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col3&quot; &gt; Married-spouse absent&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col4&quot; &gt; Never married&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col5&quot; &gt; Separated&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col6&quot; &gt; Widowed&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col7&quot; &gt; Divorced&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col8&quot; &gt; Married-A F spouse present&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col9&quot; &gt; Married-civilian spouse present&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col10&quot; &gt; Married-spouse absent&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col11&quot; &gt; Never married&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col12&quot; &gt; Separated&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col13&quot; &gt; Widowed&lt;/th&gt; n”, “ &lt;th class=&quot;col_heading level1 col14&quot; &gt;&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th class=&quot;index_name level0&quot; &gt;income_level&lt;/th&gt; n”, “ &lt;th class=&quot;blank col0&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col1&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col2&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col3&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col4&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col5&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col6&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col7&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col8&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col9&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col10&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col11&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col12&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col13&quot; &gt; &lt;/th&gt; n”, “ &lt;th class=&quot;blank col14&quot; &gt; &lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th id=&quot;T_0e9a6level0_row0&quot; class=&quot;row_heading level0 row0&quot; &gt; - 50000.&lt;/th&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col0&quot; class=&quot;data row0 col0&quot; &gt;94.19%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col1&quot; class=&quot;data row0 col1&quot; &gt;98.42%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col2&quot; class=&quot;data row0 col2&quot; &gt;96.39%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col3&quot; class=&quot;data row0 col3&quot; &gt;97.17%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col4&quot; class=&quot;data row0 col4&quot; &gt;99.07%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col5&quot; class=&quot;data row0 col5&quot; &gt;96.97%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col6&quot; class=&quot;data row0 col6&quot; &gt;97.57%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col7&quot; class=&quot;data row0 col7&quot; &gt;87.71%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col8&quot; class=&quot;data row0 col8&quot; &gt;84.85%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col9&quot; class=&quot;data row0 col9&quot; &gt;80.88%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col10&quot; class=&quot;data row0 col10&quot; &gt;89.66%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col11&quot; class=&quot;data row0 col11&quot; &gt;98.37%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col12&quot; class=&quot;data row0 col12&quot; &gt;92.46%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col13&quot; class=&quot;data row0 col13&quot; &gt;93.25%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row0_col14&quot; class=&quot;data row0 col14&quot; &gt;93.79%&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th id=&quot;T_0e9a6_level0_row1&quot; class=&quot;row_heading level0 row1&quot; &gt; 50000+.&lt;/th&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col0&quot; class=&quot;data row1 col0&quot; &gt;5.81%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col1&quot; class=&quot;data row1 col1&quot; &gt;1.58%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col2&quot; class=&quot;data row1 col2&quot; &gt;3.61%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col3&quot; class=&quot;data row1 col3&quot; &gt;2.83%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col4&quot; class=&quot;data row1 col4&quot; &gt;0.93%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col5&quot; class=&quot;data row1 col5&quot; &gt;3.03%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col6&quot; class=&quot;data row1 col6&quot; &gt;2.43%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col7&quot; class=&quot;data row1 col7&quot; &gt;12.29%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col8&quot; class=&quot;data row1 col8&quot; &gt;15.15%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col9&quot; class=&quot;data row1 col9&quot; &gt;19.12%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col10&quot; class=&quot;data row1 col10&quot; &gt;10.34%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col11&quot; class=&quot;data row1 col11&quot; &gt;1.63%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col12&quot; class=&quot;data row1 col12&quot; &gt;7.54%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col13&quot; class=&quot;data row1 col13&quot; &gt;6.75%&lt;/td&gt; n”, “ &lt;td id=&quot;T_0e9a6_row1_col14&quot; class=&quot;data row1 col14&quot; &gt;6.21%&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n” ], “text/plain”: [ “&lt;pandas.io.formats.style.Styler at 0x1341656d0&gt;” ] }, “execution_count”: 234, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “pd.crosstab(df[‘income_level’], n”, “ [df[‘sex’],df[‘marital_stat’]], n”, “ margins = True, n”, “ normalize = ‘columns’).style.format(‘’)” ] }, { “cell_type”: “code”, “execution_count”: 235, “id”: “7434f701”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “&lt;matplotlib.axes._subplots.AxesSubplot at 0x139956e10&gt;” ] }, “execution_count”: 235, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “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 n”, “text/plain”: [ “&lt;Figure size 864x720 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “pd.crosstab(df[‘income_level’], n”, “ [df[‘sex’],df[‘marital_stat’]]).plot(kind=’bar’,stacked=True, edgecolor=’black’, n”, “ n”, “ figsize=(12,10))” ] }, { “cell_type”: “markdown”, “id”: “72150a58”, “metadata”: {}, “source”: [ “We can see that the highest proportion of people earning less than 50k a year are mostly female Married-A F spouse present or never married and seperated male. On the other hand, male Married-civilian spouse present represent the highest propotion on the +50k income level.” ] }, { “cell_type”: “markdown”, “id”: “2cdf97bd”, “metadata”: {}, “source”: [ “We can further the analysis more as we have got many interesting features with several modalities but for now let’s see how machine learning models can help us understanding more our data.” ] }, { “cell_type”: “markdown”, “id”: “1fe138ad”, “metadata”: {}, “source”: [ “# Data preparation” ] }, { “cell_type”: “markdown”, “id”: “57cf527c”, “metadata”: {}, “source”: [ “We set the feature vector and the target variable :” ] }, { “cell_type”: “code”, “execution_count”: 236, “id”: “72d5ffe7”, “metadata”: {}, “outputs”: [], “source”: [ “# setting feature vector and target variable for the train set n”, “ n”, “X = df.drop([‘income_level’], axis = 1) n”, “y = df[‘income_level’] n”, “ n”, “# setting feature vector and target variable for the test set n”, “test_x = test.drop([‘income_level’], axis = 1) n”, “test_y = test[‘income_level’]” ] }, { “cell_type”: “code”, “execution_count”: 237, “id”: “8fd73371”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “((199523, 41), (199523, 40), (199523,))” ] }, “execution_count”: 237, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Cheching the result n”, “df.shape, X.shape, y.shape” ] }, { “cell_type”: “markdown”, “id”: “631e7dba”, “metadata”: {}, “source”: [ “We will keep the provided test set hidden and will use it as a realtime dataset when we make our model on production in order to avoid the risk of data snooping. n”, “ n”, “For that, we will be using a validation set derived from our training set (30%). Scikit-Learn provides a few functions to split datasets into multiple subsets in various ways. The simplest function is train_test_split(). n”, “ n”, “Since we have an imbalanced dataset, we can’t considered purely random sampling methods. For that, we do stratified sampling based on the income level. “ ] }, { “cell_type”: “code”, “execution_count”: 238, “id”: “e29903b3”, “metadata”: {}, “outputs”: [], “source”: [ “from sklearn.model_selection import train_test_split n”, “ n”, “X_train, X_val, y_train, y_val = train_test_split(X, n”, “ y, n”, “ test_size=0.3, n”, “ random_state=12, n”, “ stratify=y)” ] }, { “cell_type”: “code”, “execution_count”: 239, “id”: “91df05c1”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “((139666, 40), (59857, 40))” ] }, “execution_count”: 239, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Checking the train and validation set n”, “X_train.shape, X_val.shape” ] }, { “cell_type”: “code”, “execution_count”: 240, “id”: “3a954400”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “( - 50000. 0.937945 n”, “ 50000+. 0.062055 n”, “ Name: income_level, dtype: float64, n”, “ - 50000. 0.937935 n”, “ 50000+. 0.062065 n”, “ Name: income_level, dtype: float64)” ] }, “execution_count”: 240, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Checking the income level proportion n”, “y_train.value_counts(normalize = True), y_val.value_counts(normalize = True)” ] }, { “cell_type”: “markdown”, “id”: “03f8072e”, “metadata”: {}, “source”: [ “What if we didn’t stratify with respect to income level ? n”, “ n”, “We can compare the income level proportions in the overall dataset, in n”, “the test set generated with stratified sampling, and in a test set generated using purely random sampling.” ] }, { “cell_type”: “code”, “execution_count”: 241, “id”: “49ed8e6f”, “metadata”: {}, “outputs”: [], “source”: [ “def income_cat_proportions(data): n”, “ return data[&quot;income_level&quot;].value_counts() / len(data) n”, “ n”, “train_set, test_set = train_test_split(df, test_size=0.3, random_state=12) n”, “ n”, “train_set, test_set_strat = train_test_split(df, test_size=0.3, random_state=12,stratify=df[‘income_level’]) n”, “ n”, “compare_props = pd.DataFrame({ n”, “ &quot;Overall&quot;: income_cat_proportions(df), n”, “ &quot;Stratified&quot;: income_cat_proportions(test_set_strat), n”, “ &quot;Random&quot;: income_cat_proportions(test_set), n”, “}).sort_index() n”, “compare_props[&quot;Rand. %error&quot;] = 100 * compare_props[&quot;Random&quot;] / compare_props[&quot;Overall&quot;] - 100 n”, “compare_props[&quot;Strat. %error&quot;] = 100 * compare_props[&quot;Stratified&quot;] / compare_props[&quot;Overall&quot;] - 100” ] }, { “cell_type”: “markdown”, “id”: “cfb2c77e”, “metadata”: {}, “source”: [ “As we can see, the test set generated using stratified sampling has n”, “income level proportions almost identical to those in the full dataset, whereas the n”, “test set generated using purely random sampling is skewed.” ] }, { “cell_type”: “code”, “execution_count”: 242, “id”: “11277fd7”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;Overall&lt;/th&gt; n”, “ &lt;th&gt;Stratified&lt;/th&gt; n”, “ &lt;th&gt;Random&lt;/th&gt; n”, “ &lt;th&gt;Rand. %error&lt;/th&gt; n”, “ &lt;th&gt;Strat. %error&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;- 50000.&lt;/th&gt; n”, “ &lt;td&gt;0.937942&lt;/td&gt; n”, “ &lt;td&gt;0.937935&lt;/td&gt; n”, “ &lt;td&gt;0.939305&lt;/td&gt; n”, “ &lt;td&gt;0.145356&lt;/td&gt; n”, “ &lt;td&gt;-0.000701&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;50000+.&lt;/th&gt; n”, “ &lt;td&gt;0.062058&lt;/td&gt; n”, “ &lt;td&gt;0.062065&lt;/td&gt; n”, “ &lt;td&gt;0.060695&lt;/td&gt; n”, “ &lt;td&gt;-2.196901&lt;/td&gt; n”, “ &lt;td&gt;0.010601&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ Overall Stratified Random Rand. %error Strat. %error n”, “ - 50000. 0.937942 0.937935 0.939305 0.145356 -0.000701 n”, “ 50000+. 0.062058 0.062065 0.060695 -2.196901 0.010601” ] }, “execution_count”: 242, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “compare_props” ] }, { “cell_type”: “markdown”, “id”: “08574d7b”, “metadata”: {}, “source”: [ “Now that we defined our training set, It’s time to prepare the data for our machine Learning algorithms.” ] }, { “cell_type”: “markdown”, “id”: “49922a70”, “metadata”: {}, “source”: [ “- Data cleaning : n”, “ n”, “We have seen previously that we don’t have any missing values. For some cataegorical features, we assumed that the ? modality is encoded for NaN values.” ] }, { “cell_type”: “markdown”, “id”: “f164240f”, “metadata”: {}, “source”: [ “- Handling Text and Categorical Attributes : n”, “ n”, “Strating with the target variable income_level, we use LabelEncoder() to encode target labels with value between 0 and n_classes-1 = 1. n”, “ n”, “We have seen also that we have some ordinal variable as education and year, so we use OrdinalEncoder to encode the categorical features as an integer array. The results in a single column of integers (0 to n_categories - 1) per feature. n”, “ n”, “Since the remaining categorical features have several modalities per feature, we use also OrdinalEncoder instead of OneHotEncoder. n”, “&gt; Working with OneHotEncoder leads, in our case, to high memory consumption. We can combine OneHotEncoder and PCA : The benefit in PCA is that combination of N attributes is better than any individual attribute. And the disadvantage is in harder explanation what exactly that PCA component means. n”, “Therefore, for this work, we will sacrifice a bit of predictive power to get more understandable model. n” ] }, { “cell_type”: “code”, “execution_count”: 243, “id”: “85eae9e6”, “metadata”: {}, “outputs”: [], “source”: [ “# categorical variables encoding n”, “from sklearn.preprocessing import LabelEncoder, OrdinalEncoder n”, “ n”, “# For the traget varaible n”, “le = LabelEncoder() n”, “y_train = le.fit_transform(y_train) #fit on training set n”, “y_val = le.transform(y_val) n”, “test_y = le.transform(test_y) n”, “ n”, “ n”, “# For categorical features : n”, “Or = OrdinalEncoder(handle_unknown=’use_encoded_value’, unknown_value = -1) n”, “for c in cat : n”, “ X_train[c] = Or.fit_transform(np.array(X_train[c]).reshape(-1,1).astype(str)) #fit on training set n”, “ X_val[c] = Or.transform(np.array(X_val[c]).reshape(-1,1).astype(str)) n”, “ test_x[c] = Or.transform(np.array(test_x[c]).reshape(-1,1).astype(str)) n”, “ n”, “ “ ] }, { “cell_type”: “code”, “execution_count”: 244, “id”: “907dc8c0”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;class_of_worker&lt;/th&gt; n”, “ &lt;th&gt;detailed_industry_recode&lt;/th&gt; n”, “ &lt;th&gt;detailed_occupation_recode&lt;/th&gt; n”, “ &lt;th&gt;education&lt;/th&gt; n”, “ &lt;th&gt;enroll_in_edu_inst_last_wk&lt;/th&gt; n”, “ &lt;th&gt;marital_stat&lt;/th&gt; n”, “ &lt;th&gt;major_industry_code&lt;/th&gt; n”, “ &lt;th&gt;major_occupation_code&lt;/th&gt; n”, “ &lt;th&gt;race&lt;/th&gt; n”, “ &lt;th&gt;hispanic_origin&lt;/th&gt; n”, “ &lt;th&gt;…&lt;/th&gt; n”, “ &lt;th&gt;migration_prev_res_in_sunbelt&lt;/th&gt; n”, “ &lt;th&gt;family_members_under_18&lt;/th&gt; n”, “ &lt;th&gt;country_of_birth_father&lt;/th&gt; n”, “ &lt;th&gt;country_of_birth_mother&lt;/th&gt; n”, “ &lt;th&gt;country_of_birth_self&lt;/th&gt; n”, “ &lt;th&gt;citizenship&lt;/th&gt; n”, “ &lt;th&gt;own_business_or_self_employed&lt;/th&gt; n”, “ &lt;th&gt;fill_inc_questionnaire_for_veteran’s_admin&lt;/th&gt; n”, “ &lt;th&gt;veterans_benefits&lt;/th&gt; n”, “ &lt;th&gt;year&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;88634&lt;/th&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;31.0&lt;/td&gt; n”, “ &lt;td&gt;14.0&lt;/td&gt; n”, “ &lt;td&gt;9.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;…&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;148296&lt;/th&gt; n”, “ &lt;td&gt;8.0&lt;/td&gt; n”, “ &lt;td&gt;37.0&lt;/td&gt; n”, “ &lt;td&gt;12.0&lt;/td&gt; n”, “ &lt;td&gt;12.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;12.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;…&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;163953&lt;/th&gt; n”, “ &lt;td&gt;3.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;10.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;14.0&lt;/td&gt; n”, “ &lt;td&gt;6.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;…&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;p&gt;3 rows × 33 columns&lt;/p&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ class_of_worker detailed_industry_recode detailed_occupation_recode n”, “88634 4.0 31.0 14.0 n”, “148296 8.0 37.0 12.0 n”, “163953 3.0 0.0 0.0 n”, “ n”, “ education enroll_in_edu_inst_last_wk marital_stat n”, “88634 9.0 2.0 2.0 n”, “148296 12.0 2.0 2.0 n”, “163953 10.0 2.0 4.0 n”, “ n”, “ major_industry_code major_occupation_code race hispanic_origin n”, “88634 2.0 0.0 4.0 0.0 n”, “148296 12.0 2.0 4.0 0.0 n”, “163953 14.0 6.0 4.0 0.0 n”, “ n”, “ … migration_prev_res_in_sunbelt family_members_under_18 n”, “88634 … 0.0 4.0 n”, “148296 … 2.0 4.0 n”, “163953 … 0.0 0.0 n”, “ n”, “ country_of_birth_father country_of_birth_mother n”, “88634 40.0 40.0 n”, “148296 40.0 40.0 n”, “163953 40.0 40.0 n”, “ n”, “ country_of_birth_self citizenship own_business_or_self_employed n”, “88634 40.0 4.0 2.0 n”, “148296 40.0 4.0 0.0 n”, “163953 40.0 4.0 0.0 n”, “ n”, “ fill_inc_questionnaire_for_veteran’s_admin veterans_benefits year n”, “88634 1.0 2.0 0.0 n”, “148296 1.0 2.0 0.0 n”, “163953 1.0 0.0 0.0 n”, “ n”, “[3 rows x 33 columns]” ] }, “execution_count”: 244, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Cheking categorical features encoding n”, “X_train[cat].head(3)” ] }, { “cell_type”: “code”, “execution_count”: 245, “id”: “6f5cca46”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “{0, 1}” ] }, “execution_count”: 245, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Cheking target feature encoding n”, “set(y_train)” ] }, { “cell_type”: “markdown”, “id”: “3145257a”, “metadata”: {}, “source”: [ “- Feature Scaling : n”, “ n”, “We saw previously that out numerical inputs have different scales like the weeks_worked_in_year and capital_gains. We will be using StandardScaler since standardization is much less affected by outliers.” ] }, { “cell_type”: “code”, “execution_count”: 246, “id”: “388148f5”, “metadata”: {}, “outputs”: [], “source”: [ “from sklearn.preprocessing import StandardScaler n”, “ n”, “scaler = StandardScaler() n”, “ n”, “for c in cont: n”, “ X_train[c] = scaler.fit_transform(np.array(X_train[c]).reshape(-1,1)) # fir on the train set n”, “ X_val[c] = scaler.transform(np.array(X_val[c]).reshape(-1,1)) n”, “ test_x[c] = scaler.transform(np.array(test_x[c]).reshape(-1,1)) n”, “ n” ] }, { “cell_type”: “code”, “execution_count”: 247, “id”: “21e669a5”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;age&lt;/th&gt; n”, “ &lt;th&gt;wage_per_hour&lt;/th&gt; n”, “ &lt;th&gt;capital_gains&lt;/th&gt; n”, “ &lt;th&gt;capital_losses&lt;/th&gt; n”, “ &lt;th&gt;dividends_from_stocks&lt;/th&gt; n”, “ &lt;th&gt;num_persons_worked_for_employer&lt;/th&gt; n”, “ &lt;th&gt;weeks_worked_in_year&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;88634&lt;/th&gt; n”, “ &lt;td&gt;0.334269&lt;/td&gt; n”, “ &lt;td&gt;-0.201648&lt;/td&gt; n”, “ &lt;td&gt;-0.092139&lt;/td&gt; n”, “ &lt;td&gt;-0.137611&lt;/td&gt; n”, “ &lt;td&gt;-0.069026&lt;/td&gt; n”, “ &lt;td&gt;1.705234&lt;/td&gt; n”, “ &lt;td&gt;1.177773&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;148296&lt;/th&gt; n”, “ &lt;td&gt;0.468715&lt;/td&gt; n”, “ &lt;td&gt;-0.201648&lt;/td&gt; n”, “ &lt;td&gt;-0.092139&lt;/td&gt; n”, “ &lt;td&gt;-0.137611&lt;/td&gt; n”, “ &lt;td&gt;-0.098703&lt;/td&gt; n”, “ &lt;td&gt;-0.405865&lt;/td&gt; n”, “ &lt;td&gt;1.177773&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;163953&lt;/th&gt; n”, “ &lt;td&gt;-1.368713&lt;/td&gt; n”, “ &lt;td&gt;-0.201648&lt;/td&gt; n”, “ &lt;td&gt;-0.092139&lt;/td&gt; n”, “ &lt;td&gt;-0.137611&lt;/td&gt; n”, “ &lt;td&gt;-0.098703&lt;/td&gt; n”, “ &lt;td&gt;-0.828085&lt;/td&gt; n”, “ &lt;td&gt;-0.950488&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ age wage_per_hour capital_gains capital_losses n”, “88634 0.334269 -0.201648 -0.092139 -0.137611 n”, “148296 0.468715 -0.201648 -0.092139 -0.137611 n”, “163953 -1.368713 -0.201648 -0.092139 -0.137611 n”, “ n”, “ dividends_from_stocks num_persons_worked_for_employer n”, “88634 -0.069026 1.705234 n”, “148296 -0.098703 -0.405865 n”, “163953 -0.098703 -0.828085 n”, “ n”, “ weeks_worked_in_year n”, “88634 1.177773 n”, “148296 1.177773 n”, “163953 -0.950488 “ ] }, “execution_count”: 247, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “#checking the standardization n”, “X_train[cont].head(3)” ] }, { “cell_type”: “markdown”, “id”: “601e53c4”, “metadata”: {}, “source”: [ “So far, we have handled the categorical columns and the numerical columns :” ] }, { “cell_type”: “code”, “execution_count”: 248, “id”: “1f53489b”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;age&lt;/th&gt; n”, “ &lt;th&gt;class_of_worker&lt;/th&gt; n”, “ &lt;th&gt;detailed_industry_recode&lt;/th&gt; n”, “ &lt;th&gt;detailed_occupation_recode&lt;/th&gt; n”, “ &lt;th&gt;education&lt;/th&gt; n”, “ &lt;th&gt;wage_per_hour&lt;/th&gt; n”, “ &lt;th&gt;enroll_in_edu_inst_last_wk&lt;/th&gt; n”, “ &lt;th&gt;marital_stat&lt;/th&gt; n”, “ &lt;th&gt;major_industry_code&lt;/th&gt; n”, “ &lt;th&gt;major_occupation_code&lt;/th&gt; n”, “ &lt;th&gt;race&lt;/th&gt; n”, “ &lt;th&gt;hispanic_origin&lt;/th&gt; n”, “ &lt;th&gt;sex&lt;/th&gt; n”, “ &lt;th&gt;member_of_a_labor_union&lt;/th&gt; n”, “ &lt;th&gt;reason_for_unemployment&lt;/th&gt; n”, “ &lt;th&gt;full_or_part_time_employment_stat&lt;/th&gt; n”, “ &lt;th&gt;capital_gains&lt;/th&gt; n”, “ &lt;th&gt;capital_losses&lt;/th&gt; n”, “ &lt;th&gt;dividends_from_stocks&lt;/th&gt; n”, “ &lt;th&gt;tax_filer_stat&lt;/th&gt; n”, “ &lt;th&gt;region_of_previous_residence&lt;/th&gt; n”, “ &lt;th&gt;state_of_previous_residence&lt;/th&gt; n”, “ &lt;th&gt;detailed_household_and_family_stat&lt;/th&gt; n”, “ &lt;th&gt;detailed_household_summary_in_household&lt;/th&gt; n”, “ &lt;th&gt;migration_code-change_in_msa&lt;/th&gt; n”, “ &lt;th&gt;migration_code-change_in_reg&lt;/th&gt; n”, “ &lt;th&gt;migration_code-move_within_reg&lt;/th&gt; n”, “ &lt;th&gt;live_in_this_house_1_year_ago&lt;/th&gt; n”, “ &lt;th&gt;migration_prev_res_in_sunbelt&lt;/th&gt; n”, “ &lt;th&gt;num_persons_worked_for_employer&lt;/th&gt; n”, “ &lt;th&gt;family_members_under_18&lt;/th&gt; n”, “ &lt;th&gt;country_of_birth_father&lt;/th&gt; n”, “ &lt;th&gt;country_of_birth_mother&lt;/th&gt; n”, “ &lt;th&gt;country_of_birth_self&lt;/th&gt; n”, “ &lt;th&gt;citizenship&lt;/th&gt; n”, “ &lt;th&gt;own_business_or_self_employed&lt;/th&gt; n”, “ &lt;th&gt;fill_inc_questionnaire_for_veteran’s_admin&lt;/th&gt; n”, “ &lt;th&gt;veterans_benefits&lt;/th&gt; n”, “ &lt;th&gt;weeks_worked_in_year&lt;/th&gt; n”, “ &lt;th&gt;year&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;88634&lt;/th&gt; n”, “ &lt;td&gt;0.334269&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;31.0&lt;/td&gt; n”, “ &lt;td&gt;14.0&lt;/td&gt; n”, “ &lt;td&gt;9.0&lt;/td&gt; n”, “ &lt;td&gt;-0.201648&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;3.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;-0.092139&lt;/td&gt; n”, “ &lt;td&gt;-0.137611&lt;/td&gt; n”, “ &lt;td&gt;-0.069026&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;3.0&lt;/td&gt; n”, “ &lt;td&gt;36.0&lt;/td&gt; n”, “ &lt;td&gt;37.0&lt;/td&gt; n”, “ &lt;td&gt;7.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;1.705234&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;1.177773&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;148296&lt;/th&gt; n”, “ &lt;td&gt;0.468715&lt;/td&gt; n”, “ &lt;td&gt;8.0&lt;/td&gt; n”, “ &lt;td&gt;37.0&lt;/td&gt; n”, “ &lt;td&gt;12.0&lt;/td&gt; n”, “ &lt;td&gt;12.0&lt;/td&gt; n”, “ &lt;td&gt;-0.201648&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;12.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;3.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;-0.092139&lt;/td&gt; n”, “ &lt;td&gt;-0.137611&lt;/td&gt; n”, “ &lt;td&gt;-0.098703&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;3.0&lt;/td&gt; n”, “ &lt;td&gt;36.0&lt;/td&gt; n”, “ &lt;td&gt;37.0&lt;/td&gt; n”, “ &lt;td&gt;7.0&lt;/td&gt; n”, “ &lt;td&gt;7.0&lt;/td&gt; n”, “ &lt;td&gt;6.0&lt;/td&gt; n”, “ &lt;td&gt;7.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;-0.405865&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;1.177773&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;163953&lt;/th&gt; n”, “ &lt;td&gt;-1.368713&lt;/td&gt; n”, “ &lt;td&gt;3.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;10.0&lt;/td&gt; n”, “ &lt;td&gt;-0.201648&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;14.0&lt;/td&gt; n”, “ &lt;td&gt;6.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;3.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;-0.092139&lt;/td&gt; n”, “ &lt;td&gt;-0.137611&lt;/td&gt; n”, “ &lt;td&gt;-0.098703&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;3.0&lt;/td&gt; n”, “ &lt;td&gt;36.0&lt;/td&gt; n”, “ &lt;td&gt;8.0&lt;/td&gt; n”, “ &lt;td&gt;2.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;-0.828085&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;40.0&lt;/td&gt; n”, “ &lt;td&gt;4.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;1.0&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;-0.950488&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ age class_of_worker detailed_industry_recode n”, “88634 0.334269 4.0 31.0 n”, “148296 0.468715 8.0 37.0 n”, “163953 -1.368713 3.0 0.0 n”, “ n”, “ detailed_occupation_recode education wage_per_hour n”, “88634 14.0 9.0 -0.201648 n”, “148296 12.0 12.0 -0.201648 n”, “163953 0.0 10.0 -0.201648 n”, “ n”, “ enroll_in_edu_inst_last_wk marital_stat major_industry_code n”, “88634 2.0 2.0 2.0 n”, “148296 2.0 2.0 12.0 n”, “163953 2.0 4.0 14.0 n”, “ n”, “ major_occupation_code race hispanic_origin sex n”, “88634 0.0 4.0 0.0 1.0 n”, “148296 2.0 4.0 0.0 0.0 n”, “163953 6.0 4.0 0.0 1.0 n”, “ n”, “ member_of_a_labor_union reason_for_unemployment n”, “88634 1.0 3.0 n”, “148296 1.0 3.0 n”, “163953 1.0 3.0 n”, “ n”, “ full_or_part_time_employment_stat capital_gains capital_losses n”, “88634 1.0 -0.092139 -0.137611 n”, “148296 0.0 -0.092139 -0.137611 n”, “163953 0.0 -0.092139 -0.137611 n”, “ n”, “ dividends_from_stocks tax_filer_stat region_of_previous_residence n”, “88634 -0.069026 2.0 3.0 n”, “148296 -0.098703 2.0 3.0 n”, “163953 -0.098703 4.0 3.0 n”, “ n”, “ state_of_previous_residence detailed_household_and_family_stat n”, “88634 36.0 37.0 n”, “148296 36.0 37.0 n”, “163953 36.0 8.0 n”, “ n”, “ detailed_household_summary_in_household migration_code-change_in_msa n”, “88634 7.0 0.0 n”, “148296 7.0 7.0 n”, “163953 2.0 0.0 n”, “ n”, “ migration_code-change_in_reg migration_code-move_within_reg n”, “88634 0.0 0.0 n”, “148296 6.0 7.0 n”, “163953 0.0 0.0 n”, “ n”, “ live_in_this_house_1_year_ago migration_prev_res_in_sunbelt n”, “88634 1.0 0.0 n”, “148296 2.0 2.0 n”, “163953 1.0 0.0 n”, “ n”, “ num_persons_worked_for_employer family_members_under_18 n”, “88634 1.705234 4.0 n”, “148296 -0.405865 4.0 n”, “163953 -0.828085 0.0 n”, “ n”, “ country_of_birth_father country_of_birth_mother n”, “88634 40.0 40.0 n”, “148296 40.0 40.0 n”, “163953 40.0 40.0 n”, “ n”, “ country_of_birth_self citizenship own_business_or_self_employed n”, “88634 40.0 4.0 2.0 n”, “148296 40.0 4.0 0.0 n”, “163953 40.0 4.0 0.0 n”, “ n”, “ fill_inc_questionnaire_for_veteran’s_admin veterans_benefits n”, “88634 1.0 2.0 n”, “148296 1.0 2.0 n”, “163953 1.0 0.0 n”, “ n”, “ weeks_worked_in_year year n”, “88634 1.177773 0.0 n”, “148296 1.177773 0.0 n”, “163953 -0.950488 0.0 “ ] }, “metadata”: {}, “output_type”: “display_data” }, { “data”: { “text/plain”: [ “((139666, 40), (59857, 40), (99762, 40))” ] }, “execution_count”: 248, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# Checking the training set n”, “with pd.option_context(‘display.max_rows’, None, ‘display.max_columns’, None): n”, “ display(X_train.head(3)) n”, “ n”, “X_train.shape, X_val.shape, test_x.shape” ] }, { “cell_type”: “markdown”, “id”: “04466c8c”, “metadata”: {}, “source”: [ “# Data modeling” ] }, { “cell_type”: “markdown”, “id”: “52ffaaa2”, “metadata”: {}, “source”: [ “- Selecting a Performance Measure : n”, “ n”, “Accuracy is the simplest way to measure the effectiveness of a n”, “classification task, and it’s the percentage of correct predictions over all predictions. n”, “In other words, in a binary classification task, you can calculate this by adding the n”, “number of True Positives (TPs) and True Negatives (TNs) and dividing them by a n”, “tally of all predictions made. As with regression metrics, you can measure accuracy n”, “for both train and test to gauge overfitting. n”, “ n”, “But, we can get an accuracy of 94%, which sounds pretty n”, “good, but it turns out we are always predicting -50k! In other words, even if n”, “we get high accuracy, it is meaningless unless we are predicting accurately for the n”, “least represented class, +50k. n”, “ n”, “For this reasing, we will be using F1-score. n”, “The F1-score is also called the harmonic average of precision and recall because n”, “it’s calculated like this: 2TP / 2TP + FP + FN. Since it includes both precision and n”, “recall metrics, which pertain to the proportion of true positives, it’s a good metric n”, “choice to use when the dataset is imbalanced, and we don’t prefer either precision n”, “or recall.” ] }, { “cell_type”: “markdown”, “id”: “7e73bce9”, “metadata”: {}, “source”: [ “- Base model : n”, “ n”, “Let’s start with Decision tree ensembles. n”, “ n”, “A decision tree asks a series of binary (that is, yes or no) questions about the data. After each question the data at that part of the tree is split between a &quot;yes&quot; and a &quot;no&quot; branch. After one or more questions, either a prediction can be made on the basis of all previous answers or another question is required. n”, “ n”, “We illustarte a tree classification using 4 leaf nodes.” ] }, { “cell_type”: “code”, “execution_count”: 249, “id”: “e7d33366”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “DecisionTreeClassifier(max_leaf_nodes=4, random_state=14)” ] }, “execution_count”: 249, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “from sklearn.tree import DecisionTreeClassifier, plot_tree n”, “ n”, “m = DecisionTreeClassifier(max_leaf_nodes=4, random_state=14) # to plot the tree classification n”, “m.fit(X_train, y_train)” ] }, { “cell_type”: “code”, “execution_count”: 250, “id”: “a101410c”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “array([0, 1])” ] }, “execution_count”: 250, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# to get the class output n”, “m.classes” ] }, { “cell_type”: “code”, “execution_count”: 251, “id”: “c078da9e”, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Requirement already satisfied: pydotplus in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (2.0.2) r n”, “Requirement already satisfied: pyparsing&gt;=2.0.1 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from pydotplus) (3.0.4) r n” ] } ], “source”: [ “!pip install pydotplus” ] }, { “cell_type”: “code”, “execution_count”: 252, “id”: “9f46956f”, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Requirement already satisfied: graphviz in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (0.16) r n” ] } ], “source”: [ “!pip install graphviz” ] }, { “cell_type”: “markdown”, “id”: “e7e4dba5”, “metadata”: {}, “source”: [ “The top node represents the initial model before any splits have been done, when all the data is in the initial income levels. This is the simplest possible model. It is the result of asking zero questions and will always predict the more represented class which is -50k. We use the Gini method to create split points. The strategy is to select each pair of adjacent values as a possible split-point and the point with smaller gini index chosen as the splitting point. In our case, the capital gains at 1.47 was choosen first. n”, “ n”, “Moving down and to the left, this node shows us that there were 130,999 records for income level of -50k where capital gains was less than 1.47. The class predicted is -50k in this case. Moving down and to the right from the initial model takes us to the records where capital gains was greater than 1.47. The class predicted is +50k in this case where 1370 records have an income of +50k and capital gains &gt;0.4 n”, “ n”, “The bottom row contains our leaf nodes: the nodes with no answers coming out of them, because there are no more questions to be answered. n”, “ n”, “Returning back to the top node after the first decision point, we can see that a second binary decision split has been made, based on asking whether weeks_worked_per_year is less than or equal to 0.9. For the group where this is true, the class predicted is -50k with a gini of 0.019 and there are 85,411 records. For the records where this decision is false, the class predicted is -50k with a gini of 0.019, and there are 52,361 records. So again, we can see that the decision tree algorithm has successfully split out more records into two more groups which differ in gini value significantly. n”, “ n”, “Now, let’s run our base model :” ] }, { “cell_type”: “code”, “execution_count”: 254, “id”: “c878f21e”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “DecisionTreeClassifier(random_state=14)” ] }, “execution_count”: 254, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “m = DecisionTreeClassifier(random_state=14) n”, “m.fit(X_train, y_train)” ] }, { “cell_type”: “markdown”, “id”: “6c1feeaf”, “metadata”: {}, “source”: [ “We evaluate the model on our validation set using accuracy, recall and f1 score :” ] }, { “cell_type”: “code”, “execution_count”: 255, “id”: “8d7a9043”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(0.9996348431257428, 0.9943463712934117, 0.997049806212761)” ] }, “execution_count”: 255, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “from sklearn.metrics import accuracy_score, f1score, recall_score n”, “ n”, “# on the train set n”, “accuracy_score(y_train,m.predict(X_train)) , n”, “recall_score(y_train,m.predict(X_train)), n”, “f1_score(y_train,m.predict(X_train), average=’binary’, pos_label=1) n” ] }, { “cell_type”: “code”, “execution_count”: 256, “id”: “7875c332”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(0.9307683311893346, 0.4888290713324361, 0.4670781893004115)” ] }, “execution_count”: 256, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# on the valid set n”, “accuracy_score(y_val,m.predict(X_val)) , n”, “recall_score(y_val,m.predict(X_val)), n”, “f1_score(y_val,m.predict(X_val), average=’binary’, pos_label=1) “ ] }, { “cell_type”: “markdown”, “id”: “9c753be9”, “metadata”: {}, “source”: [ “It’s seems that we are doing badly on the validation set. Let’s see houw many leaf nodes we got :” ] }, { “cell_type”: “code”, “execution_count”: 257, “id”: “5323ccfc”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(8005, 139666)” ] }, “execution_count”: 257, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “m.get_n_leaves(), len(X_train)” ] }, { “cell_type”: “markdown”, “id”: “b4b45bc2”, “metadata”: {}, “source”: [ “Sklearn’s default settings allow it to continue splitting nodes until there is only one item in each leaf node. Let’s change the stopping rule to tell sklearn to ensure every leaf node contains at least 25 records:” ] }, { “cell_type”: “code”, “execution_count”: 258, “id”: “a28ac805”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(0.9571048071828505, 0.46198223145263645, 0.5720408600614331)” ] }, “execution_count”: 258, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “m = DecisionTreeClassifier(min_samples_leaf=25,random_state=14) n”, “m.fit(X_train, y_train) n”, “ n”, “# on the train set n”, “accuracy_score(y_train,m.predict(X_train)) , n”, “recall_score(y_train,m.predict(X_train)), n”, “f1_score(y_train,m.predict(X_train), average=’binary’, pos_label=1) n”, “ n” ] }, { “cell_type”: “code”, “execution_count”: 259, “id”: “ad7bccf5”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(0.9504986885410228, 0.42449528936742936, 0.515612228216446)” ] }, “execution_count”: 259, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# on the valid set n”, “accuracy_score(y_val,m.predict(X_val)) , n”, “recall_score(y_val,m.predict(X_val)), n”, “f1_score(y_val,m.predict(X_val), average=’binary’, pos_label=1) “ ] }, { “cell_type”: “markdown”, “id”: “44aef02a”, “metadata”: {}, “source”: [ “That looks much better. Let’s check the number of leaves again:” ] }, { “cell_type”: “code”, “execution_count”: 260, “id”: “b5183966”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(1533, 139666)” ] }, “execution_count”: 260, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “m.get_n_leaves(), len(X_train)” ] }, { “cell_type”: “markdown”, “id”: “64601887”, “metadata”: {}, “source”: [ “We got less leaf nodes than before. So, the more we increase the number of leaf nodes, the more is the possibility of overfitting.” ] }, { “cell_type”: “markdown”, “id”: “3f2760d9”, “metadata”: {}, “source”: [ “Building a decision tree is a good way to create a model of our data. It is very flexible, since it can clearly handle nonlinear relationships and interactions between variables. But we can see there is a fundamental compromise between how well it generalizes (which we can achieve by creating small trees) and how accurate it is on the training set (which we can achieve by using large trees). n”, “ n”, “So how do we get the best of both worlds?” ] }, { “cell_type”: “markdown”, “id”: “17ed7120”, “metadata”: {}, “source”: [ “- Ensembling : n”, “ n”, “An an example of an Ensemble method is Random Forest : we can train a group of Decision Tree classifiers, n”, “each on a different random subset of the training set. The process of subseting the data is called bagging done with max_samples hyperparameter ( we set it at 100.00 samples) and the ramdom selection process this called bootsraping done by setting bootstrap = True. n”, “ n”, “With bagging, some instances may be sampled several times for any given predictor, while others may not be sampled at all. The remaining sampled are called out-of-bag (oob) instances used as validation set in the training process and done by setting oob_score=True. n”, “ n”, “We train a Random Forest classifier with 50 trees (each limited to minimum 5 samples per leaf). n”, “and instead of searching for the very best feature when splitting a node, we n”, “searches for the best feature among a random subset of 50% of our initial features.” ] }, { “cell_type”: “code”, “execution_count”: 261, “id”: “8d084a92”, “metadata”: {}, “outputs”: [], “source”: [ “from sklearn.ensemble import RandomForestClassifier n”, “ n”, “rf = RandomForestClassifier(n_estimators = 50, max_samples=100_000, max_features=0.5, min_samples_leaf= 5, n”, “ bootstrap= True,oob_score = True,random_state=14)” ] }, { “cell_type”: “code”, “execution_count”: 262, “id”: “1264c8bd”, “metadata”: {}, “outputs”: [ { “name”: “stderr”, “output_type”: “stream”, “text”: [ “/Users/rmbp/opt/anaconda3/lib/python3.7/site-packages/sklearn/base.py:446: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “ &quot;X does not have valid feature names, but&quot; n” ] }, { “name”: “stdout”, “output_type”: “stream”, “text”: [ “CPU times: user 22.5 s, sys: 339 ms, total: 22.8 s n”, “Wall time: 23.2 s n” ] }, { “data”: { “text/plain”: [ “RandomForestClassifier(max_features=0.5, max_samples=100000, min_samples_leaf=5, n”, “ n_estimators=50, oob_score=True, random_state=14)” ] }, “execution_count”: 262, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “%%time n”, “rf.fit(X_train,y_train)” ] }, { “cell_type”: “code”, “execution_count”: 263, “id”: “f7c1fe19”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(0.9670571219910358, 0.5334025614399446, 0.6677258611973712)” ] }, “execution_count”: 263, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# on the train set n”, “accuracy_score(y_train,rf.predict(X_train)) , n”, “recall_score(y_train,rf.predict(X_train)), n”, “f1_score(y_train,rf.predict(X_train), average=’binary’, pos_label=1)” ] }, { “cell_type”: “code”, “execution_count”: 264, “id”: “91827f90”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(0.9546418965200394, 0.41668909825033645, 0.5327826535880227)” ] }, “execution_count”: 264, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# on the valid set n”, “accuracy_score(y_val,rf.predict(X_val)) , n”, “recall_score(y_val,rf.predict(X_val)), n”, “f1_score(y_val,rf.predict(X_val), average=’binary’, pos_label=1) “ ] }, { “cell_type”: “markdown”, “id”: “e82f54cc”, “metadata”: {}, “source”: [ “Looking at what happens to the oob error rate as we add more and more trees, we you can see that the improvement levels off quite a bit after around 40 trees:” ] }, { “cell_type”: “code”, “execution_count”: 377, “id”: “d72ea983”, “metadata”: {}, “outputs”: [ { “name”: “stderr”, “output_type”: “stream”, “text”: [ “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable OOB estimates. n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “X does not have valid feature names, but RandomForestClassifier was fitted with feature names n” ] }, { “data”: { “text/plain”: [ “Text(0, 0.5, ‘OOB error rate’)” ] }, “execution_count”: 377, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 432x288 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “scores =[] n”, “for k in range(1, 50): n”, “ rfc = RandomForestClassifier(n_estimators = k, max_samples=100_000, max_features=0.5, min_samples_leaf= 5, n”, “ bootstrap= True,oob_score = True,random_state=14) n”, “ rfc.fit(X_train, y_train) n”, “ #y_pred = rfc.predict(X_val) n”, “ #scores.append(accuracy_score(y_test, y_pred)) oob_score n”, “ oob_error = 1 - rfc.oob_score_ n”, “ scores.append(oob_error) n”, “ n”, “import matplotlib.pyplot as plt n”, “%matplotlib inline n”, “ n”, “# plot the relationship between K and testing accuracy n”, “# plt.plot(x_axis, y_axis) n”, “plt.plot(range(1, 50), scores) n”, “plt.xlabel(‘Value of n_estimators for Random Forest Classifier’) n”, “#plt.ylabel(‘Testing Accuracy’) n”, “plt.ylabel(‘OOB error rate’)” ] }, { “cell_type”: “markdown”, “id”: “1643b017”, “metadata”: {}, “source”: [ “Let’s try to improve our model : n”, “ n”, “We may ask which columns are the strongest predictors, which can we ignore?” ] }, { “cell_type”: “markdown”, “id”: “bfc364b8”, “metadata”: {}, “source”: [ “It’s not normally enough just to know that a model can make accurate predictions—we also want to know how it’s making predictions. Feature importance gives us insight into this. We can get these directly from sklearn’s random forest by looking in the feature_importances_ attribute. Here’s a simple function we can use to pop them into a DataFrame and sort them:” ] }, { “cell_type”: “code”, “execution_count”: 265, “id”: “55ca1a70”, “metadata”: {}, “outputs”: [], “source”: [ “def rf_feat_importance(m, df): n”, “ return pd.DataFrame({‘cols’:df.columns, ‘imp’:m.feature_importances_} n”, “ ).sort_values(‘imp’, ascending=False)” ] }, { “cell_type”: “code”, “execution_count”: 266, “id”: “585b0f9f”, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;cols&lt;/th&gt; n”, “ &lt;th&gt;imp&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;16&lt;/th&gt; n”, “ &lt;td&gt;capital_gains&lt;/td&gt; n”, “ &lt;td&gt;0.161368&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;18&lt;/th&gt; n”, “ &lt;td&gt;dividends_from_stocks&lt;/td&gt; n”, “ &lt;td&gt;0.132382&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;0&lt;/th&gt; n”, “ &lt;td&gt;age&lt;/td&gt; n”, “ &lt;td&gt;0.094106&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;3&lt;/th&gt; n”, “ &lt;td&gt;detailed_occupation_recode&lt;/td&gt; n”, “ &lt;td&gt;0.081452&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;38&lt;/th&gt; n”, “ &lt;td&gt;weeks_worked_in_year&lt;/td&gt; n”, “ &lt;td&gt;0.076202&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2&lt;/th&gt; n”, “ &lt;td&gt;detailed_industry_recode&lt;/td&gt; n”, “ &lt;td&gt;0.056239&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;12&lt;/th&gt; n”, “ &lt;td&gt;sex&lt;/td&gt; n”, “ &lt;td&gt;0.054394&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;4&lt;/th&gt; n”, “ &lt;td&gt;education&lt;/td&gt; n”, “ &lt;td&gt;0.049652&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;17&lt;/th&gt; n”, “ &lt;td&gt;capital_losses&lt;/td&gt; n”, “ &lt;td&gt;0.047552&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;29&lt;/th&gt; n”, “ &lt;td&gt;num_persons_worked_for_employer&lt;/td&gt; n”, “ &lt;td&gt;0.040222&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;9&lt;/th&gt; n”, “ &lt;td&gt;major_occupation_code&lt;/td&gt; n”, “ &lt;td&gt;0.039596&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;8&lt;/th&gt; n”, “ &lt;td&gt;major_industry_code&lt;/td&gt; n”, “ &lt;td&gt;0.031488&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;1&lt;/th&gt; n”, “ &lt;td&gt;class_of_worker&lt;/td&gt; n”, “ &lt;td&gt;0.014878&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;19&lt;/th&gt; n”, “ &lt;td&gt;tax_filer_stat&lt;/td&gt; n”, “ &lt;td&gt;0.013542&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “ cols imp n”, “16 capital_gains 0.161368 n”, “18 dividends_from_stocks 0.132382 n”, “0 age 0.094106 n”, “3 detailed_occupation_recode 0.081452 n”, “38 weeks_worked_in_year 0.076202 n”, “2 detailed_industry_recode 0.056239 n”, “12 sex 0.054394 n”, “4 education 0.049652 n”, “17 capital_losses 0.047552 n”, “29 num_persons_worked_for_employer 0.040222 n”, “9 major_occupation_code 0.039596 n”, “8 major_industry_code 0.031488 n”, “1 class_of_worker 0.014878 n”, “19 tax_filer_stat 0.013542” ] }, “execution_count”: 266, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “fi = rf_feat_importance(rf, X_train) n”, “fi[:14]” ] }, { “cell_type”: “markdown”, “id”: “e9fa5308”, “metadata”: {}, “source”: [ “The feature importances for our model show that the first few most important columns have much higher importance scores than the rest, with (not surprisingly) capital_gains and dividends_from_stocks being at the top of the list. n”, “ n”, “A plot of the feature importances shows the relative importances more clearly:” ] }, { “cell_type”: “code”, “execution_count”: 267, “id”: “764fc43f”, “metadata”: {}, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 864x504 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “def plot_fi(fi): n”, “ return fi.plot(‘cols’, ‘imp’, ‘barh’, figsize=(12,7), legend=False) n”, “ n”, “plot_fi(fi[:30]);” ] }, { “cell_type”: “markdown”, “id”: “e9aae4a9”, “metadata”: {}, “source”: [ “The way these importances are calculated is quite simple yet elegant. The feature importance algorithm loops through each tree, and then recursively explores each branch. At each branch, it looks to see what feature was used for that split, and how much the model improves as a result of that split. The improvement (weighted by the number of rows in that group) is added to the importance score for that feature. This is summed across all branches of all trees, and finally the scores are normalized such that they add to 1. n”, “ n”, “It seems likely that we could use just a subset of the columns by removing the variables of low importance and still get good results. Let’s try just keeping those with a feature importance greater than 0.005:” ] }, { “cell_type”: “code”, “execution_count”: 268, “id”: “940e4da7”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “25” ] }, “execution_count”: 268, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “to_keep = fi[fi.imp&gt;0.005].cols n”, “len(to_keep)” ] }, { “cell_type”: “markdown”, “id”: “b55a3bb4”, “metadata”: {}, “source”: [ “We can retrain our model using just this subset of the columns:” ] }, { “cell_type”: “code”, “execution_count”: 269, “id”: “2aabeeae”, “metadata”: {}, “outputs”: [], “source”: [ “X_train_imp = X_train[to_keep] n”, “X_val_imp = X_val[to_keep]” ] }, { “cell_type”: “code”, “execution_count”: 270, “id”: “38d1a7e5”, “metadata”: {}, “outputs”: [ { “name”: “stderr”, “output_type”: “stream”, “text”: [ “/Users/rmbp/opt/anaconda3/lib/python3.7/site-packages/sklearn/base.py:446: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names n”, “ &quot;X does not have valid feature names, but&quot; n” ] }, { “data”: { “text/plain”: [ “RandomForestClassifier(max_features=0.5, max_samples=100000, min_samples_leaf=5, n”, “ n_estimators=50, oob_score=True, random_state=14)” ] }, “execution_count”: 270, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “m = RandomForestClassifier(n_estimators = 50, max_samples=100_000, max_features=0.5, min_samples_leaf= 5, n”, “ bootstrap= True,oob_score = True,random_state=14) n”, “ n”, “m.fit(X_train_imp,y_train)” ] }, { “cell_type”: “code”, “execution_count”: 271, “id”: “f665f452”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(0.9670857617458795, 0.5334025614399446, 0.6679188037275157)” ] }, “execution_count”: 271, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# on the train set n”, “accuracy_score(y_train,m.predict(X_train_imp)) , n”, “recall_score(y_train,m.predict(X_train_imp)), n”, “f1_score(y_train,m.predict(X_train_imp), average=’binary’, pos_label=1)” ] }, { “cell_type”: “code”, “execution_count”: 272, “id”: “a2ace7ea”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(0.9543077668443123, 0.4142664872139973, 0.5295028384655084)” ] }, “execution_count”: 272, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “# on the valid set n”, “accuracy_score(y_val,m.predict(X_val_imp)) , n”, “recall_score(y_val,m.predict(X_val_imp)), n”, “f1_score(y_val,m.predict(X_val_imp), average=’binary’, pos_label=1) “ ] }, { “cell_type”: “markdown”, “id”: “884c0ff3”, “metadata”: {}, “source”: [ “Our accuracy is about the same, but we have far fewer columns to study:” ] }, { “cell_type”: “code”, “execution_count”: 273, “id”: “ac4384f1”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(40, 25)” ] }, “execution_count”: 273, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “len(X_train.columns), len(X_train_imp.columns)” ] }, { “cell_type”: “markdown”, “id”: “3e90f279”, “metadata”: {}, “source”: [ “We’ve found that generally the first step to improving a model is simplifying it—48 columns was too many for us to study them all in depth! Furthermore, in practice often a simpler, more interpretable model is easier to roll out and maintain. n”, “ n”, “This also makes our feature importance plot easier to interpret. Let’s look at it again:” ] }, { “cell_type”: “code”, “execution_count”: 274, “id”: “c6f4c876”, “metadata”: {}, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 864x504 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “plot_fi(rf_feat_importance(m, X_train_imp));” ] }, { “cell_type”: “markdown”, “id”: “66fcb198”, “metadata”: {}, “source”: [ “Let’s see if we have redundent feature in our model by determining their similarities : n”, “ n”, “&gt; Determining Similarity: The most similar pairs are found by calculating the rank correlation, which means that all the values are replaced with their rank (i.e., first, second, third, etc. within the column), and then the correlation is calculated. “ ] }, { “cell_type”: “code”, “execution_count”: 275, “id”: “3638a4d8”, “metadata”: {}, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 720x432 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “import scipy n”, “from scipy.cluster import hierarchy as hc n”, “ n”, “def cluster_columns(df, figsize=(10,6), font_size=12): n”, “ corr = np.round(scipy.stats.spearmanr(df).correlation, 4) n”, “ corr_condensed = hc.distance.squareform(1-corr) n”, “ z = hc.linkage(corr_condensed, method=’average’) n”, “ fig = plt.figure(figsize=figsize) n”, “ hc.dendrogram(z, labels=df.columns, orientation=’left’, leaf_font_size=font_size) n”, “ plt.show() n”, “ n”, “cluster_columns(X_train_imp)” ] }, { “cell_type”: “markdown”, “id”: “9d003779”, “metadata”: {}, “source”: [ “Looking good! This is really not much worse than the model with all the fields. Let’s create DataFrames without these columns, and save them:” ] }, { “cell_type”: “code”, “execution_count”: 276, “id”: “790719da”, “metadata”: {}, “outputs”: [], “source”: [ “X_train_final = X_train_imp # train n”, “X_val_final = X_val_imp # valid n”, “ n”, “test_x_final = test_x[to_keep] # test set” ] }, { “cell_type”: “code”, “execution_count”: 277, “id”: “5eea5af2”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “((139666, 25), (59857, 25), (99762, 25))” ] }, “execution_count”: 277, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “X_train_final.shape , X_val_final.shape, test_x_final.shape” ] }, { “cell_type”: “markdown”, “id”: “634ec23d”, “metadata”: {}, “source”: [ “# Model Assesment :” ] }, { “cell_type”: “markdown”, “id”: “1094dc41”, “metadata”: {}, “source”: [ “We have seen the DecisionTreeClassifier as our basemodel, then we tried RandomForestClassifier and finaly we tried to optimize so we can have less features for better interpretation. n”, “ n”, “Here is the model metrics on our validation set :” ] }, { “cell_type”: “code”, “execution_count”: 278, “id”: “a4abf0e1”, “metadata”: {}, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 720x360 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “models_metrics = {‘DTC’: [0.95, 0.42, 0.51], n”, “ ‘RF’: [0.96, 0.42, 0.53], n”, “ ‘RF_less_feat’: [0.95, 0.41, 0.53] n”, “ n”, “ } n”, “df = pd.DataFrame(data = models_metrics) n”, “df.rename(index={0:’Accuracy’,1:’Recall’, 2: ‘F1 score’}, n”, “ inplace=True) n”, “ax = df.plot(kind=’bar’, figsize = (10,5), n”, “ color = [‘gold’, ‘lightgreen’,’lightcoral’], n”, “ rot = 0, title =’Models performance’, n”, “ edgecolor = ‘grey’, alpha = 0.5) n”, “for p in ax.patches: n”, “ ax.annotate(str(p.get_height()), (p.get_x() * 1.01, p.get_height() * 1.0005)) n”, “plt.show()” ] }, { “cell_type”: “markdown”, “id”: “1f1c1dbf”, “metadata”: {}, “source”: [ “Based on F1 score, we select the RandomForestClassifier with 25 features as our best model. n”, “ n”, “ n”, “Let’s see the experiment results* of this model :” ] }, { “cell_type”: “markdown”, “id”: “ad62806b”, “metadata”: {}, “source”: [ “The precision_recall_curve and roc_curve are useful tools to visualize the sensitivity-specificty tradeoff in the classifier. They help inform a data scientist where to set the decision threshold of the model to maximize either sensitivity or specificity. This is called the operating point of the model.” ] }, { “cell_type”: “code”, “execution_count”: 279, “id”: “d105b7e1”, “metadata”: {}, “outputs”: [], “source”: [ “from sklearn.metrics import roc_curve, precision_recall_curve, n”, “auc, make_scorer, recall_score, accuracy_score, precision_score, confusion_matrix n” ] }, { “cell_type”: “code”, “execution_count”: 280, “id”: “bdaab749”, “metadata”: {}, “outputs”: [], “source”: [ “# We create an array of the class probabilites called y_scores n”, “y_scores = m.predict_proba(X_val_imp)[:, 1] n”, “ n”, “# we enerate the precision-recall curve for the classifier: n”, “p, r, thresholds = precision_recall_curve(y_val, y_scores) n”, “ n”, “# We calculate the F1 scores n”, “f1_scores = 2rp/(r+p)” ] }, { “cell_type”: “markdown”, “id”: “f619e5e6”, “metadata”: {}, “source”: [ “Let’s plot the decision chart of our model :” ] }, { “cell_type”: “code”, “execution_count”: 281, “id”: “2103b5e2”, “metadata”: {}, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 576x576 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “def plot_precision_recall_vs_threshold(precisions, recalls, thresholds): n”, “ n”, “ plt.figure(figsize=(8, 8)) n”, “ plt.title(&quot;Precision, Recall Scores and F1 scores as a function of the decision threshold&quot;) n”, “ plt.plot(thresholds, precisions[:-1], &quot;b–&quot;, label=&quot;Precision&quot;) n”, “ plt.plot(thresholds, recalls[:-1], &quot;g-&quot;, label=&quot;Recall&quot;) n”, “ plt.plot(thresholds, f1_scores[:-1], &quot;r-&quot;, label=&quot;F1-score&quot;) n”, “ plt.ylabel(&quot;Score&quot;) n”, “ plt.xlabel(&quot;Decision Threshold&quot;) n”, “ plt.legend(loc=’best’) n”, “ n”, “plot_precision_recall_vs_threshold(p, r, thresholds) “ ] }, { “cell_type”: “markdown”, “id”: “1d7bf695”, “metadata”: {}, “source”: [ “We can see that the the optimal threshold to achieve the highest F1 score is set at 0.30 with 59% F1-score.” ] }, { “cell_type”: “code”, “execution_count”: 282, “id”: “7dc108d2”, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Best threshold: 0.30834595959595956 n”, “Best F1-Score: 0.5950888192267503 n” ] } ], “source”: [ “print(‘Best threshold: ‘, thresholds[np.argmax(f1_scores)]) n”, “print(‘Best F1-Score: ‘, np.max(f1_scores))” ] }, { “cell_type”: “markdown”, “id”: “e02f7e1d”, “metadata”: {}, “source”: [ “Let’s creat an animated confusion matrix where the users get to choose the threesholds and we dislpay the confusion matrix and recall vs precision curve :” ] }, { “cell_type”: “code”, “execution_count”: 283, “id”: “6515ea03”, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Requirement already satisfied: ipywidgets in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (7.6.5) n”, “Requirement already satisfied: ipython-genutils~=0.2.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipywidgets) (0.2.0) n”, “Requirement already satisfied: jupyterlab-widgets&gt;=1.0.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipywidgets) (1.0.0) n”, “Requirement already satisfied: ipykernel&gt;=4.5.1 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipywidgets) (5.3.4) n”, “Requirement already satisfied: traitlets&gt;=4.3.1 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipywidgets) (5.1.1) n”, “Requirement already satisfied: ipython&gt;=4.0.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipywidgets) (7.22.0) n”, “Requirement already satisfied: nbformat&gt;=4.2.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipywidgets) (5.1.3) n”, “Requirement already satisfied: widgetsnbextension~=3.5.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipywidgets) (3.5.1) n”, “Requirement already satisfied: appnope in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets) (0.1.2) n”, “Requirement already satisfied: tornado&gt;=4.2 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets) (6.1) n”, “Requirement already satisfied: jupyter-client in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets) (7.0.1) n”, “Requirement already satisfied: setuptools&gt;=18.5 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets) (58.0.4) n”, “Requirement already satisfied: decorator in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets) (5.1.0) n”, “Requirement already satisfied: pygments in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets) (2.10.0) n”, “Requirement already satisfied: backcall in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets) (0.2.0) n”, “Requirement already satisfied: pexpect&gt;4.3 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets) (4.8.0) n”, “Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,&lt;3.1.0,&gt;=2.0.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets) (3.0.20) n”, “Requirement already satisfied: pickleshare in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets) (0.7.5) n”, “Requirement already satisfied: jedi&gt;=0.16 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets) (0.18.1) n”, “Requirement already satisfied: parso&lt;0.9.0,&gt;=0.8.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=4.0.0-&gt;ipywidgets) (0.8.3) n”, “Requirement already satisfied: jsonschema!=2.5.0,&gt;=2.4 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from nbformat&gt;=4.2.0-&gt;ipywidgets) (3.2.0) n”, “Requirement already satisfied: jupyter-core in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from nbformat&gt;=4.2.0-&gt;ipywidgets) (4.9.1) n”, “Requirement already satisfied: attrs&gt;=17.4.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets) (21.2.0) n”, “Requirement already satisfied: importlib-metadata in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets) (4.8.1) n”, “Requirement already satisfied: pyrsistent&gt;=0.14.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets) (0.18.0) n”, “Requirement already satisfied: six&gt;=1.11.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets) (1.16.0) n”, “Requirement already satisfied: ptyprocess&gt;=0.5 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from pexpect&gt;4.3-&gt;ipython&gt;=4.0.0-&gt;ipywidgets) (0.7.0) n”, “Requirement already satisfied: wcwidth in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,&lt;3.1.0,&gt;=2.0.0-&gt;ipython&gt;=4.0.0-&gt;ipywidgets) (0.2.5) n”, “Requirement already satisfied: notebook&gt;=4.4.1 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from widgetsnbextension~=3.5.0-&gt;ipywidgets) (6.4.5) n”, “Requirement already satisfied: prometheus-client in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (0.11.0) n”, “Requirement already satisfied: nbconvert in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (6.1.0) n”, “Requirement already satisfied: jinja2 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (2.11.3) n”, “Requirement already satisfied: pyzmq&gt;=17 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (22.2.1) n”, “Requirement already satisfied: argon2-cffi in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (20.1.0) n”, “Requirement already satisfied: Send2Trash&gt;=1.5.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (1.8.0) n”, “Requirement already satisfied: terminado&gt;=0.8.3 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (0.9.4) n”, “Requirement already satisfied: nest-asyncio&gt;=1.5 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from jupyter-client-&gt;ipykernel&gt;=4.5.1-&gt;ipywidgets) (1.5.1) n”, “Requirement already satisfied: python-dateutil&gt;=2.1 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from jupyter-client-&gt;ipykernel&gt;=4.5.1-&gt;ipywidgets) (2.8.2) n”, “Requirement already satisfied: entrypoints in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from jupyter-client-&gt;ipykernel&gt;=4.5.1-&gt;ipywidgets) (0.3) n”, “Requirement already satisfied: cffi&gt;=1.0.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from argon2-cffi-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (1.15.0) n”, “Requirement already satisfied: pycparser in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from cffi&gt;=1.0.0-&gt;argon2-cffi-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (2.21) n”, “Requirement already satisfied: typing-extensions&gt;=3.6.4 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from importlib-metadata-&gt;jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets) (3.10.0.2) n”, “Requirement already satisfied: zipp&gt;=0.5 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from importlib-metadata-&gt;jsonschema!=2.5.0,&gt;=2.4-&gt;nbformat&gt;=4.2.0-&gt;ipywidgets) (3.6.0) n”, “Requirement already satisfied: MarkupSafe&gt;=0.23 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from jinja2-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (2.0.1) n”, “Requirement already satisfied: mistune&lt;2,&gt;=0.8.1 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (0.8.4) n”, “Requirement already satisfied: pandocfilters&gt;=1.4.1 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (1.4.3) n”, “Requirement already satisfied: defusedxml in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (0.7.1) n”, “Requirement already satisfied: bleach in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (4.0.0) n”, “Requirement already satisfied: nbclient&lt;0.6.0,&gt;=0.5.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (0.5.3) n”, “Requirement already satisfied: jupyterlab-pygments in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (0.1.2) n”, “Requirement already satisfied: testpath in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (0.5.0) n” ] }, { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Requirement already satisfied: async-generator in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from nbclient&lt;0.6.0,&gt;=0.5.0-&gt;nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (1.10) n”, “Requirement already satisfied: webencodings in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from bleach-&gt;nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (0.5.1) n”, “Requirement already satisfied: packaging in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from bleach-&gt;nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (21.0) n”, “Requirement already satisfied: pyparsing&gt;=2.0.2 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from packaging-&gt;bleach-&gt;nbconvert-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.5.0-&gt;ipywidgets) (3.0.4) n”, “Note: you may need to restart the kernel to use updated packages. n” ] } ], “source”: [ “pip install ipywidgets” ] }, { “cell_type”: “code”, “execution_count”: 284, “id”: “1ae10d23”, “metadata”: {}, “outputs”: [], “source”: [ “import ipywidgets as widgets n” ] }, { “cell_type”: “code”, “execution_count”: 285, “id”: “0f47f43f”, “metadata”: { “code_folding”: [] }, “outputs”: [], “source”: [ “import itertools n”, “def plot_confusion_matrix(cm, classes, n”, “ normalize = False, n”, “ title = ‘Confusion matrix&quot;’, n”, “ cmap = plt.cm.Blues) : n”, “ plt.imshow(cm, interpolation = ‘nearest’, cmap = cmap) n”, “ plt.title(title) n”, “ plt.colorbar() n”, “ tick_marks = np.arange(len(classes)) n”, “ plt.xticks(tick_marks, classes, rotation = 0) n”, “ plt.yticks(tick_marks, classes) n”, “ n”, “ thresh = cm.max() / 2. n”, “ for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])) : n”, “ plt.text(j, i, cm[i, j], n”, “ horizontalalignment = ‘center’, n”, “ color = ‘white’ if cm[i, j] &gt; thresh else ‘black’) n”, “ n”, “ plt.tight_layout() n”, “ plt.ylabel(‘True label’) n”, “ plt.xlabel(‘Predicted label’) n”, “ n”, “def adjusted_classes(y_scores, t): n”, “ &quot;&quot;&quot; n”, “ This function adjusts class predictions based on the prediction threshold (t). n”, “ Will only work for binary classification problems. n”, “ &quot;&quot;&quot; n”, “ return [1 if y &gt;= t else 0 for y in y_scores] n”, “ n”, “def precision_recall_threshold(p, r, thresholds, t=0.5): n”, “ &quot;&quot;&quot; n”, “ plots the precision recall curve and shows the current value for each n”, “ by identifying the classifier’s threshold (t). n”, “ &quot;&quot;&quot; n”, “ n”, “ # generate new class predictions based on the adjusted_classes n”, “ # function above and view the resulting confusion matrix. n”, “ y_pred_adj = adjusted_classes(y_scores, t) n”, “ n”, “ cm = confusion_matrix(y_val, y_pred_adj) n”, “ class_names = [0,1] n”, “ plt.figure() n”, “ plot_confusion_matrix(cm, n”, “ classes=class_names, n”, “ title=’RF Confusion matrix’) n”, “ n”, “ plt.figure(figsize=(8,8)) n”, “ plt.title(&quot;Precision and Recall curve ^ = current threshold&quot;) n”, “ plt.step(r, p, color=’b’, alpha=0.2, n”, “ where=’post’) n”, “ plt.fill_between(r, p, step=’post’, alpha=0.2, n”, “ color=’b’) n”, “ n”, “ plt.xlabel(‘Recall’); n”, “ plt.ylabel(‘Precision’); n”, “ n”, “ # plot the current threshold on the line n”, “ close_default_clf = np.argmin(np.abs(thresholds - t)) n”, “ plt.plot(r[close_default_clf], p[close_default_clf], ‘^’, c=’k’, n”, “ markersize=15)” ] }, { “cell_type”: “code”, “execution_count”: 286, “id”: “4f079877”, “metadata”: {}, “outputs”: [ { “data”: { “application/vnd.jupyter.widget-view+json”: { “model_id”: “bc7ac84eb2ec49fdb3dd491690dec1bf”, “version_major”: 2, “version_minor”: 0 }, “text/plain”: [ “IntSlider(value=3, description=’Slider:’, max=10)” ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “slider = widgets.IntSlider( n”, “ min=0, n”, “ max=10, n”, “ step=1, n”, “ description=’Slider:’, n”, “ value=3 # The best threshhold for our model n”, “) n”, “display(slider) n”, “ n” ] }, { “cell_type”: “code”, “execution_count”: 287, “id”: “963f3740”, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “For this threshold : 0.3, the confusion matrix is as follow : n” ] }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 432x288 with 2 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 576x576 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “print(f’For this threshold : {slider.value/10}, the confusion matrix is as follow :’) n”, “precision_recall_threshold(p, r, thresholds, slider.value/10)” ] }, { “cell_type”: “code”, “execution_count”: 288, “id”: “8ab92561”, “metadata”: {}, “outputs”: [], “source”: [ “def plot_roc_curve(fpr, tpr, label=None): n”, “ plt.figure(figsize=(8,8)) n”, “ plt.title(‘ROC Curve’) n”, “ plt.plot(fpr, tpr, linewidth=2, label=label) n”, “ plt.plot([0, 1], [0, 1], ‘k–’) n”, “ plt.axis([-0.005, 1, 0, 1.005]) n”, “ plt.xticks(np.arange(0,1, 0.05), rotation=90) n”, “ plt.xlabel(&quot;False Positive Rate&quot;) n”, “ plt.ylabel(&quot;True Positive Rate (Recall)&quot;) n”, “ plt.legend(loc=’best’)” ] }, { “cell_type”: “code”, “execution_count”: 289, “id”: “3a5aa9a4”, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “AUC : 0.9433941778952841 n” ] }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 576x576 with 1 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “fpr, tpr, auc_thresholds = roc_curve(y_val, y_scores) n”, “print(f’AUC : {auc(fpr, tpr)}’) # AUC of ROC n”, “plot_roc_curve(fpr, tpr, ‘recall_optimized’)” ] }, { “cell_type”: “markdown”, “id”: “224c741c”, “metadata”: {}, “source”: [ “Now, let’s test this model on our test set : “ ] }, { “cell_type”: “code”, “execution_count”: 290, “id”: “8dc336ed”, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(0.9546420480744171, 0.4183640478499838, 0.5335532419338213)” ] }, “execution_count”: 290, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “accuracy_score(test_y,m.predict(test_x_final)) , n”, “recall_score(test_y,m.predict(test_x_final)) , n”, “f1_score(test_y,m.predict(test_x_final), average=’binary’, pos_label=1)” ] }, { “cell_type”: “markdown”, “id”: “38b897e7”, “metadata”: {}, “source”: [ “# Results : Partial dependency and SHAP values” ] }, { “cell_type”: “markdown”, “id”: “636344f8”, “metadata”: {}, “source”: [ “Let’s look at partial dependence plots. n”, “ n”, “Partial dependence plots try to answer the question: if a row varied on nothing other than the feature in question, how would it impact the dependent variable? n”, “ n”, “For instance, how does capital_gains and dividends_from_stocks impact probability of belonging to the +50k income levl, all other things being equal?” ] }, { “cell_type”: “code”, “execution_count”: 291, “id”: “308f7359”, “metadata”: {}, “outputs”: [ { “name”: “stderr”, “output_type”: “stream”, “text”: [ “/Users/rmbp/opt/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_partial_dependence is deprecated; Function plot_partial_dependence is deprecated in 1.0 and will be removed in 1.2. Use PartialDependenceDisplay.from_estimator instead n”, “ warnings.warn(msg, category=FutureWarning) n” ] }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 1440x576 with 3 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “from sklearn.inspection import plot_partial_dependence n”, “ n”, “fig,ax = plt.subplots(figsize=(20, 8)) n”, “plot_partial_dependence(m, X_val_final, [‘capital_gains’,’dividends_from_stocks’], percentiles=(0,1), n”, “ grid_resolution=15, ax=ax);” ] }, { “cell_type”: “markdown”, “id”: “99d24637”, “metadata”: {}, “source”: [ “Looking first at the dividends_from_stocks plot, we can see a nearly linear relationship between capital dividends_from_stocks and the probabillity of income level. n”, “Same for capital_gains at 5 standad deviation from the mean after reaching a steady state above that.” ] }, { “cell_type”: “code”, “execution_count”: 292, “id”: “96f678a6”, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Requirement already satisfied: shap in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (0.40.0) n”, “Requirement already satisfied: numpy in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from shap) (1.21.2) n”, “Requirement already satisfied: pandas in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from shap) (1.3.4) n”, “Requirement already satisfied: scipy in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from shap) (1.7.1) n”, “Requirement already satisfied: scikit-learn in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from shap) (1.0.1) n”, “Requirement already satisfied: slicer==0.0.7 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from shap) (0.0.7) n”, “Requirement already satisfied: cloudpickle in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from shap) (2.0.0) n”, “Requirement already satisfied: numba in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from shap) (0.53.1) n”, “Requirement already satisfied: tqdm&gt;4.25.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from shap) (4.62.3) n”, “Requirement already satisfied: packaging&gt;20.9 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from shap) (21.0) n”, “Requirement already satisfied: pyparsing&gt;=2.0.2 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from packaging&gt;20.9-&gt;shap) (3.0.4) n”, “Requirement already satisfied: setuptools in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from numba-&gt;shap) (58.0.4) n”, “Requirement already satisfied: llvmlite&lt;0.37,&gt;=0.36.0rc1 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from numba-&gt;shap) (0.36.0) n”, “Requirement already satisfied: python-dateutil&gt;=2.7.3 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from pandas-&gt;shap) (2.8.2) n”, “Requirement already satisfied: pytz&gt;=2017.3 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from pandas-&gt;shap) (2021.3) n”, “Requirement already satisfied: six&gt;=1.5 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from python-dateutil&gt;=2.7.3-&gt;pandas-&gt;shap) (1.16.0) n”, “Requirement already satisfied: threadpoolctl&gt;=2.0.0 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from scikit-learn-&gt;shap) (2.2.0) n”, “Requirement already satisfied: joblib&gt;=0.11 in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (from scikit-learn-&gt;shap) (1.1.0) n” ] } ], “source”: [ “!pip install shap” ] }, { “cell_type”: “code”, “execution_count”: 293, “id”: “68cceab4”, “metadata”: {}, “outputs”: [], “source”: [ “import shap” ] }, { “cell_type”: “code”, “execution_count”: 370, “id”: “5a3c7bba”, “metadata”: {}, “outputs”: [], “source”: [ “row_to_show = 20 n”, “data_for_prediction = test_x_final.iloc[row_to_show] # use 1 row of data here. Could use multiple rows if desired n” ] }, { “cell_type”: “code”, “execution_count”: 371, “id”: “80ea2e86”, “metadata”: {}, “outputs”: [], “source”: [ “# Create object that can calculate shap values n”, “explainer = shap.TreeExplainer(m) n”, “ n”, “# Calculate Shap values n”, “shap_values = explainer.shap_values(data_for_prediction)” ] }, { “cell_type”: “markdown”, “id”: “8c9cba69”, “metadata”: {}, “source”: [ “The above explanation shows features each contributing to push the model output from the base value (the average model output over the training dataset we passed) to the model output. Features pushing the prediction higher are shown in red, those pushing the prediction lower are in blue n”, “ n”, “- The base_value here is 0.062 while our predicted value is 0.0. n”, “- sex = 1 has the biggest impact on increasing the prediction, while n”, “- Weeks_worked_im_year (below the average) and Age (below the average) feature has the biggest effect in decreasing the prediction.” ] }, { “cell_type”: “code”, “execution_count”: 373, “id”: “f734340b”, “metadata”: {}, “outputs”: [ { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 576x684 with 2 Axes&gt;” ] }, “metadata”: { “needs_background”: “light” }, “output_type”: “display_data” } ], “source”: [ “explainer = shap.TreeExplainer(m) n”, “ n”, “# calculate shap values. This is what we will plot. n”, “# Calculate shap_values for all of val_X rather than a single row, to have more data for plot. n”, “shap_values = explainer.shap_values(test_x_final.iloc[:1000,]) n”, “ n”, “# Make plot. Index of [1] is explained in text below. n”, “shap.summary_plot(shap_values[1],test_x_final.iloc[:1000,])” ] }, { “cell_type”: “markdown”, “id”: “07ea5125”, “metadata”: {}, “source”: [ “For every dot: n”, “ n”, “- Vertical location shows what feature it is depicting n”, “- Color shows whether that feature was high or low for that row of the dataset n”, “- Horizontal location shows whether the effect of that value caused a higher or lower prediction. n”, “ n”, “For the age variable, the point in the upper left was depicts a person whose age level is less thereby reducing the prediction of income level +50k class by 0.2.” ] }, { “cell_type”: “markdown”, “id”: “102c0f5c”, “metadata”: {}, “source”: [ “# Conclusion :” ] }, { “cell_type”: “markdown”, “id”: “6708b24a”, “metadata”: {}, “source”: [ “In this work, we presented some techniques for dealing with a machine learning project : n”, “ n”, “- We used Decision Tree ensembles : Random Forest are the easiest to train, because they are extremely resilient to hyperparameter choices and require very little preprocessing. They are very fast to train, and should not overfit if we have enough trees. n”, “ n”, “- we used the model for feature selection and partial dependence analysis and Shap values, to get a better understanding of our data. n”, “ n”, “For futur improvements : n”, “- We can try Gradient Boosting machines as in theory are just as fast to train as random forests, but in practice we will have to try lots of different hyperparameters. They can overfit, but they are often a little more accurate than random forests. n”, “ n”, “- We can try OneHotEncoder with PCA to deal with the multiple modalities on our categorical variables. n”, “ n”, “- We can creat new features to challenge the model performance.” ] }, { “cell_type”: “code”, “execution_count”: null, “id”: “ef5811fa”, “metadata”: {}, “outputs”: [], “source”: [] }, { “cell_type”: “code”, “execution_count”: null, “id”: “9288bcc2”, “metadata”: {}, “outputs”: [], “source”: [] }, { “cell_type”: “code”, “execution_count”: null, “id”: “efe51c18”, “metadata”: {}, “outputs”: [], “source”: [] }, { “cell_type”: “code”, “execution_count”: null, “id”: “fa46d66a”, “metadata”: {}, “outputs”: [], “source”: [] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.7.7” } }, “nbformat”: 4, “nbformat_minor”: 5 } .",
            "url": "https://younesszaim.github.io/myportfolio/2021/11/20/uscensus.ipynb",
            "relUrl": "/2021/11/20/uscensus.ipynb",
            "date": " • Nov 20, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Sickit-Learn for Machine Learning",
            "content": "About . In this chapter we’ll use the California Housing Prices dataset from the StatLib repository This dataset is based on data from the 1990 California census. . This data includes metrics such as the population, median income, and median housing price for each block group in California. Block groups are the smallest geographical unit for which the US Census Bureau publishes sample data (a block group typical). . Your model should learn from this data and be able to predict the median housing price in any district, given all the other metrics. . Goal : Your boss answers that your model’s output (a prediction of a district’s median housing price) will be fed to another Machine Learning system , along with many other signals. This downstream system will determine whether it is worth investing in a given area or not. Getting this right is critical, as it directly affects revenue. . First, you need to frame the problem: is it supervised, unsupervised, or Reinforcement Learning? Is it a classification task, a regression task, or something else? Should you use batch learning or online learning techniques? . Let’s see: it is clearly a typical supervised learning task, since you are given labeled training examples. . It is also a typical regression task, since you are asked to predict a value. More specifically, this is a multiple regression problem, since the system will use multiple features to make a prediction. . It is also a univariate regression problem, since we are only trying to predict a single value for each district. If we were trying to predict multiple values per district, it would be a multivariate regression problem. . Finally, there is no continuous flow of data coming into the system, there is no particular need to adjust to changing data rapidly, and the data is small enough to fit in memory, so plain batch learning should do just fine. . Select a Performance Measure . Performance Measures for our univariate regression problem . Typical performance measure for regression problems : . Root Mean Square Error (RMSE): it gives an idea of how much error the system typically makes in its predictions, with a higher weight for large errors : Since the errors are squared before they are averaged, the RMSE gives a relatively high weight to large errors. This means the RMSE should be more useful when large errors are particularly undesirable. . RMSE is sensitive to outliers : If we make a single very bad prediction, taking the square will make the error even worse and it may skew the metric towards overestimating the model’s badness. Actually, it’s hard to realize if our model is good or not by looking at the absolute values of MSE or MSE : We would probably want to measure how much our model is better than the constant baseline : A model should at least perform better than the RMSE score constant baseline. . RMSE has the benefit of penalizing large errors more so can be more appropriate in some cases, for example, if being off by 10 is more than twice as bad as being off by 5. But if being off by 10 is just twice as bad as being off by 5, then MAE is more appropriate. . | . Root Mean Square Log Error (RMSLE): It is an extension on root Mean Squared Error (RMSE) that is mainly used when predictions have large deviations . RMSLE is preferable when : . targets having exponential growth, such as population counts, average sales of a commodity over a span of years etc | we care about percentage errors rather than the absolute value of errors : The reason we use log is because generally, you care not so much about missing by €10 but missing by 10%. So if it was €1000,000 item and you are €100,000 off or if it was a 10,000 item and you are €1,000 off — we would consider those equivalent scale issues. | There is a wide range in the target variables and we don’t want to penalize big differences when both the predicted and the actual are big numbers. | We want to penalize under estimates more than over estimates. | Let&#39;s imagine two cases of predictions, . Case-1: our model makes a prediction of 30 when the actual number is 40 Case-2: our model makes a prediction of 300 when the actual number is 400 . With RMSE the second result is scored as 10 times more than the first result Conversely, with RMSLogE two results are scored the same. RMSLogE takes into account just the ratio of change Lets have a look at the below example . Case-3 : Prediction = 600, Actual = 1000 (the absolute difference is 400) . RMSE = 400, RMSLogE = 0.5108 . Case-4 : Prediction = 1400, Actual = 1000 (the absolute difference is 400) . RMSE = 400, RMSLogE = 0.3365 . When the differences are the same between actual and predicted in both cases. RMSE treated them equally, however RMSLogE penalized the under estimate more than over estimate (under estimated prediction score is higher than over estimated prediction score). Often, penalizing the under estimate more than over estimate is important for prediction of sales and inventory demands. . | . | . Mean Absolute Error (MAE): also called the average absolute deviation : MAE measures the average magnitude of the errors in a set of predictions, without considering their direction. | . R-Squared (R2) : proportional improvement in prediction of the regression model, compared to the mean model (model predicting all given samples as mean value) : - If we were exactly as effective as just predicting the mean, SSres/SStot = 1 and R² = 0 - If we were perfect (i.e. yi = fi for all cases), SSres/SStot = 0 and R² = 1 . However, it does not take into consideration of overfitting problem. Interpreted as the proportion of total variance that is explained by the model. | R² is the ratio between how good your model is (RMSE)vs. how good is the naïve mean model (RMSE). | . | . RMSE vs RMSLE vs MAE . See links below : . RMSE vs MAE : https://medium.com/human-in-a-machine-world/mae-and-rmse-which-metric-is-better-e60ac3bde13d | RMSLE metric and defining baseline : https://www.kaggle.com/carlolepelaars/understanding-the-metric-rmsle/notebook | Model fot metrics : https://www.kaggle.com/residentmario/model-fit-metrics | . Scikit-learn implementation . # sklean from sklearn.metrics import r2_score # hand implemetation import numpy as np def r2_score(y, y_pred): rss_adj = np.sum((y - y_pred)**2) n = len(y) y_bar_adj = (1 / n) * np.sum(y) ess_adj = np.sum((y - y_bar_adj)**2) return 1 - rss_adj / ess_adj r2_score(y, y_pred) ### Root Mean Squared Error (RMSE) from sklearn.metrics import mean_squared_error mean_squared_error(y,y_pred, squared = False) # hand implemetation import math def rmse(y, y_pred): return math.sqrt( ((y-y_pred)**2).mean() ) root_mean_squared_error(y, y_pred) ### Root Mean log Squared Error (RMLSE) from sklearn.metrics import mean_squared_log_error mean_squared_error(y,y_pred, squared = False) # or import numpy as np y = np.log(df.y) RMSLE = rmse(y,y_pred) ### Mean Absolute Error (MAE) from sklearn.metrics import mean_absolute_error # hand implemetation import numpy as np def mae(y,y_pred): return (np.abs(y-y_pred)).mean() . NameError Traceback (most recent call last) &lt;ipython-input-1061-7e2a74a2dd02&gt; in &lt;module&gt; 14 return 1 - rss_adj / ess_adj 15 &gt; 16 r2_score(y, y_pred) 17 18 NameError: name &#39;y_pred&#39; is not defined . Download the Data . PATH = &#39;/Users/rmbp/handson-ml2/datasets/&#39; !ls {PATH} . housing inception jsb_chorales lifesat titanic . import pandas as pd housing = pd.read_csv(f&#39;{PATH}/housing/housing.csv&#39;) housing.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity . 0 -122.23 | 37.88 | 41.0 | 880.0 | 129.0 | 322.0 | 126.0 | 8.3252 | 452600.0 | NEAR BAY | . 1 -122.22 | 37.86 | 21.0 | 7099.0 | 1106.0 | 2401.0 | 1138.0 | 8.3014 | 358500.0 | NEAR BAY | . 2 -122.24 | 37.85 | 52.0 | 1467.0 | 190.0 | 496.0 | 177.0 | 7.2574 | 352100.0 | NEAR BAY | . 3 -122.25 | 37.85 | 52.0 | 1274.0 | 235.0 | 558.0 | 219.0 | 5.6431 | 341300.0 | NEAR BAY | . 4 -122.25 | 37.85 | 52.0 | 1627.0 | 280.0 | 565.0 | 259.0 | 3.8462 | 342200.0 | NEAR BAY | . Automating the process of fetching and loading the data . import os import tarfile import urllib DOWNLOAD_ROOT = &quot;https://raw.githubusercontent.com/ageron/handson-ml2/master/&quot; HOUSING_PATH = os.path.join(&quot;/Users/rmbp/Desktop&quot;, &quot;housing&quot;) HOUSING_URL = DOWNLOAD_ROOT + &quot;datasets/housing/housing.tgz&quot; def fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH): os.makedirs(housing_path, exist_ok=True) tgz_path = os.path.join(housing_path, &quot;housing.tgz&quot;) urllib.request.urlretrieve(housing_url, tgz_path) housing_tgz = tarfile.open(tgz_path) housing_tgz.extractall(path=HOUSING_PATH) housing_tgz.close() . fetch_housing_data(HOUSING_URL,HOUSING_PATH) . import pandas as pd def load_housing_data(housing_path=HOUSING_PATH): csv_path = os.path.join(housing_path, &quot;housing.csv&quot;) return pd.read_csv(csv_path) . load_housing_data().head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity . 0 -122.23 | 37.88 | 41.0 | 880.0 | 129.0 | 322.0 | 126.0 | 8.3252 | 452600.0 | NEAR BAY | . 1 -122.22 | 37.86 | 21.0 | 7099.0 | 1106.0 | 2401.0 | 1138.0 | 8.3014 | 358500.0 | NEAR BAY | . 2 -122.24 | 37.85 | 52.0 | 1467.0 | 190.0 | 496.0 | 177.0 | 7.2574 | 352100.0 | NEAR BAY | . 3 -122.25 | 37.85 | 52.0 | 1274.0 | 235.0 | 558.0 | 219.0 | 5.6431 | 341300.0 | NEAR BAY | . 4 -122.25 | 37.85 | 52.0 | 1627.0 | 280.0 | 565.0 | 259.0 | 3.8462 | 342200.0 | NEAR BAY | . Take a Quick Look at the Data Structure . housing.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity . 0 -122.23 | 37.88 | 41.0 | 880.0 | 129.0 | 322.0 | 126.0 | 8.3252 | 452600.0 | NEAR BAY | . 1 -122.22 | 37.86 | 21.0 | 7099.0 | 1106.0 | 2401.0 | 1138.0 | 8.3014 | 358500.0 | NEAR BAY | . 2 -122.24 | 37.85 | 52.0 | 1467.0 | 190.0 | 496.0 | 177.0 | 7.2574 | 352100.0 | NEAR BAY | . 3 -122.25 | 37.85 | 52.0 | 1274.0 | 235.0 | 558.0 | 219.0 | 5.6431 | 341300.0 | NEAR BAY | . 4 -122.25 | 37.85 | 52.0 | 1627.0 | 280.0 | 565.0 | 259.0 | 3.8462 | 342200.0 | NEAR BAY | . housing.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 20640 entries, 0 to 20639 Data columns (total 10 columns): # Column Non-Null Count Dtype -- -- 0 longitude 20640 non-null float64 1 latitude 20640 non-null float64 2 housing_median_age 20640 non-null float64 3 total_rooms 20640 non-null float64 4 total_bedrooms 20433 non-null float64 5 population 20640 non-null float64 6 households 20640 non-null float64 7 median_income 20640 non-null float64 8 median_house_value 20640 non-null float64 9 ocean_proximity 20640 non-null object dtypes: float64(9), object(1) memory usage: 1.6+ MB . There are 20,640 instances in the dataset. Notice that the total_bedrooms attribute has only 20,433 nonnull values, meaning that 207 districts are missing this feature. All attributes are numerical, except the ocean_proximity field. Its type is object. Since we loaded this data from a CSV file, it must be a text attribute. : the values in the ocean_proximity column were repetitive, which means that it is probably a categorical attribute. . housing[&#39;ocean_proximity&#39;].value_counts() . &lt;1H OCEAN 9136 INLAND 6551 NEAR OCEAN 2658 NEAR BAY 2290 ISLAND 5 Name: ocean_proximity, dtype: int64 . housing.describe(include=&#39;all&#39;).T . count unique top freq mean std min 25% 50% 75% max . longitude 20640.0 | NaN | NaN | NaN | -119.569704 | 2.003532 | -124.35 | -121.8 | -118.49 | -118.01 | -114.31 | . latitude 20640.0 | NaN | NaN | NaN | 35.631861 | 2.135952 | 32.54 | 33.93 | 34.26 | 37.71 | 41.95 | . housing_median_age 20640.0 | NaN | NaN | NaN | 28.639486 | 12.585558 | 1.0 | 18.0 | 29.0 | 37.0 | 52.0 | . total_rooms 20640.0 | NaN | NaN | NaN | 2635.763081 | 2181.615252 | 2.0 | 1447.75 | 2127.0 | 3148.0 | 39320.0 | . total_bedrooms 20433.0 | NaN | NaN | NaN | 537.870553 | 421.38507 | 1.0 | 296.0 | 435.0 | 647.0 | 6445.0 | . population 20640.0 | NaN | NaN | NaN | 1425.476744 | 1132.462122 | 3.0 | 787.0 | 1166.0 | 1725.0 | 35682.0 | . households 20640.0 | NaN | NaN | NaN | 499.53968 | 382.329753 | 1.0 | 280.0 | 409.0 | 605.0 | 6082.0 | . median_income 20640.0 | NaN | NaN | NaN | 3.870671 | 1.899822 | 0.4999 | 2.5634 | 3.5348 | 4.74325 | 15.0001 | . median_house_value 20640.0 | NaN | NaN | NaN | 206855.816909 | 115395.615874 | 14999.0 | 119600.0 | 179700.0 | 264725.0 | 500001.0 | . ocean_proximity 20640 | 5 | &lt;1H OCEAN | 9136 | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . hist() method on the whole dataset will plot a histogram for each numerical attribute . A histogram is used for continuous data, where the bins represent ranges of data, counts the data points in each bin, and shows the bins on the x-axis and the counts on the y-axis. : https://towardsdatascience.com/histograms-and-density-plots-in-python-f6bda88f5ac0 | A bar chart is a plot of categorical variables. | . %matplotlib inline import matplotlib.pyplot as plt housing.hist(bins=60, figsize=(15,10)) plt.show() . housing[&#39;median_house_value&#39;].plot(kind=&#39;hist&#39;, bins= 60) . &lt;AxesSubplot:ylabel=&#39;Frequency&#39;&gt; . housing[&#39;ocean_proximity&#39;].value_counts().plot(kind= &#39;barh&#39;) . &lt;AxesSubplot:&gt; . pd.DataFrame(housing[&#39;median_income&#39;].describe()).T . count mean std min 25% 50% 75% max . median_income 20640.0 | 3.870671 | 1.899822 | 0.4999 | 2.5634 | 3.5348 | 4.74325 | 15.0001 | . n, bins, patches = plt.hist(housing.median_income, bins = int((15.000100 - 0.499900)/0.1),edgecolor = &#39;black&#39; ,color = &#39;blue&#39;) # bins = int((15.000100 - 0.499900)/0.1) : We choose the number of bins with an interval lenght of 100€ . pd.DataFrame(housing[&#39;housing_median_age&#39;].describe()).T . count mean std min 25% 50% 75% max . housing_median_age 20640.0 | 28.639486 | 12.585558 | 1.0 | 18.0 | 29.0 | 37.0 | 52.0 | . n, bins, patches = plt.hist(housing.housing_median_age, bins = int((52.000000 - 1.000000)/1) , color = &#39;blue&#39; , edgecolor = &#39;black&#39;) bins . array([ 1., 2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31., 32., 33., 34., 35., 36., 37., 38., 39., 40., 41., 42., 43., 44., 45., 46., 47., 48., 49., 50., 51., 52.]) . pd.DataFrame(housing[&#39;median_house_value&#39;].describe()).T . count mean std min 25% 50% 75% max . median_house_value 20640.0 | 206855.816909 | 115395.615874 | 14999.0 | 119600.0 | 179700.0 | 264725.0 | 500001.0 | . n, bins, patches = plt.hist(housing.median_house_value , bins = int((500001.000000 - 14999.000000)/10000) , color = &#39;blue&#39; ,edgecolor = &#39;black&#39;) bins . array([ 14999. , 25103.20833333, 35207.41666667, 45311.625 , 55415.83333333, 65520.04166667, 75624.25 , 85728.45833333, 95832.66666667, 105936.875 , 116041.08333333, 126145.29166667, 136249.5 , 146353.70833333, 156457.91666667, 166562.125 , 176666.33333333, 186770.54166667, 196874.75 , 206978.95833333, 217083.16666667, 227187.375 , 237291.58333333, 247395.79166667, 257500. , 267604.20833333, 277708.41666667, 287812.625 , 297916.83333333, 308021.04166667, 318125.25 , 328229.45833333, 338333.66666667, 348437.875 , 358542.08333333, 368646.29166667, 378750.5 , 388854.70833333, 398958.91666667, 409063.125 , 419167.33333333, 429271.54166667, 439375.75 , 449479.95833333, 459584.16666667, 469688.375 , 479792.58333333, 489896.79166667, 500001. ]) . From the figure below, we can see how the data was computed : . We can see that median_income was scaled and capped at 15 (actually, 15.0001) for higher median incomes, and at 0.5 (actually, 0.4999) for lower median incomes. The numbers represent roughly tens of thousands of dollars. | The housing median age and the median house value were also capped. The latter may be a serious problem since it is our target attribute. In this caseour Machine Learning algorithms may learn that prices never go beyond that limit (€500,000). We need to check with our team to see if this is a problem or not. If the team needs precise predictions even beyond €500,000, then you have two options: Collect proper labels for the districts whose labels were capped. | Remove those districts from the training set (and also from the test set, since your system should not be evaluated poorly if it predicts values beyond €500,000). | . | . We can also see that : . These attributes have very different scales. | Many histograms are tail-heavy : they extend much farther to the right of the median than to the left. | . Create a Test Set . We ahve only taken a quick glance at the data : numeric / categorical features, missing values, scale of attributes, distribution, how values are computed, distribution of the target variable. It&#39;s enough. Why ? . if you look at the test set, you may stumble upon some seemingly interesting pattern in the test data that leads you to select a particular kind of Machine Learning model. When you estimate the generalization error using the test set, your estimate will be too optimistic, and you will launch a system that will not perform as well as expected. This is called data snooping bias. | . Train and test set stability . Creating a test set is theoretically simple: pick some instances randomly, typically 20% of the dataset . import numpy as np def split_train_test(data, test_ratio): shuffled_indices = np.random.permutation(len(data)) test_set_size = int(len(data) * test_ratio) test_indices = shuffled_indices[:test_set_size] train_indices = shuffled_indices[test_set_size:] return data.iloc[train_indices], data.iloc[test_indices] . train_set, test_set = split_train_test(housing,0.2) print(len(train_set)) print(len(test_set)) . 16512 4128 . Well, this works, but it is not perfect: if you run the program again, it will generate a different test set! . Over time, you (or your Machine Learning algorithms) will get to see the whole dataset, which is what you want to avoid. | . split_train_test(housing,0.2)[1].head(5) . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity . 12003 -117.57 | 33.90 | 7.0 | 3797.0 | 850.0 | 2369.0 | 720.0 | 3.5525 | 137600.0 | INLAND | . 13304 -117.63 | 34.09 | 19.0 | 3490.0 | 816.0 | 2818.0 | 688.0 | 2.8977 | 126200.0 | INLAND | . 19037 -121.99 | 38.36 | 35.0 | 2728.0 | 451.0 | 1290.0 | 452.0 | 3.2768 | 117600.0 | INLAND | . 9871 -121.82 | 36.61 | 24.0 | 2437.0 | 438.0 | 1430.0 | 444.0 | 3.8015 | 169100.0 | &lt;1H OCEAN | . 16526 -121.20 | 37.80 | 37.0 | 311.0 | 61.0 | 171.0 | 54.0 | 4.0972 | 101800.0 | INLAND | . split_train_test(housing,0.2)[1].head(5) . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity . 5709 -118.23 | 34.21 | 32.0 | 1464.0 | 406.0 | 693.0 | 380.0 | 2.5463 | 200000.0 | &lt;1H OCEAN | . 16381 -121.30 | 38.02 | 4.0 | 1515.0 | 384.0 | 491.0 | 348.0 | 2.8523 | 87500.0 | INLAND | . 16458 -121.30 | 38.13 | 26.0 | 2256.0 | 360.0 | 937.0 | 372.0 | 5.0528 | 153700.0 | INLAND | . 8613 -118.37 | 33.87 | 23.0 | 1829.0 | 331.0 | 891.0 | 356.0 | 6.5755 | 359900.0 | &lt;1H OCEAN | . 2738 -115.56 | 32.78 | 35.0 | 1185.0 | 202.0 | 615.0 | 191.0 | 4.6154 | 86200.0 | INLAND | . Solution : . One solution is to save the test set on the first run and then load it in subsequent runs. | Another option is to set the random number generator’s seed (e.g., with np.ran dom.seed(42))14 before calling np.random.permutation() so that it always generates the same shuffled indices : | . import numpy as np def split_train_test(data, test_ratio): np.random.seed(1997) shuffled_indices = np.random.permutation(len(data)) test_set_size = int(len(data) * test_ratio) test_indices = shuffled_indices[:test_set_size] train_indices = shuffled_indices[test_set_size:] return data.iloc[train_indices], data.iloc[test_indices] . split_train_test(housing,0.2)[1].head(5) . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity . 9009 -118.60 | 34.07 | 16.0 | 319.0 | 59.0 | 149.0 | 64.0 | 4.6250 | 433300.0 | &lt;1H OCEAN | . 17779 -121.83 | 37.38 | 15.0 | 4430.0 | 992.0 | 3278.0 | 1018.0 | 4.5533 | 209900.0 | &lt;1H OCEAN | . 20209 -119.21 | 34.28 | 27.0 | 2219.0 | 312.0 | 937.0 | 315.0 | 5.7601 | 281100.0 | NEAR OCEAN | . 3170 -119.69 | 36.41 | 38.0 | 1016.0 | 202.0 | 540.0 | 187.0 | 2.2885 | 75000.0 | INLAND | . 2200 -119.85 | 36.83 | 15.0 | 2563.0 | 335.0 | 1080.0 | 356.0 | 6.7181 | 160300.0 | INLAND | . split_train_test(housing,0.2)[1].head(5) . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity . 9009 -118.60 | 34.07 | 16.0 | 319.0 | 59.0 | 149.0 | 64.0 | 4.6250 | 433300.0 | &lt;1H OCEAN | . 17779 -121.83 | 37.38 | 15.0 | 4430.0 | 992.0 | 3278.0 | 1018.0 | 4.5533 | 209900.0 | &lt;1H OCEAN | . 20209 -119.21 | 34.28 | 27.0 | 2219.0 | 312.0 | 937.0 | 315.0 | 5.7601 | 281100.0 | NEAR OCEAN | . 3170 -119.69 | 36.41 | 38.0 | 1016.0 | 202.0 | 540.0 | 187.0 | 2.2885 | 75000.0 | INLAND | . 2200 -119.85 | 36.83 | 15.0 | 2563.0 | 335.0 | 1080.0 | 356.0 | 6.7181 | 160300.0 | INLAND | . But both these solutions will break the next time you fetch an updated dataset. . If the dataset is updated, we want to ensure that the test set will remain consistent across multiple runs, even if you refresh the dataset : The new test set will contain 20% of the new instances, but it will not contain any instance that was previously in the training set. . To have a stable train/test split even after updating the dataset, a common solution is to use each instance’s identifier to decide whether or not it should go in the test set (assuming instances have a unique and immutable identifier). For example, we could compute a hash of each instance’s identifier and put that instance in the test set if the hash is lower than or equal to 20% of the maximum hash value. . from zlib import crc32 def test_set_check(identifier, test_ratio): return crc32(np.int64(identifier)) &amp; 0xffffffff &lt; test_ratio * 2**32 # crc32(np.int64(identifier)) = create a hash from a given value # crc32(np.int64(identifier)) &amp; 0xffffffff = make sure the hash value does not exceed 2^32 (or 4294967296). # crc32(np.int64(identifier)) &amp; 0xffffffff &lt; test_ratio * 2**32. # crc32(np.int64(identifier)) &amp; 0xffffffff &lt; test_ratio * 2**32 # This line returns True or False. Let test_ratio be 0.2. # Then, any hash value less than 0.2 * 4294967296 returns True and will be # added to the test set; otherwise, it returns False and will be added to the training set. */ . def split_train_test_by_id(data, test_ratio, id_column): ids = data[id_column] # compute a hash of each instance’s identifier in_test_set = ids.apply(lambda id_: test_set_check(id_, test_ratio)) # if hash is lower than or equal to 20% of the maximum hash value return data.loc[~in_test_set], data.loc[in_test_set] . Unfortunately, the housing dataset does not have an identifier column. The simplest solution is to use the row index as the ID: . housing_with_id = housing.reset_index() # adds an `index` column train_set, test_set = split_train_test_by_id(housing_with_id, 0.2, &quot;index&quot;) . If we use the row index as a unique identifier, you need to make sure that new data gets appended to the end of the dataset and that no row ever gets deleted. If this is not possible, then we can try to use the most stable features to build a unique identifier. . For example, a district’s latitude and longitude are guaranteed to be stable for a few million years, so you could combine them into an ID like so: . housing_with_id[&quot;id&quot;] = housing[&quot;longitude&quot;] * 1000 + housing[&quot;latitude&quot;] train_set, test_set = split_train_test_by_id(housing_with_id, 0.2, &quot;id&quot;) . See explanation of this method in : https://ichi.pro/fr/ameliorez-la-repartition-des-tests-de-train-avec-la-fonction-de-hachage-267796356735483 and https://datascience.stackexchange.com/questions/51348/splitting-train-test-sets-by-an-identifier . Train / Test split using Sckit-learn . Scikit-Learn provides a few functions to split datasets into multiple subsets in various ways. The simplest function is train_test_split(), which does pretty much the same thing as the function split_train_test(), with a couple of additional features : . First, there is a random_state parameter random_state that allows you to set the random generator seed and a test size test_size. | Second, we can pass it multiple datasets with an identical number of rows, and it will split them on the same indices (this is very useful, for example, if you have a separate DataFrame for labels): | . from sklearn.model_selection import train_test_split train_set, test_set = train_test_split(housing, test_size=0.2, random_state = 1997) . Sampling bias in Test set . Using train_test_splitmethod, we using purely random sampling methods to generate our test set. This is generally fine if our dataset is large enough (especially relative to the number of attributes), but if it is not, we run the risk of introducing a significant sampling bias. . If an attribute (continues or categorical) is important (after discussing with experts for exemple) : We may want to ensure that the test set is representative of the various categories of that variable in the whole dataset. . Suppose that the median income is a very important attribute to predict median housing prices. . housing[&#39;median_income&#39;].describe() . count 20640.000000 mean 3.870671 std 1.899822 min 0.499900 25% 2.563400 50% 3.534800 75% 4.743250 max 15.000100 Name: median_income, dtype: float64 . plt.hist(housing[&#39;median_income&#39;] #, bins = int( (housing[&#39;median_income&#39;].max() - housing[&#39;median_income&#39;].min()) / 0.5) , bins = 60 , color = &#39;blue&#39; ,edgecolor = &#39;black&#39; ) plt.show() . housing[&quot;income_cat&quot;] = pd.cut(housing[&quot;median_income&quot;], bins=[0., 1.5, 3.0, 4.5, 6., np.inf], labels=[1, 2, 3, 4, 5]) . housing[&#39;income_cat&#39;] = pd.cut( housing[&#39;median_income&#39;] , bins = [0., 1.5, 3.0, 4.5, 6., np.inf] , labels = [1, 2, 3, 4, 5] ) . housing[&quot;income_cat&quot;].hist() . &lt;AxesSubplot:&gt; . housing[&quot;income_cat&quot;].value_counts() / len(housing) . 3 0.350581 2 0.318847 4 0.176308 5 0.114438 1 0.039826 Name: income_cat, dtype: float64 . from sklearn.model_selection import StratifiedShuffleSplit split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42) for train_index, test_index in split.split(housing, housing[&quot;income_cat&quot;]): strat_train_set = housing.loc[train_index] strat_test_set = housing.loc[test_index] . strat_train_set[&quot;income_cat&quot;].value_counts() / len(strat_train_set) . 3 0.350594 2 0.318859 4 0.176296 5 0.114462 1 0.039789 Name: income_cat, dtype: float64 . strat_test_set[&quot;income_cat&quot;].value_counts() / len(strat_test_set) . 3 0.350533 2 0.318798 4 0.176357 5 0.114341 1 0.039971 Name: income_cat, dtype: float64 . def income_cat_proportions(data): return data[&quot;income_cat&quot;].value_counts() / len(data) train_set, test_set = train_test_split(housing, test_size=0.2, random_state=42) compare_props = pd.DataFrame({ &quot;Overall&quot;: income_cat_proportions(housing), &quot;Stratified&quot;: income_cat_proportions(strat_test_set), &quot;Random&quot;: income_cat_proportions(test_set), }).sort_index() compare_props[&quot;Rand. %error&quot;] = 100 * compare_props[&quot;Random&quot;] / compare_props[&quot;Overall&quot;] - 100 compare_props[&quot;Strat. %error&quot;] = 100 * compare_props[&quot;Stratified&quot;] / compare_props[&quot;Overall&quot;] - 100 . compare_props . Overall Stratified Random Rand. %error Strat. %error . 1 0.039826 | 0.039971 | 0.040213 | 0.973236 | 0.364964 | . 2 0.318847 | 0.318798 | 0.324370 | 1.732260 | -0.015195 | . 3 0.350581 | 0.350533 | 0.358527 | 2.266446 | -0.013820 | . 4 0.176308 | 0.176357 | 0.167393 | -5.056334 | 0.027480 | . 5 0.114438 | 0.114341 | 0.109496 | -4.318374 | -0.084674 | . Further analysis later | . for set_ in (strat_train_set, strat_test_set): set_.drop(&quot;income_cat&quot;, axis=1, inplace=True) . Discover and Visualize the Data to Gain Insights . First, we make sure that we have put the test set aside and we are only exploring the training set. Also, if the training set is very large, you may want to sample an exploration set, to make manipulations easy and fast. In our case, the set is quite small, so we can just work directly on the full set. . Let’s create a copy so that you can play with it without harming the training set: | . housing = strat_train_set.copy() . housing.head(5) . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity income_cat . 12655 -121.46 | 38.52 | 29.0 | 3873.0 | 797.0 | 2237.0 | 706.0 | 2.1736 | 72100.0 | INLAND | 2 | . 15502 -117.23 | 33.09 | 7.0 | 5320.0 | 855.0 | 2015.0 | 768.0 | 6.3373 | 279600.0 | NEAR OCEAN | 5 | . 2908 -119.04 | 35.37 | 44.0 | 1618.0 | 310.0 | 667.0 | 300.0 | 2.8750 | 82700.0 | INLAND | 2 | . 14053 -117.13 | 32.75 | 24.0 | 1877.0 | 519.0 | 898.0 | 483.0 | 2.2264 | 112500.0 | NEAR OCEAN | 2 | . 20496 -118.70 | 34.28 | 27.0 | 3536.0 | 646.0 | 1837.0 | 580.0 | 4.4964 | 238300.0 | &lt;1H OCEAN | 3 | . Since we have geographic information (lon / lat), let&#39;s create a scatterplot of all districts to visualize the data : doc of a scatterplot parameter https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.scatter.html | . housing.plot(kind = &#39;scatter&#39;, x = &#39;longitude&#39;, y = &#39;latitude&#39;) . &lt;AxesSubplot:xlabel=&#39;longitude&#39;, ylabel=&#39;latitude&#39;&gt; . Scatter plots work well for hundreds of observations but overplotting becomes an issue once the number of observations gets into tens of thousands. . We can see that in some areas, there are vast numbers of dots, so it is hard to see any particular pattern. . Simple options to address overplotting : . reducing the point size : usisng the s parameter - This parameter indicates the marker size. | alpha blending : using alpha parameter This option indicates the blending value, between 0 (transparent) and 1 (opaque). | . housing.plot(kind = &#39;scatter&#39; ,x = &#39;longitude&#39; ,y = &#39;latitude&#39; , s= 0.2) . &lt;AxesSubplot:xlabel=&#39;longitude&#39;, ylabel=&#39;latitude&#39;&gt; . housing.plot(kind = &#39;scatter&#39; ,x = &#39;longitude&#39; ,y = &#39;latitude&#39; , alpha= 0.1) . &lt;AxesSubplot:xlabel=&#39;longitude&#39;, ylabel=&#39;latitude&#39;&gt; . We can get the names of the cities in the map and conclude which have the highest density - Many article covers this subject - we will do it later . IMAGES_PATH = &quot;/Users/rmbp/Desktop/housing&quot; def save_fig(fig_id, tight_layout=True, fig_extension=&quot;png&quot;, resolution=300): path = os.path.join(IMAGES_PATH, fig_id + &quot;.&quot; + fig_extension) print(&quot;Saving figure&quot;, fig_id) if tight_layout: plt.tight_layout() plt.savefig(path, format=fig_extension, dpi=resolution) housing.plot(kind = &#39;scatter&#39; ,x = &#39;longitude&#39; ,y = &#39;latitude&#39; , alpha= 0.1, c=&#39;black&#39;) save_fig(&quot;better_visualization_plot&quot;) . Saving figure better_visualization_plot . We can see the houses price crossing with the population on the map below : . the parameter s re presenting the radius of each circle will represents the `district’s population`` | the paramter c representing the color will represents the price. | We will use a predefined color map (option cmap) called jet, which ranges from blue (low values) to red (high prices): | . housing.plot(kind=&quot;scatter&quot;, x=&quot;longitude&quot;, y=&quot;latitude&quot;, alpha=0.4, s=housing[&quot;population&quot;]/100, label=&quot;population&quot;, figsize=(10,7), c=&quot;median_house_value&quot;, cmap=plt.get_cmap(&quot;jet&quot;), colorbar=True, ) plt.legend() . &lt;matplotlib.legend.Legend at 0x12f4d1650&gt; . This image tells us that the housing prices are very much related to the location (e.g., close to the ocean) and to the population density. | A clustering algorithm should be useful for detecting the main cluster and for adding new features that measure the proximity to the cluster centers. See later.. Check this blog : https://dev.to/travelleroncode/analyzing-a-dataset-with-unsupervised-learning-31ld | The ocean proximity attribute may be useful as well, although in Northern California the housing prices in coastal districts are not too high, so it is not a simple rule. | . Looking for correlations . If we want to explore our data it is good to compute correlation between numeric variable : Spearman S and Pearon P. W can compute them both since the relation between the Spearman (S) and Pearson (P) correlations will give some good information : . Briefly, S is computed on ranks and so depicts monotonic relationships while P is on true values and depicts linear relationships. . | We the corr method : By default, method = &#39;Pearson&#39; . | . s = {} for x in range(1,100): s[x] = math.exp(x) s = pd.DataFrame(s.items()) . s.corr(&#39;pearson&#39;) . 0 1 . 0 1.000000 | 0.253274 | . 1 0.253274 | 1.000000 | . s.corr(&#39;spearman&#39;) . 0 1 . 0 1.0 | 1.0 | . 1 1.0 | 1.0 | . This is because 𝑦 increases monotonically with 𝑥 so the Spearman correlation is perfect, but not linearly, so the Pearson correlation is imperfect. . Doing both is interesting because if we have S &gt; P, that means that we have a correlation that is monotonic but not linear. Since it is good to have linearity in statistics (it is easier) we can try to apply a transformation on 𝑦(such a log). . corr_matrix = housing.corr() . corr_matrix . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value . longitude 1.000000 | -0.924478 | -0.105823 | 0.048909 | 0.076686 | 0.108071 | 0.063146 | -0.019615 | -0.047466 | . latitude -0.924478 | 1.000000 | 0.005737 | -0.039245 | -0.072550 | -0.115290 | -0.077765 | -0.075146 | -0.142673 | . housing_median_age -0.105823 | 0.005737 | 1.000000 | -0.364535 | -0.325101 | -0.298737 | -0.306473 | -0.111315 | 0.114146 | . total_rooms 0.048909 | -0.039245 | -0.364535 | 1.000000 | 0.929391 | 0.855103 | 0.918396 | 0.200133 | 0.135140 | . total_bedrooms 0.076686 | -0.072550 | -0.325101 | 0.929391 | 1.000000 | 0.876324 | 0.980167 | -0.009643 | 0.047781 | . population 0.108071 | -0.115290 | -0.298737 | 0.855103 | 0.876324 | 1.000000 | 0.904639 | 0.002421 | -0.026882 | . households 0.063146 | -0.077765 | -0.306473 | 0.918396 | 0.980167 | 0.904639 | 1.000000 | 0.010869 | 0.064590 | . median_income -0.019615 | -0.075146 | -0.111315 | 0.200133 | -0.009643 | 0.002421 | 0.010869 | 1.000000 | 0.687151 | . median_house_value -0.047466 | -0.142673 | 0.114146 | 0.135140 | 0.047781 | -0.026882 | 0.064590 | 0.687151 | 1.000000 | . Now let’s look at how much each attribute correlates with the median house value: . corr_matrix[&#39;median_house_value&#39;].sort_values(ascending = False) . median_house_value 1.000000 median_income 0.687151 total_rooms 0.135140 housing_median_age 0.114146 households 0.064590 total_bedrooms 0.047781 population -0.026882 longitude -0.047466 latitude -0.142673 Name: median_house_value, dtype: float64 . corr_matrix = housing.corr(&#39;spearman&#39;) . corr_matrix[&#39;median_house_value&#39;].sort_values(ascending = False) . median_house_value 1.000000 median_income 0.675714 total_rooms 0.204476 households 0.110722 total_bedrooms 0.084284 housing_median_age 0.083301 population 0.001309 longitude -0.071562 latitude -0.162283 Name: median_house_value, dtype: float64 . Another way to check for correlation between attributes is to use the pandas scatter_matrix() function, which plots every numerical attribute against every other numerical attribute. ( if we have 11 attribiute, we will plot 11**2 plots ) . From the pearson coefficient below, we focus on a few promising attributes that seem most correlated with the median housing value : . from pandas.plotting import scatter_matrix attributes = [&#39;median_house_value&#39;, &#39;median_income&#39;, &#39;total_rooms&#39;, &#39;housing_median_age&#39; ] scatter_matrix(housing[attributes], figsize=(10,6), ) . array([[&lt;AxesSubplot:xlabel=&#39;median_house_value&#39;, ylabel=&#39;median_house_value&#39;&gt;, &lt;AxesSubplot:xlabel=&#39;median_income&#39;, ylabel=&#39;median_house_value&#39;&gt;, &lt;AxesSubplot:xlabel=&#39;total_rooms&#39;, ylabel=&#39;median_house_value&#39;&gt;, &lt;AxesSubplot:xlabel=&#39;housing_median_age&#39;, ylabel=&#39;median_house_value&#39;&gt;], [&lt;AxesSubplot:xlabel=&#39;median_house_value&#39;, ylabel=&#39;median_income&#39;&gt;, &lt;AxesSubplot:xlabel=&#39;median_income&#39;, ylabel=&#39;median_income&#39;&gt;, &lt;AxesSubplot:xlabel=&#39;total_rooms&#39;, ylabel=&#39;median_income&#39;&gt;, &lt;AxesSubplot:xlabel=&#39;housing_median_age&#39;, ylabel=&#39;median_income&#39;&gt;], [&lt;AxesSubplot:xlabel=&#39;median_house_value&#39;, ylabel=&#39;total_rooms&#39;&gt;, &lt;AxesSubplot:xlabel=&#39;median_income&#39;, ylabel=&#39;total_rooms&#39;&gt;, &lt;AxesSubplot:xlabel=&#39;total_rooms&#39;, ylabel=&#39;total_rooms&#39;&gt;, &lt;AxesSubplot:xlabel=&#39;housing_median_age&#39;, ylabel=&#39;total_rooms&#39;&gt;], [&lt;AxesSubplot:xlabel=&#39;median_house_value&#39;, ylabel=&#39;housing_median_age&#39;&gt;, &lt;AxesSubplot:xlabel=&#39;median_income&#39;, ylabel=&#39;housing_median_age&#39;&gt;, &lt;AxesSubplot:xlabel=&#39;total_rooms&#39;, ylabel=&#39;housing_median_age&#39;&gt;, &lt;AxesSubplot:xlabel=&#39;housing_median_age&#39;, ylabel=&#39;housing_median_age&#39;&gt;]], dtype=object) . The main diagonal (top left to bottom right) would be full of straight lines if pandas plotted each variable against itself, which would not be very useful. So instead pandas displays a histogram of each attribute. The diagonal option in scatter_matrix pick between &#39;kde&#39; and &#39;hist&#39; for either Kernel Density Estimation or Histogram plot in the diagonal. . The most promising attribute to predict the median house value is the median income( Pearson and Spearman correlation coefficient = 0.67 ), so let’s zoom in on their correlation scatterplot : . housing.plot( kind = &#39;scatter&#39; ,x = &#39;median_income&#39; ,y = &#39;median_house_value&#39; ,alpha = 0.2) . &lt;AxesSubplot:xlabel=&#39;median_income&#39;, ylabel=&#39;median_house_value&#39;&gt; . This plot reveals a few things : . First, the correlation is indeed very strong; we can clearly see the upward trend, and the points are not too dispersed. | Second, the price cap that we noticed earlier is clearly visible as a horizontal line at $500,000. But this plot reveals other less obvious straight lines: a horizontal line around $450,000, another around $350,000, perhaps one around $280,000, and a few more below that, we can see this picks in the histogram above: As result, we may want to try removing the corresponding districts to prevent our algorithms from learning to reproduce these data quirks. | . housing[&#39;median_house_value&#39;].describe() . count 16512.000000 mean 207005.322372 std 115701.297250 min 14999.000000 25% 119800.000000 50% 179500.000000 75% 263900.000000 max 500001.000000 Name: median_house_value, dtype: float64 . plt.hist(housing[&#39;median_house_value&#39;] #, bins = int( (housing[&#39;median_income&#39;].max() - housing[&#39;median_income&#39;].min()) / 0.5) , bins = int ((500001.000000 - 14999.000000)/1000) , color = &#39;blue&#39; ,edgecolor = &#39;black&#39; ) . (array([ 3., 0., 0., 0., 0., 0., 0., 3., 0., 0., 0., 2., 1., 1., 0., 1., 0., 4., 1., 3., 1., 2., 4., 2., 3., 4., 5., 10., 13., 11., 14., 11., 19., 17., 21., 27., 24., 36., 33., 39., 59., 30., 53., 50., 38., 43., 39., 45., 45., 35., 54., 48., 74., 59., 62., 54., 47., 61., 51., 39., 51., 41., 33., 47., 37., 39., 64., 43., 54., 59., 63., 55., 106., 73., 55., 86., 53., 84., 74., 73., 81., 70., 77., 71., 64., 79., 59., 45., 73., 50., 55., 49., 55., 68., 65., 62., 72., 110., 78., 54., 56., 66., 55., 79., 53., 57., 55., 60., 59., 43., 83., 61., 54., 45., 59., 52., 61., 51., 55., 65., 59., 68., 144., 51., 75., 72., 65., 75., 74., 64., 68., 79., 57., 52., 38., 111., 76., 64., 67., 77., 63., 94., 75., 83., 76., 96., 74., 145., 73., 74., 92., 88., 55., 61., 61., 79., 68., 52., 64., 53., 91., 50., 57., 63., 68., 52., 69., 59., 84., 74., 65., 70., 114., 44., 56., 63., 70., 69., 57., 51., 64., 52., 37., 49., 40., 59., 41., 35., 32., 52., 47., 45., 34., 47., 51., 41., 37., 51., 53., 50., 51., 44., 49., 66., 44., 55., 50., 49., 46., 38., 107., 56., 50., 48., 48., 52., 60., 51., 44., 52., 40., 41., 49., 44., 43., 53., 49., 27., 51., 39., 43., 30., 47., 37., 22., 50., 33., 36., 42., 43., 35., 20., 34., 40., 29., 29., 37., 44., 41., 39., 38., 40., 40., 39., 35., 30., 43., 34., 34., 65., 21., 33., 25., 29., 38., 22., 23., 26., 30., 20., 22., 24., 36., 22., 25., 28., 26., 26., 21., 24., 26., 16., 15., 9., 31., 12., 17., 19., 19., 18., 17., 18., 14., 15., 19., 11., 22., 14., 18., 21., 23., 15., 9., 24., 16., 17., 18., 23., 20., 28., 12., 12., 21., 11., 22., 17., 22., 19., 22., 19., 25., 21., 15., 14., 20., 25., 22., 20., 18., 22., 22., 16., 13., 22., 75., 14., 19., 19., 19., 15., 22., 13., 18., 16., 21., 16., 19., 24., 11., 13., 16., 17., 13., 11., 15., 4., 18., 9., 8., 26., 8., 14., 6., 8., 12., 12., 11., 10., 12., 14., 5., 13., 16., 7., 7., 11., 10., 12., 14., 15., 9., 11., 10., 10., 22., 4., 2., 12., 2., 10., 12., 11., 2., 4., 14., 9., 10., 10., 5., 13., 5., 13., 8., 13., 7., 9., 3., 8., 8., 12., 5., 5., 5., 5., 2., 11., 7., 6., 9., 11., 7., 7., 7., 9., 7., 7., 6., 7., 8., 9., 6., 7., 5., 2., 28., 6., 5., 7., 6., 5., 3., 6., 10., 6., 6., 1., 6., 4., 4., 3., 3., 6., 5., 3., 5., 3., 4., 6., 3., 10., 1., 2., 8., 4., 1., 3., 1., 3., 10., 7., 2., 4., 4., 3., 3., 4., 3., 4., 4., 2., 6., 2., 2., 5., 810.]), array([ 14999. , 15999.00412371, 16999.00824742, 17999.01237113, 18999.01649485, 19999.02061856, 20999.02474227, 21999.02886598, 22999.03298969, 23999.0371134 , 24999.04123711, 25999.04536082, 26999.04948454, 27999.05360825, 28999.05773196, 29999.06185567, 30999.06597938, 31999.07010309, 32999.0742268 , 33999.07835052, 34999.08247423, 35999.08659794, 36999.09072165, 37999.09484536, 38999.09896907, 39999.10309278, 40999.10721649, 41999.11134021, 42999.11546392, 43999.11958763, 44999.12371134, 45999.12783505, 46999.13195876, 47999.13608247, 48999.14020619, 49999.1443299 , 50999.14845361, 51999.15257732, 52999.15670103, 53999.16082474, 54999.16494845, 55999.16907216, 56999.17319588, 57999.17731959, 58999.1814433 , 59999.18556701, 60999.18969072, 61999.19381443, 62999.19793814, 63999.20206186, 64999.20618557, 65999.21030928, 66999.21443299, 67999.2185567 , 68999.22268041, 69999.22680412, 70999.23092784, 71999.23505155, 72999.23917526, 73999.24329897, 74999.24742268, 75999.25154639, 76999.2556701 , 77999.25979381, 78999.26391753, 79999.26804124, 80999.27216495, 81999.27628866, 82999.28041237, 83999.28453608, 84999.28865979, 85999.29278351, 86999.29690722, 87999.30103093, 88999.30515464, 89999.30927835, 90999.31340206, 91999.31752577, 92999.32164948, 93999.3257732 , 94999.32989691, 95999.33402062, 96999.33814433, 97999.34226804, 98999.34639175, 99999.35051546, 100999.35463918, 101999.35876289, 102999.3628866 , 103999.36701031, 104999.37113402, 105999.37525773, 106999.37938144, 107999.38350515, 108999.38762887, 109999.39175258, 110999.39587629, 111999.4 , 112999.40412371, 113999.40824742, 114999.41237113, 115999.41649485, 116999.42061856, 117999.42474227, 118999.42886598, 119999.43298969, 120999.4371134 , 121999.44123711, 122999.44536082, 123999.44948454, 124999.45360825, 125999.45773196, 126999.46185567, 127999.46597938, 128999.47010309, 129999.4742268 , 130999.47835052, 131999.48247423, 132999.48659794, 133999.49072165, 134999.49484536, 135999.49896907, 136999.50309278, 137999.50721649, 138999.51134021, 139999.51546392, 140999.51958763, 141999.52371134, 142999.52783505, 143999.53195876, 144999.53608247, 145999.54020619, 146999.5443299 , 147999.54845361, 148999.55257732, 149999.55670103, 150999.56082474, 151999.56494845, 152999.56907216, 153999.57319588, 154999.57731959, 155999.5814433 , 156999.58556701, 157999.58969072, 158999.59381443, 159999.59793814, 160999.60206186, 161999.60618557, 162999.61030928, 163999.61443299, 164999.6185567 , 165999.62268041, 166999.62680412, 167999.63092784, 168999.63505155, 169999.63917526, 170999.64329897, 171999.64742268, 172999.65154639, 173999.6556701 , 174999.65979381, 175999.66391753, 176999.66804124, 177999.67216495, 178999.67628866, 179999.68041237, 180999.68453608, 181999.68865979, 182999.69278351, 183999.69690722, 184999.70103093, 185999.70515464, 186999.70927835, 187999.71340206, 188999.71752577, 189999.72164948, 190999.7257732 , 191999.72989691, 192999.73402062, 193999.73814433, 194999.74226804, 195999.74639175, 196999.75051546, 197999.75463918, 198999.75876289, 199999.7628866 , 200999.76701031, 201999.77113402, 202999.77525773, 203999.77938144, 204999.78350515, 205999.78762887, 206999.79175258, 207999.79587629, 208999.8 , 209999.80412371, 210999.80824742, 211999.81237113, 212999.81649485, 213999.82061856, 214999.82474227, 215999.82886598, 216999.83298969, 217999.8371134 , 218999.84123711, 219999.84536082, 220999.84948454, 221999.85360825, 222999.85773196, 223999.86185567, 224999.86597938, 225999.87010309, 226999.8742268 , 227999.87835052, 228999.88247423, 229999.88659794, 230999.89072165, 231999.89484536, 232999.89896907, 233999.90309278, 234999.90721649, 235999.91134021, 236999.91546392, 237999.91958763, 238999.92371134, 239999.92783505, 240999.93195876, 241999.93608247, 242999.94020619, 243999.9443299 , 244999.94845361, 245999.95257732, 246999.95670103, 247999.96082474, 248999.96494845, 249999.96907216, 250999.97319588, 251999.97731959, 252999.9814433 , 253999.98556701, 254999.98969072, 255999.99381443, 256999.99793814, 258000.00206186, 259000.00618557, 260000.01030928, 261000.01443299, 262000.0185567 , 263000.02268041, 264000.02680412, 265000.03092784, 266000.03505155, 267000.03917526, 268000.04329897, 269000.04742268, 270000.05154639, 271000.0556701 , 272000.05979381, 273000.06391753, 274000.06804124, 275000.07216495, 276000.07628866, 277000.08041237, 278000.08453608, 279000.08865979, 280000.09278351, 281000.09690722, 282000.10103093, 283000.10515464, 284000.10927835, 285000.11340206, 286000.11752577, 287000.12164948, 288000.1257732 , 289000.12989691, 290000.13402062, 291000.13814433, 292000.14226804, 293000.14639175, 294000.15051546, 295000.15463918, 296000.15876289, 297000.1628866 , 298000.16701031, 299000.17113402, 300000.17525773, 301000.17938144, 302000.18350515, 303000.18762887, 304000.19175258, 305000.19587629, 306000.2 , 307000.20412371, 308000.20824742, 309000.21237113, 310000.21649485, 311000.22061856, 312000.22474227, 313000.22886598, 314000.23298969, 315000.2371134 , 316000.24123711, 317000.24536082, 318000.24948454, 319000.25360825, 320000.25773196, 321000.26185567, 322000.26597938, 323000.27010309, 324000.2742268 , 325000.27835052, 326000.28247423, 327000.28659794, 328000.29072165, 329000.29484536, 330000.29896907, 331000.30309278, 332000.30721649, 333000.31134021, 334000.31546392, 335000.31958763, 336000.32371134, 337000.32783505, 338000.33195876, 339000.33608247, 340000.34020619, 341000.3443299 , 342000.34845361, 343000.35257732, 344000.35670103, 345000.36082474, 346000.36494845, 347000.36907216, 348000.37319588, 349000.37731959, 350000.3814433 , 351000.38556701, 352000.38969072, 353000.39381443, 354000.39793814, 355000.40206186, 356000.40618557, 357000.41030928, 358000.41443299, 359000.4185567 , 360000.42268041, 361000.42680412, 362000.43092784, 363000.43505155, 364000.43917526, 365000.44329897, 366000.44742268, 367000.45154639, 368000.4556701 , 369000.45979381, 370000.46391753, 371000.46804124, 372000.47216495, 373000.47628866, 374000.48041237, 375000.48453608, 376000.48865979, 377000.49278351, 378000.49690722, 379000.50103093, 380000.50515464, 381000.50927835, 382000.51340206, 383000.51752577, 384000.52164948, 385000.5257732 , 386000.52989691, 387000.53402062, 388000.53814433, 389000.54226804, 390000.54639175, 391000.55051546, 392000.55463918, 393000.55876289, 394000.5628866 , 395000.56701031, 396000.57113402, 397000.57525773, 398000.57938144, 399000.58350515, 400000.58762887, 401000.59175258, 402000.59587629, 403000.6 , 404000.60412371, 405000.60824742, 406000.61237113, 407000.61649485, 408000.62061856, 409000.62474227, 410000.62886598, 411000.63298969, 412000.6371134 , 413000.64123711, 414000.64536082, 415000.64948454, 416000.65360825, 417000.65773196, 418000.66185567, 419000.66597938, 420000.67010309, 421000.6742268 , 422000.67835052, 423000.68247423, 424000.68659794, 425000.69072165, 426000.69484536, 427000.69896907, 428000.70309278, 429000.70721649, 430000.71134021, 431000.71546392, 432000.71958763, 433000.72371134, 434000.72783505, 435000.73195876, 436000.73608247, 437000.74020619, 438000.7443299 , 439000.74845361, 440000.75257732, 441000.75670103, 442000.76082474, 443000.76494845, 444000.76907216, 445000.77319588, 446000.77731959, 447000.7814433 , 448000.78556701, 449000.78969072, 450000.79381443, 451000.79793814, 452000.80206186, 453000.80618557, 454000.81030928, 455000.81443299, 456000.8185567 , 457000.82268041, 458000.82680412, 459000.83092784, 460000.83505155, 461000.83917526, 462000.84329897, 463000.84742268, 464000.85154639, 465000.8556701 , 466000.85979381, 467000.86391753, 468000.86804124, 469000.87216495, 470000.87628866, 471000.88041237, 472000.88453608, 473000.88865979, 474000.89278351, 475000.89690722, 476000.90103093, 477000.90515464, 478000.90927835, 479000.91340206, 480000.91752577, 481000.92164948, 482000.9257732 , 483000.92989691, 484000.93402062, 485000.93814433, 486000.94226804, 487000.94639175, 488000.95051546, 489000.95463918, 490000.95876289, 491000.9628866 , 492000.96701031, 493000.97113402, 494000.97525773, 495000.97938144, 496000.98350515, 497000.98762887, 498000.99175258, 499000.99587629, 500001. ]), &lt;BarContainer object of 485 artists&gt;) . Check docs on how to detect picks : . Finding peaks in the histograms of the variables : https://www.kaggle.com/simongrest/finding-peaks-in-the-histograms-of-the-variables . | Peak-finding algorithm for Python/SciPy : https://stackoverflow.com/questions/1713335/peak-finding-algorithm-for-python-scipy . | . Experimenting with Attribute Combinations . We identified a few data quirks that we may want to clean up before feeding the data to a Machine Learning algorithm, | We found interesting correlations between attributes, in particular with the target attribute. | We also noticed that some attributes have a tail-heavy distribution, so you may want to transform them (e.g., by computing their logarithm). | One last thing we may want to do before preparing the data for Machine Learning algorithms is to try out various attribute combinations : For example, the total number of rooms in a district is not very useful if we don’t know how many households there are. What we really want is the number of rooms per household. Similarly, the total number of bedrooms by itself is not very useful: you probably want to compare it to the number of rooms. And the population per household also seems like an interesting attribute combination to look at. Let’s create these new attributes: | . housing[[&#39;total_rooms&#39;,&#39;total_bedrooms&#39;,&#39;households&#39;,&#39;population&#39; ]].corr() . total_rooms total_bedrooms households population . total_rooms 1.000000 | 0.930380 | 0.918484 | 0.857126 | . total_bedrooms 0.930380 | 1.000000 | 0.979728 | 0.877747 | . households 0.918484 | 0.979728 | 1.000000 | 0.907222 | . population 0.857126 | 0.877747 | 0.907222 | 1.000000 | . To highlight the matrix correlation, we can use heatmap from seaborn: . import seaborn as sns cor= housing[[&#39;total_rooms&#39;,&#39;total_bedrooms&#39;,&#39;households&#39;,&#39;population&#39; ]].corr() sns.heatmap(cor, cmap=&#39;Blues&#39;, annot= True) . &lt;AxesSubplot:&gt; . housing[&quot;rooms_per_household&quot;] = housing[&quot;total_rooms&quot;]/housing[&quot;households&quot;] housing[&quot;bedrooms_per_room&quot;] = housing[&quot;total_bedrooms&quot;]/housing[&quot;total_rooms&quot;] housing[&quot;population_per_household&quot;]=housing[&quot;population&quot;]/housing[&quot;households&quot;] # nbre of person per houshold . housing[&quot;bedrooms_per_room&quot;].describe() . count 20433.000000 mean 0.213039 std 0.057983 min 0.100000 25% 0.175427 50% 0.203162 75% 0.239821 max 1.000000 Name: bedrooms_per_room, dtype: float64 . from fractions import Fraction z = Fraction(0.21).limit_denominator() z . Fraction(21, 100) . corr_matrix = housing.corr() corr_matrix[&#39;median_house_value&#39;].sort_values(ascending = False) . median_house_value 1.000000 median_income 0.688075 rooms_per_household 0.151948 total_rooms 0.134153 housing_median_age 0.105623 households 0.065843 total_bedrooms 0.049686 population_per_household -0.023737 population -0.024650 longitude -0.045967 latitude -0.144160 bedrooms_per_room -0.255880 Name: median_house_value, dtype: float64 . The new bedrooms_per_room attribute is much more correlated (0.25)with the median house value than the total number of rooms(0.13) or bedrooms (0.04) : . Apparently houses with a lower bedroom/room ratio tend to be more expensive. | The number of rooms per household is also more informative than the total number of rooms in a district—obviously the larger the houses, the more expensive they are. | . Prepare the Data for Machine Learning Algorithms . let’s revert to a clean training set (by copying strat_train_set once again). | Let’s also separate the predictors and the labels, since we don’t necessarily want to apply the same transformations to the predictors and the target values. | . housing = strat_train_set.drop(&quot;median_house_value&quot;, axis=1) housing_labels = strat_train_set[&quot;median_house_value&quot;].copy() . housing = strat_train_set.drop(&#39;median_house_value&#39;, axis = 1) housing_labels = strat_train_set[&#39;median_house_value&#39;].copy() . Data Cleaning . Formissing values (like for total_bedrooms), we have three options: . Get rid of the corresponding districts. | Get rid of the whole attribute. | Set the values to some value (zero, the mean, the median, etc.) | We can accomplish these easily using DataFrame’s dropna(), drop(), and fillna() . housing[&#39;total_bedrooms&#39;].describe() . count 16354.000000 mean 534.914639 std 412.665649 min 2.000000 25% 295.000000 50% 433.000000 75% 644.000000 max 6210.000000 Name: total_bedrooms, dtype: float64 . plt.hist(housing[&#39;total_bedrooms&#39;] , bins = int ((6210.000000 - 2.000000 )/500) , color = &#39;blue&#39; , edgecolor = &#39;black&#39; ) . (array([1.0221e+04, 4.7670e+03, 9.1400e+02, 2.6100e+02, 9.9000e+01, 5.1000e+01, 1.7000e+01, 1.1000e+01, 7.0000e+00, 3.0000e+00, 2.0000e+00, 1.0000e+00]), array([2.00000000e+00, 5.19333333e+02, 1.03666667e+03, 1.55400000e+03, 2.07133333e+03, 2.58866667e+03, 3.10600000e+03, 3.62333333e+03, 4.14066667e+03, 4.65800000e+03, 5.17533333e+03, 5.69266667e+03, 6.21000000e+03]), &lt;BarContainer object of 12 artists&gt;) . housing[&#39;total_bedrooms&#39;].isna().sum() . 158 . housing.isna().sum() . longitude 0 latitude 0 housing_median_age 0 total_rooms 0 total_bedrooms 158 population 0 households 0 median_income 0 ocean_proximity 0 income_cat 0 dtype: int64 . housing.dropna(subset = [&#39;total_bedrooms&#39;]) # drop from 16512 to 16354 using len() # option 2 : Get rid of the whole attribute housing.drop(&#39;total_bedrooms&#39;, axis = 1) # option 3 : Set the values to some value (zero, the mean, the median, etc.) median = housing[&#39;total_bedrooms&#39;].median() housing[&#39;total_bedrooms&#39;].fillna(median, inplace = True) . longitude latitude housing_median_age total_rooms population households median_income ocean_proximity income_cat . 12655 -121.46 | 38.52 | 29.0 | 3873.0 | 2237.0 | 706.0 | 2.1736 | INLAND | 2 | . 15502 -117.23 | 33.09 | 7.0 | 5320.0 | 2015.0 | 768.0 | 6.3373 | NEAR OCEAN | 5 | . 2908 -119.04 | 35.37 | 44.0 | 1618.0 | 667.0 | 300.0 | 2.8750 | INLAND | 2 | . 14053 -117.13 | 32.75 | 24.0 | 1877.0 | 898.0 | 483.0 | 2.2264 | NEAR OCEAN | 2 | . 20496 -118.70 | 34.28 | 27.0 | 3536.0 | 1837.0 | 580.0 | 4.4964 | &lt;1H OCEAN | 3 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 15174 -117.07 | 33.03 | 14.0 | 6665.0 | 2026.0 | 1001.0 | 5.0900 | &lt;1H OCEAN | 4 | . 12661 -121.42 | 38.51 | 15.0 | 7901.0 | 4769.0 | 1418.0 | 2.8139 | INLAND | 2 | . 19263 -122.72 | 38.44 | 48.0 | 707.0 | 458.0 | 172.0 | 3.1797 | &lt;1H OCEAN | 3 | . 19140 -122.70 | 38.31 | 14.0 | 3155.0 | 1208.0 | 501.0 | 4.1964 | &lt;1H OCEAN | 3 | . 19773 -122.14 | 39.97 | 27.0 | 1079.0 | 625.0 | 197.0 | 3.1319 | INLAND | 3 | . 16512 rows × 9 columns . For &#39;option&#39; 3 : fill missings with some value, the median for example, we should : . Compute the median value on the training and use it to fill the missing values in the training set. | Save the median value that you have computed. | Using later for to replace missing values in the test set when we want to evaluate our system | Using it once the system goes live to replace missing values in new data. | . Scikit-Learn provides a handy class to take care of missing values: SimpleImputer. . from sklearn.impute import SimpleImputer . First, you need to create a SimpleImputer instance, specifying that we want to replace each numeric attribute’s missing values with the median of that attribute : . imputer = SimpleImputer(strategy = &#39;median&#39;) . housing.dtypes . longitude float64 latitude float64 housing_median_age float64 total_rooms float64 total_bedrooms float64 population float64 households float64 median_income float64 ocean_proximity object dtype: object . housing_num = housing.drop([&#39;ocean_proximity&#39;], axis = 1) . Now you can fit the imputer instance to the training data using the fit() method . imputer.fit(housing_num) . SimpleImputer(strategy=&#39;median&#39;) . The imputer has simply computed the median of each attribute and stored the result in its statistics_ instance variable. We apply the imputer to all the numerical attributes : . imputer.statistics_ . array([-118.51 , 34.26 , 29. , 2119. , 433. , 1164. , 408. , 3.54155]) . housing_num.columns . Index([&#39;longitude&#39;, &#39;latitude&#39;, &#39;housing_median_age&#39;, &#39;total_rooms&#39;, &#39;total_bedrooms&#39;, &#39;population&#39;, &#39;households&#39;, &#39;median_income&#39;], dtype=&#39;object&#39;) . housing_num.median().values . array([-118.51 , 34.26 , 29. , 2119. , 433. , 1164. , 408. , 3.54155]) . Now we can use this trained imputer to transform the training set by replacing missing values with the learned medians: . X = imputer.transform(housing_num) #If you want to put it back into a pandas DataFrame, it’s simple: housing_tr = pd.DataFrame(X, columns=housing_num.columns, index=housing_num.index) . Alternative method to fit() and transform() method is using directy fit_transform() method . X = imputer.fit_transform(housing_num) housing_tr = pd.DataFrame( X, columns = housing_num.columns , index = housing_num.index) housing_tr . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income . 12655 -121.46 | 38.52 | 29.0 | 3873.0 | 797.0 | 2237.0 | 706.0 | 2.1736 | . 15502 -117.23 | 33.09 | 7.0 | 5320.0 | 855.0 | 2015.0 | 768.0 | 6.3373 | . 2908 -119.04 | 35.37 | 44.0 | 1618.0 | 310.0 | 667.0 | 300.0 | 2.8750 | . 14053 -117.13 | 32.75 | 24.0 | 1877.0 | 519.0 | 898.0 | 483.0 | 2.2264 | . 20496 -118.70 | 34.28 | 27.0 | 3536.0 | 646.0 | 1837.0 | 580.0 | 4.4964 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 15174 -117.07 | 33.03 | 14.0 | 6665.0 | 1231.0 | 2026.0 | 1001.0 | 5.0900 | . 12661 -121.42 | 38.51 | 15.0 | 7901.0 | 1422.0 | 4769.0 | 1418.0 | 2.8139 | . 19263 -122.72 | 38.44 | 48.0 | 707.0 | 166.0 | 458.0 | 172.0 | 3.1797 | . 19140 -122.70 | 38.31 | 14.0 | 3155.0 | 580.0 | 1208.0 | 501.0 | 4.1964 | . 19773 -122.14 | 39.97 | 27.0 | 1079.0 | 222.0 | 625.0 | 197.0 | 3.1319 | . 16512 rows × 8 columns . Handling Text and Categorical Attributes . So far we have only dealt with numerical attributes, but now let’s look at text attributes. In this dataset, there is just one: the ocean_proximity attribute. Let’s look at its value for the first 10 instances: . housing_cat = housing[[&#39;ocean_proximity&#39;]] housing_cat.head(10) housing_cat.nunique() . ocean_proximity 5 dtype: int64 . housing[&#39;ocean_proximity&#39;].unique() . array([&#39;INLAND&#39;, &#39;NEAR OCEAN&#39;, &#39;&lt;1H OCEAN&#39;, &#39;NEAR BAY&#39;, &#39;ISLAND&#39;], dtype=object) . It’s not arbitrary text: there are a limited number of possible values, each of which represents a category. So this attribute is a categorical attribute. Most Machine Learning algorithms prefer to work with numbers, so let’s convert these categories from text to numbers. For this, we can use Scikit-Learn’s OrdinalEncoder class : . from sklearn.preprocessing import OrdinalEncoder . ordinal_encoder = OrdinalEncoder() housing_cat_encoded = ordinal_encoder.fit_transform(housing_cat) # categorical dataframe housing_cat_encoded[:10] . array([[1.], [4.], [1.], [4.], [0.], [3.], [0.], [0.], [0.], [0.]]) . housing_cat_encoded.shape . (16512, 1) . #of categories for each categorical attribute ordinal_encoder.categories_ . [array([&#39;&lt;1H OCEAN&#39;, &#39;INLAND&#39;, &#39;ISLAND&#39;, &#39;NEAR BAY&#39;, &#39;NEAR OCEAN&#39;], dtype=object)] . np.unique(housing_cat_encoded) . array([0., 1., 2., 3., 4.]) . One issue with this representation is that ML algorithms ( OrdinaEncoder) will assume that two nearby values are more similar than two distant values. This may be fine in some cases (e.g., for ordered categories such as “bad,” “average,” “good,” and “excellent”) : ordinal encoding for categorical variables that have a natural rank ordering but it is obviously not the case for the ocean_proximity column (for example, categories 0 and 4 are clearly more similar than categories 0 and 1). . To fix this issue, a common solution is to create one binary attribute per category: one attribute equal to 1 when the category is “&lt;1H OCEAN” (and 0 otherwise), another attribute equal to 1 when the category is “INLAND” (and 0 otherwise), and so on. This is called one-hot encoding. The new attributes are sometimes called dummy attributes. Scikit-Learn provides a OneHotEncoder class to convert categorical values into one-hot vectors . See this blogpost : https://machinelearningmastery.com/one-hot-encoding-for-categorical-data/ . from sklearn.preprocessing import OneHotEncoder cat_encoder = OneHotEncoder() housing_cat_1hot = cat_encoder.fit_transform(housing_cat) housing_cat_1hot . &lt;16512x5 sparse matrix of type &#39;&lt;class &#39;numpy.float64&#39;&gt;&#39; with 16512 stored elements in Compressed Sparse Row format&gt; . Notice that the output is a SciPy sparse matrix, instead of a NumPy array. This is very useful when you have categorical attributes with thousands of categories. After onehot encoding, we get a matrix with thousands of columns, and the matrix is full of 0s except for a single 1 per row. Using up tons of memory mostly to store zeros would be very wasteful, so instead a sparse matrix only stores the location of the nonzero elements. we can use it mostly like a normal 2D array,but if we really want to convert it to a (dense) NumPy array, we call the toarray() method: . housing_cat_1hot.toarray() . array([[0., 1., 0., 0., 0.], [0., 0., 0., 0., 1.], [0., 1., 0., 0., 0.], ..., [1., 0., 0., 0., 0.], [1., 0., 0., 0., 0.], [0., 1., 0., 0., 0.]]) . housing_cat.head(3) . ocean_proximity . 12655 INLAND | . 15502 NEAR OCEAN | . 2908 INLAND | . cat_encoder.categories_ . [array([&#39;&lt;1H OCEAN&#39;, &#39;INLAND&#39;, &#39;ISLAND&#39;, &#39;NEAR BAY&#39;, &#39;NEAR OCEAN&#39;], dtype=object)] . If a categorical attribute has a large number of possible categories (e.g., country code, profession, species), then one-hot encoding will result in a large number of input features. This may slow down training and degrade performance. . If this happens, we may want to replace the categorical input with useful numerical features related to the categories: for example, we could replace the ocean_proximity feature with the distance to the ocean (similarly, a country code could be replaced with the country’s population and GDP per capita). Alternatively, we could replace each category with a learnable, low-dimensional vector called an embedding. . Each category’s representation would be learned during training. This is an example of representation learning. . Custom Transformers . retun back for more details ? see blogpost : https://towardsdatascience.com/pipelines-custom-transformers-in-scikit-learn-the-step-by-step-guide-with-python-code-4a7d9b068156 . and this : https://github.com/ageron/handson-ml2/blob/master/02_end_to_end_machine_learning_project.ipynb . housing.values[: ,4:] . array([[797.0, 2237.0, 706.0, 2.1736, &#39;INLAND&#39;, 2], [855.0, 2015.0, 768.0, 6.3373, &#39;NEAR OCEAN&#39;, 5], [310.0, 667.0, 300.0, 2.875, &#39;INLAND&#39;, 2], ..., [166.0, 458.0, 172.0, 3.1797, &#39;&lt;1H OCEAN&#39;, 3], [580.0, 1208.0, 501.0, 4.1964, &#39;&lt;1H OCEAN&#39;, 3], [222.0, 625.0, 197.0, 3.1319, &#39;INLAND&#39;, 3]], dtype=object) . housing.head(3) . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income ocean_proximity income_cat . 12655 -121.46 | 38.52 | 29.0 | 3873.0 | 797.0 | 2237.0 | 706.0 | 2.1736 | INLAND | 2 | . 15502 -117.23 | 33.09 | 7.0 | 5320.0 | 855.0 | 2015.0 | 768.0 | 6.3373 | NEAR OCEAN | 5 | . 2908 -119.04 | 35.37 | 44.0 | 1618.0 | 310.0 | 667.0 | 300.0 | 2.8750 | INLAND | 2 | . from sklearn.base import BaseEstimator, TransformerMixin rooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6 class CombinedAttributesAdder(BaseEstimator, TransformerMixin): def __init__(self, add_bedrooms_per_room = True): # no *args or **kargs self.add_bedrooms_per_room = add_bedrooms_per_room def fit(self, X, y=None): return self # nothing else to do def transform(self, X): rooms_per_household = X[:, rooms_ix] / X[:, households_ix] population_per_household = X[:, population_ix] / X[:, households_ix] if self.add_bedrooms_per_room: bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix] return np.c_[X, rooms_per_household, population_per_household, bedrooms_per_room] else: return np.c_[X, rooms_per_household, population_per_household] . attr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False ) housing_extra_attribs = attr_adder.transform(housing.values) . housing_extra_attribs . array([[-121.46, 38.52, 29.0, ..., 2, 5.485835694050992, 3.168555240793201], [-117.23, 33.09, 7.0, ..., 5, 6.927083333333333, 2.6236979166666665], [-119.04, 35.37, 44.0, ..., 2, 5.3933333333333335, 2.223333333333333], ..., [-122.72, 38.44, 48.0, ..., 3, 4.1104651162790695, 2.6627906976744184], [-122.7, 38.31, 14.0, ..., 3, 6.297405189620759, 2.411177644710579], [-122.14, 39.97, 27.0, ..., 3, 5.477157360406092, 3.1725888324873095]], dtype=object) . Feature Scaling . One of the most important transformations you need to apply to your data is feature scaling. With few exceptions, Machine Learning algorithms don’t perform well when the input numerical attributes have very different scales . This is the case for the housing data: total_rooms ranges from about 6 to 39320, while median_income only range from 0 to 15 : . Note that scaling the target values is generally not required. . housing_num.describe().T . count mean std min 25% 50% 75% max . longitude 16512.0 | -119.575635 | 2.001828 | -124.3500 | -121.80000 | -118.51000 | -118.010000 | -114.3100 | . latitude 16512.0 | 35.639314 | 2.137963 | 32.5400 | 33.94000 | 34.26000 | 37.720000 | 41.9500 | . housing_median_age 16512.0 | 28.653404 | 12.574819 | 1.0000 | 18.00000 | 29.00000 | 37.000000 | 52.0000 | . total_rooms 16512.0 | 2622.539789 | 2138.417080 | 6.0000 | 1443.00000 | 2119.00000 | 3141.000000 | 39320.0000 | . total_bedrooms 16512.0 | 533.939438 | 410.806260 | 2.0000 | 296.00000 | 433.00000 | 641.000000 | 6210.0000 | . population 16512.0 | 1419.687379 | 1115.663036 | 3.0000 | 784.00000 | 1164.00000 | 1719.000000 | 35682.0000 | . households 16512.0 | 497.011810 | 375.696156 | 2.0000 | 279.00000 | 408.00000 | 602.000000 | 5358.0000 | . median_income 16512.0 | 3.875884 | 1.904931 | 0.4999 | 2.56695 | 3.54155 | 4.745325 | 15.0001 | . There are two common ways to get all attributes to have the same scale: . min-max scaling : ranging from 0 to 1. Scikit-Learn provides a transformer called MinMaxScaler for this. It has a feature_range hyperparameter that lets you change the range if, for some reason, you don’t want 0–1 : https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html | . Standardization : returns has unit variance and unlike min-max scaling, standardization does not bound values to a specific range, which may be a problem for some algorithms (e.g., neural networks often expect an input value ranging from 0 to 1).However, standardization is much less affected by outliers. Scikit-Learn provides a transformer called StandardScaler for standardization : https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.StandardScaler.html | . Transformation Pipelines . As we can see, there are many data transformation steps that need to be executed in the right order. Fortunately, Scikit-Learn provides the Pipeline class to help with such sequences of transformations. . Here is a small pipeline for the numerical attributes: . from sklearn.pipeline import Pipeline from sklearn.impute import SimpleImputer from sklearn.preprocessing import StandardScaler,MinMaxScaler # plus the class add attribure that we created . The Pipeline constructor takes a list of name/estimator pairs defining a sequence of steps. All but the last estimator must be transformers (i.e., they must have a fit_transform() method). . num_pipeline = Pipeline([ (&#39;imputer&#39;, SimpleImputer(strategy = &#39;median&#39;)), #(&#39;attribs_adder&#39;, CombinedAttributesAdder()), (&#39;std_scaler&#39;, StandardScaler()) ]) . housing_num_tr = num_pipeline.fit_transform(housing_num) . So far, we have handled the categorical columns and the numerical columns separately. It would be more convenient to have a single transformer able to handle all columns, applying the appropriate transformations to each column. In version 0.20, Scikit-Learn introduced the ColumnTransformer for this purpose, and the good news is that it works great with pandas DataFrames. Let’s use it to apply all the transformations to the housing data: . from sklearn.compose import ColumnTransformer . num_attribs = list(housing_num) cat_attribs = [&#39;ocean_proximity&#39;] . full_pipeline = ColumnTransformer([ (&#39;num&#39;, num_pipeline, num_attribs), (&#39;cat&#39;, OneHotEncoder(), cat_attribs) ] ) . housing_prepared = full_pipeline.fit_transform(housing) . housing_prepared . array([[-0.94135046, 1.34743822, 0.02756357, ..., 0. , 0. , 0. ], [ 1.17178212, -1.19243966, -1.72201763, ..., 0. , 0. , 1. ], [ 0.26758118, -0.1259716 , 1.22045984, ..., 0. , 0. , 0. ], ..., [-1.5707942 , 1.31001828, 1.53856552, ..., 0. , 0. , 0. ], [-1.56080303, 1.2492109 , -1.1653327 , ..., 0. , 0. , 0. ], [-1.28105026, 2.02567448, -0.13148926, ..., 0. , 0. , 0. ]]) . housing_prepared[0].shape . (13,) . housing_prepared.shape . (16512, 13) . to read carefully for later : . First we import the ColumnTransformer class, next we get the list of numerical column . names and the list of categorical column names, and then we construct a Colum nTransformer. The constructor requires a list of tuples, where each tuple contains a name,22 a transformer, and a list of names (or indices) of columns that the transformer should be applied to. In this example, we specify that the numerical columns should be transformed using the num_pipeline that we defined earlier, and the categorical columns should be transformed using a OneHotEncoder. Finally, we apply this ColumnTransformer to the housing data: it applies each transformer to the appropriate columns and concatenates the outputs along the second axis (the transformers must return the same number of rows). Note that the OneHotEncoder returns a sparse matrix, while the num_pipeline returns a dense matrix. When there is such a mix of sparse and dense matrices, the Colum nTransformer estimates the density of the final matrix (i.e., the ratio of nonzero cells), and it returns a sparse matrix if the density is lower than a given threshold (by default, sparse_threshold=0.3). In this example, it returns a dense matrix. And that’s it! We have a preprocessing pipeline that takes the full housing data and applies the appropriate transformations to each column. Instead of using a transformer, you can specify the string &quot;drop&quot; if you want the columns to be dropped, or you can specify &quot;pass through&quot; if you want the columns to be left untouched. By default, the remaining columns (i.e., the ones that were not listed) will be dropped, but you can set the remainder hyperparameter to any transformer (or to &quot;passthrough&quot;) if you want these columns to be handled differently. If you are using Scikit-Learn 0.19 or earlier, you can use a third-party library such as sklearn-pandas, or you can roll out your own custom transformer to get the same functionality as the ColumnTransformer. Alternatively, you can use the FeatureUnion class, which can apply different transformers and concatenate their outputs. But you cannot specify different columns for each transformer; they all apply to the whole data. It is possible to work around this limitation using a custom transformer for column selection (see the Jupyter notebook for an example). . see link : https://github.com/ageron/handson-ml2/blob/master/02_end_to_end_machine_learning_project.ipynb . Select and Train a Model . we framed the problem | we got the data and explored it | we sampled a training set and a test set | we wrote transformation pipelines to clean up and prepare your data for Machine Learning algorithms automatically. | . Training and Evaluating on the Training Set . Let’s first train a Linear Regression model . housing_prepared.shape . (16512, 13) . from sklearn.linear_model import LinearRegression lin_reg = LinearRegression() lin_reg.fit(housing_prepared, housing_labels) . LinearRegression() . Let’s try it out on a few instances from the training set: . some_data = housing.iloc[:5] some_labels = housing_labels.iloc[:5] some_data_prepared = full_pipeline.transform(some_data) print(&quot;Predictions:&quot;, lin_reg.predict(some_data_prepared)) . Predictions: [ 88983.14806384 305351.35385026 153334.71183453 184302.55162102 246840.18988841] . print(&quot;Labels:&quot;, list(some_labels)) . Labels: [72100.0, 279600.0, 82700.0, 112500.0, 238300.0] . some_data_prepared.shape . (5, 13) . Some remarks : If we encotered missing values are in the test set ? ( OneHotEncode() has a paramete : handle_unknown = &#39;ignore&#39;) | Indexing and selection data : if we want to modifiy a certain column in the dataframe, we should not proceed in this way : df[&#39;ocean_proxemity][0]= np.nan but rather copy the dataset first and then df.loc[0,&#39;ocean_proxemity&#39;]=np.nan. Read : https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy | . | . More on sklearn pipelines : https://scikit-learn.org/stable/auto_examples/compose/plot_column_transformer_mixed_types.html . The iloc indexer for Pandas Dataframe is used for integer-location based indexing / selection by position. | The Pandas loc indexer can be used with DataFrames for two different use cases: Selecting rows by label/index | Selecting rows with a boolean / conditional lookup | . | . Read : https://www.shanelynn.ie/pandas-iloc-loc-select-rows-and-columns-dataframe/ . Let’s measure this regression model’s RMSE on the whole training set using Scikit-Learn’s mean_squared_error() function : . from sklearn.metrics import mean_squared_error . housing_predictions = lin_reg.predict(housing_prepared) housing_predictions[:4] . array([ 88983.14806384, 305351.35385026, 153334.71183453, 184302.55162102]) . housing_labels . 12655 72100.0 15502 279600.0 2908 82700.0 14053 112500.0 20496 238300.0 ... 15174 268500.0 12661 90400.0 19263 140400.0 19140 258100.0 19773 62700.0 Name: median_house_value, Length: 16512, dtype: float64 . lin_rmse = mean_squared_error(housing_predictions,housing_labels, squared= False) lin_rmse . 69050.56219504567 . Most districts’ median_housing_values range between $120,000 and $265,000, so a typical prediction error of $69,050 is not very satisfying: . housing_labels.describe() . count 16512.000000 mean 207005.322372 std 115701.297250 min 14999.000000 25% 119800.000000 50% 179500.000000 75% 263900.000000 max 500001.000000 Name: median_house_value, dtype: float64 . This is an example of a model underfitting the training data : When this happens it can mean that the features do not provide enough information to make good predictions, or that the model is not powerful enough. As we saw in the previous chapter, the main ways to fix underfitting are to select a more powerful model, to feed the training algorithm with better features, or to reduce the constraints on the model. . Let’s train a DecisionTreeRegressor. This is a powerful model, capable of finding complex nonlinear relationships in the data | . from sklearn.tree import DecisionTreeRegressor tree_reg = DecisionTreeRegressor() tree_reg.fit(housing_prepared, housing_labels) . DecisionTreeRegressor() . housing_predictions = tree_reg.predict(housing_prepared) tree_rmse = mean_squared_error(housing_labels, housing_predictions, squared=False) tree_rmse . 0.0 . As we saw earlier, we don’t want to touch the test set until we are ready to launch a model we are confident about, so we need to use part of the training set for training and part of it for model validation. . Better Evaluation Using Cross-Validation . One way to evaluate the Decision Tree model would be to use the train_test_split() function to split the training set into a smaller training set and a validation set, then train our models against the smaller training set and evaluate them against the validation set. . | A great alternative is to use Scikit-Learn’s K-fold cross-validation feature : The following code randomly splits the training set into 10 distinct subsets called folds, then it trains and evaluates the Decision Tree model 10 times, picking a different fold for evaluation every time and training on the other 9 folds. The result is an array containing the 10 evaluation scores: . | . from sklearn.model_selection import cross_val_score . scores = - cross_val_score(tree_reg, housing_prepared, housing_labels, scoring=&#39;neg_root_mean_squared_error&#39;, cv=10) scores . array([71270.15951523, 68888.32011559, 64997.85188763, 69263.03318422, 68197.14503697, 68963.98885461, 73536.17215975, 69183.4936482 , 66243.08004208, 71783.50940468]) . to get the &#39;scoring&#39; options, use ssorted(sklearn.metrics.SCORERS.keys()) | Scikit-Learn’s cross-validation features expect a utility function (greater is better) rather than a cost function (lower is better), so the scoring function is actually the opposite of the MSE (i.e., a negative value) | . def display_scores(scores): print(&#39;Scores :&#39;,scores) print(&#39;Mean :&#39;,scores.mean()) print(&#39;Standard deviation :&#39;,scores.std()) . display_scores(scores) . Scores : [71270.15951523 68888.32011559 64997.85188763 69263.03318422 68197.14503697 68963.98885461 73536.17215975 69183.4936482 66243.08004208 71783.50940468] Mean : 69232.67538489516 Standard deviation : 2394.0765898258674 . Cross-validation allows you to get not only an estimate of the performance of your model, but also a measure of how precise this estimate is (i.e., its standard deviation). The Decision Tree has a score of approximately 69,232, generally ±2,394. We would not have this information if we just used one validation set. | Let’s compute the same scores for the Linear Regression model just to be sure: | . lin_scores = - cross_val_score(lin_reg,housing_prepared, housing_labels, scoring=&#39;neg_root_mean_squared_error&#39;, cv = 10) lin_scores . array([72229.03469752, 65318.2240289 , 67706.39604745, 69368.53738998, 66767.61061621, 73003.75273869, 70522.24414582, 69440.77896541, 66930.32945876, 70756.31946074]) . display_scores(lin_scores) . Scores : [72229.03469752 65318.2240289 67706.39604745 69368.53738998 66767.61061621 73003.75273869 70522.24414582 69440.77896541 66930.32945876 70756.31946074] Mean : 69204.32275494766 Standard deviation : 2372.07079105592 . The Decision Tree model is overfitting so badly that it performs worse than the Linear Regression model. . Let’s try one last model now: the RandomForestRegressor : Random Forests work by training many Decision Trees on random subsets of the features, then averaging out their predictions. Building a model on top of many other models is called Ensemble Learning, and it is often a great way to push ML algorithms even further. . from sklearn.ensemble import RandomForestRegressor forest_reg = RandomForestRegressor() forest_reg.fit(housing_prepared, housing_labels) . RandomForestRegressor() . forest_reg_scores = - cross_val_score(forest_reg,housing_prepared, housing_labels, scoring=&#39;neg_root_mean_squared_error&#39;, cv = 10) forest_reg_scores . array([50311.08798022, 49043.69572163, 46081.95238283, 50467.56214907, 47657.84153211, 49419.96274189, 51772.42197545, 49030.57976501, 47498.17482111, 53167.33074077]) . display_scores(forest_reg_scores) . Scores : [50311.08798022 49043.69572163 46081.95238283 50467.56214907 47657.84153211 49419.96274189 51772.42197545 49030.57976501 47498.17482111 53167.33074077] Mean : 49445.06098101039 Standard deviation : 1992.3842490271882 . forest_predictions = forest_reg.predict(housing_prepared) forst_rmse = mean_squared_error(housing_labels, forest_predictions, squared=False) forst_rmse . 18266.74368085342 . Note that the score on the training set(18,266) is still much lower than on the validation sets(49,445 +/-1992.38), meaning that the model is still overfitting the training set. . We should save every model we experiment with so that er can come back easily to any model you want. Make sure you save both the hyperparameters and the trained parameters, as well as the cross-validation scores and perhaps the actual predictions as well. This will allow you to easily compare scores across model types, and compare the types of errors they make. . | We can easily save Scikit-Learn models by using Python’s pickle module or by using the joblib library, which is more efficient at serializing large NumPy arrays (you can install this library using pip): . | . pip install joblib . Requirement already satisfied: joblib in /Users/rmbp/opt/anaconda3/lib/python3.7/site-packages (1.1.0) Note: you may need to restart the kernel to use updated packages. . import joblib . joblib.dump(forest_reg,&#39;rmd_forest.pkl&#39;) # saving the model as pkl file and named &#39;rmd_forest.pkl model_reload = joblib.load(&#39;rmd_forest.pkl&#39;) # loading the model rmd_forest_prediction = model_reload.predict(housing_prepared) # saving the predictions rmd_forest_rmse = mean_squared_error(rmd_forest_prediction, housing_labels) # saving the rmse on the train test to check overfit rmd_forest_cross_validation = -cross_val_score(model_reload, housing_prepared, housing_labels, scoring=&#39;neg_root_mean_squared_error&#39;, cv = 10) # rmse on validation to check overfit display_scores(rmd_forest_cross_validation) # cross validation score . Scores : [50992.51555592 49288.84220573 46237.11091931 50248.85062075 47806.3116179 49272.797347 51801.0468531 48800.83283468 47540.31917616 53091.63650718] Mean : 49508.0263637728 Standard deviation : 1972.8867918884973 . Fine-Tune Our Model . Grid Search . Using Scikit-Learn’s GridSearchCV, All we need to do is tell it which hyperparameters we want it to experiment with and what valuesto try out, and it will use cross-validation to evaluate all the possible combinations of hyperparameter values : . from sklearn.model_selection import GridSearchCV param_grid = [ {&#39;n_estimators&#39;: [3, 10, 30], &#39;max_features&#39;: [2, 4, 6, 8]}, {&#39;bootstrap&#39;: [False], &#39;n_estimators&#39;: [3, 10], &#39;max_features&#39;: [2, 3, 4]}, ] forest_reg = RandomForestRegressor() grid_search = GridSearchCV(forest_reg, param_grid, cv=5, scoring=&#39;neg_root_mean_squared_error&#39;, return_train_score = True) grid_search.fit(housing_prepared, housing_labels) . GridSearchCV(cv=5, estimator=RandomForestRegressor(), param_grid=[{&#39;max_features&#39;: [2, 4, 6, 8], &#39;n_estimators&#39;: [3, 10, 30]}, {&#39;bootstrap&#39;: [False], &#39;max_features&#39;: [2, 3, 4], &#39;n_estimators&#39;: [3, 10]}], return_train_score=True, scoring=&#39;neg_root_mean_squared_error&#39;) . ?GridSearchCV . This param_grid tells Scikit-Learn to first evaluate all 3 × 4 = 12 combinations of n_estimators and max_features hyperparameter values specified in the first dict. -Then try all 2 × 3 = 6 combinations of hyperparameter values in the second dict, but this time with the bootstrap hyperparameter set to False instead of True | The grid search will explore 12 + 6 = 18 combinations of `RandomForestRegressor hyperparameter values`` | And it will train each model 5 times (cv=5).In other words, all in all, there will be 18 × 5 = 90 rounds of training. | . We can get the best combination of parameters like this : . grid_search.best_params_ #we should probably try searching again with higher values; the score may continue to improve. . {&#39;max_features&#39;: 8, &#39;n_estimators&#39;: 30} . grid_search.best_estimator_ . RandomForestRegressor(max_features=8, n_estimators=30) . cvres = grid_search.cv_results_ for mean_score, params in zip(cvres[&quot;mean_test_score&quot;], cvres[&quot;params&quot;]): print(-mean_score, params) . 64530.85647414619 {&#39;max_features&#39;: 2, &#39;n_estimators&#39;: 3} 55067.77832337284 {&#39;max_features&#39;: 2, &#39;n_estimators&#39;: 10} 52781.7167175866 {&#39;max_features&#39;: 2, &#39;n_estimators&#39;: 30} 60327.066875895776 {&#39;max_features&#39;: 4, &#39;n_estimators&#39;: 3} 52586.95798629394 {&#39;max_features&#39;: 4, &#39;n_estimators&#39;: 10} 50346.63948997191 {&#39;max_features&#39;: 4, &#39;n_estimators&#39;: 30} 58398.87657548992 {&#39;max_features&#39;: 6, &#39;n_estimators&#39;: 3} 52075.368300249116 {&#39;max_features&#39;: 6, &#39;n_estimators&#39;: 10} 50093.621910952315 {&#39;max_features&#39;: 6, &#39;n_estimators&#39;: 30} 58628.430409285626 {&#39;max_features&#39;: 8, &#39;n_estimators&#39;: 3} 51936.797178963665 {&#39;max_features&#39;: 8, &#39;n_estimators&#39;: 10} 50089.501357132904 {&#39;max_features&#39;: 8, &#39;n_estimators&#39;: 30} 62303.627420601595 {&#39;bootstrap&#39;: False, &#39;max_features&#39;: 2, &#39;n_estimators&#39;: 3} 54183.89357722118 {&#39;bootstrap&#39;: False, &#39;max_features&#39;: 2, &#39;n_estimators&#39;: 10} 60004.47703668058 {&#39;bootstrap&#39;: False, &#39;max_features&#39;: 3, &#39;n_estimators&#39;: 3} 52603.81684475204 {&#39;bootstrap&#39;: False, &#39;max_features&#39;: 3, &#39;n_estimators&#39;: 10} 58002.985249363366 {&#39;bootstrap&#39;: False, &#39;max_features&#39;: 4, &#39;n_estimators&#39;: 3} 52121.979634950054 {&#39;bootstrap&#39;: False, &#39;max_features&#39;: 4, &#39;n_estimators&#39;: 10} . Rq: Don’t forget that we can treat some of the data preparation steps as hyperparameters. The grid search will automatically find out whether or not to add a feature you were not sure about. Ex : using the add_bedrooms_per_room hyperparameter of your CombinedAttributesAdder transformer). .",
            "url": "https://younesszaim.github.io/myportfolio/fastpages/jupyter/2021/11/15/ml.html",
            "relUrl": "/fastpages/jupyter/2021/11/15/ml.html",
            "date": " • Nov 15, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://younesszaim.github.io/myportfolio/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi ! I’m Youness ZAIM. . Please check my resume on Linkedin. . You can also email me on zaimyouness9797@gmail.com. .",
          "url": "https://younesszaim.github.io/myportfolio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://younesszaim.github.io/myportfolio/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}